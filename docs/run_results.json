{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.4", "generated_at": "2024-08-05T22:27:53.526741Z", "invocation_id": "fdfcab4a-7c8b-4241-9334-519505857c07", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.557758Z", "completed_at": "2024-08-05T22:27:50.571364Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.571630Z", "completed_at": "2024-08-05T22:27:50.571643Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016379833221435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__account_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_account_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__account_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.564067Z", "completed_at": "2024-08-05T22:27:50.572312Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.573579Z", "completed_at": "2024-08-05T22:27:50.573586Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017840862274169922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__amendment_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_amendment_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__amendment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.566161Z", "completed_at": "2024-08-05T22:27:50.572976Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.574291Z", "completed_at": "2024-08-05T22:27:50.574295Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01815485954284668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__contact_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_contact_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__contact_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.568454Z", "completed_at": "2024-08-05T22:27:50.573263Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.574675Z", "completed_at": "2024-08-05T22:27:50.574679Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018132925033569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__credit_balance_adjustment_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_credit_balance_adjustment_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__credit_balance_adjustment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.575403Z", "completed_at": "2024-08-05T22:27:50.579689Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.582669Z", "completed_at": "2024-08-05T22:27:50.582676Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010100841522216797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__invoice_item_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_invoice_item_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.580404Z", "completed_at": "2024-08-05T22:27:50.589109Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.589897Z", "completed_at": "2024-08-05T22:27:50.589902Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011363744735717773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__invoice_payment_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_invoice_payment_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.583152Z", "completed_at": "2024-08-05T22:27:50.589653Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.590669Z", "completed_at": "2024-08-05T22:27:50.590672Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011751890182495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__invoice_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_invoice_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.585580Z", "completed_at": "2024-08-05T22:27:50.590250Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.591352Z", "completed_at": "2024-08-05T22:27:50.591357Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012200117111206055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__order_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_order_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__order_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.591826Z", "completed_at": "2024-08-05T22:27:50.596097Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.599072Z", "completed_at": "2024-08-05T22:27:50.599078Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009781837463378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__payment_method_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_payment_method_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment_method_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.596532Z", "completed_at": "2024-08-05T22:27:50.604462Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.605759Z", "completed_at": "2024-08-05T22:27:50.605766Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011207103729248047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__payment_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_payment_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.599455Z", "completed_at": "2024-08-05T22:27:50.605257Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.606465Z", "completed_at": "2024-08-05T22:27:50.606471Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01117706298828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__product_rate_plan_charge_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_product_rate_plan_charge_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product_rate_plan_charge_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.601804Z", "completed_at": "2024-08-05T22:27:50.605455Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.606850Z", "completed_at": "2024-08-05T22:27:50.606853Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011057853698730469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__product_rate_plan_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_product_rate_plan_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product_rate_plan_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.607738Z", "completed_at": "2024-08-05T22:27:50.612491Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.613459Z", "completed_at": "2024-08-05T22:27:50.613466Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008605241775512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__product_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_product_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.616178Z", "completed_at": "2024-08-05T22:27:50.622053Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.625496Z", "completed_at": "2024-08-05T22:27:50.625504Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01360321044921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__rate_plan_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_rate_plan_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__rate_plan_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.613929Z", "completed_at": "2024-08-05T22:27:50.622264Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.625945Z", "completed_at": "2024-08-05T22:27:50.625949Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014367103576660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__rate_plan_charge_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_rate_plan_charge_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__rate_plan_charge_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.618055Z", "completed_at": "2024-08-05T22:27:50.622552Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.626328Z", "completed_at": "2024-08-05T22:27:50.626332Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014143943786621094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__refund_invoice_payment_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_refund_invoice_payment_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__refund_invoice_payment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.622844Z", "completed_at": "2024-08-05T22:27:50.627540Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.628751Z", "completed_at": "2024-08-05T22:27:50.628755Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007430076599121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__refund_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_refund_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__refund_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.636345Z", "completed_at": "2024-08-05T22:27:50.637576Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.638405Z", "completed_at": "2024-08-05T22:27:50.638414Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009391069412231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.638885Z", "completed_at": "2024-08-05T22:27:50.640142Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.641125Z", "completed_at": "2024-08-05T22:27:50.641130Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005151987075805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_amendment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.632600Z", "completed_at": "2024-08-05T22:27:50.640415Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.641502Z", "completed_at": "2024-08-05T22:27:50.641506Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013072013854980469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__taxation_item_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_taxation_item_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__taxation_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.630395Z", "completed_at": "2024-08-05T22:27:50.640630Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.641850Z", "completed_at": "2024-08-05T22:27:50.641853Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01376795768737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__subscription_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_integration_tests_1\".\"zuora_subscription_data\"", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__subscription_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.644417Z", "completed_at": "2024-08-05T22:27:50.645585Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.646551Z", "completed_at": "2024-08-05T22:27:50.646557Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004394054412841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_contact_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.646948Z", "completed_at": "2024-08-05T22:27:50.648096Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.652484Z", "completed_at": "2024-08-05T22:27:50.652490Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009027957916259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_credit_balance_adjustment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.648410Z", "completed_at": "2024-08-05T22:27:50.650419Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.652963Z", "completed_at": "2024-08-05T22:27:50.652967Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009102106094360352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_invoice_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.650707Z", "completed_at": "2024-08-05T22:27:50.651829Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.653305Z", "completed_at": "2024-08-05T22:27:50.653308Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009167194366455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_invoice_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.655644Z", "completed_at": "2024-08-05T22:27:50.656849Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.657685Z", "completed_at": "2024-08-05T22:27:50.657690Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00412297248840332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_invoice_payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.658050Z", "completed_at": "2024-08-05T22:27:50.659185Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.662302Z", "completed_at": "2024-08-05T22:27:50.662311Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007442951202392578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_order_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.659494Z", "completed_at": "2024-08-05T22:27:50.660559Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.662810Z", "completed_at": "2024-08-05T22:27:50.662814Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007646083831787109, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.660793Z", "completed_at": "2024-08-05T22:27:50.661771Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.663236Z", "completed_at": "2024-08-05T22:27:50.663241Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007859945297241211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_payment_method_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.665614Z", "completed_at": "2024-08-05T22:27:50.667775Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.668800Z", "completed_at": "2024-08-05T22:27:50.668807Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005255937576293945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_product_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.669303Z", "completed_at": "2024-08-05T22:27:50.670401Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.673230Z", "completed_at": "2024-08-05T22:27:50.673235Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008409976959228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_product_rate_plan_charge_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.670633Z", "completed_at": "2024-08-05T22:27:50.671640Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.673624Z", "completed_at": "2024-08-05T22:27:50.673627Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008477926254272461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_product_rate_plan_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.671848Z", "completed_at": "2024-08-05T22:27:50.672807Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.673928Z", "completed_at": "2024-08-05T22:27:50.673931Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008562803268432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_rate_plan_charge_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.676684Z", "completed_at": "2024-08-05T22:27:50.677972Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.679124Z", "completed_at": "2024-08-05T22:27:50.679130Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004987955093383789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_rate_plan_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.679652Z", "completed_at": "2024-08-05T22:27:50.681828Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.719167Z", "completed_at": "2024-08-05T22:27:50.719176Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04360318183898926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_refund_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.682072Z", "completed_at": "2024-08-05T22:27:50.716806Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.719678Z", "completed_at": "2024-08-05T22:27:50.719681Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04369521141052246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_refund_invoice_payment_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.717212Z", "completed_at": "2024-08-05T22:27:50.718434Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.720016Z", "completed_at": "2024-08-05T22:27:50.720019Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04374885559082031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_subscription_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.722252Z", "completed_at": "2024-08-05T22:27:50.723531Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:50.724453Z", "completed_at": "2024-08-05T22:27:50.724458Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.004186153411865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.zuora_integration_tests.zuora_taxation_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.724825Z", "completed_at": "2024-08-05T22:27:51.013746Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:51.014131Z", "completed_at": "2024-08-05T22:27:51.014138Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3146817684173584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__account", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__account_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    auto_pay\n    \n as \n    \n    auto_pay\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    batch\n    \n as \n    \n    batch\n    \n, \n    \n    \n    bill_cycle_day\n    \n as \n    \n    bill_cycle_day\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_balance\n    \n as \n    \n    credit_balance\n    \n, \n    \n    \n    crm_id\n    \n as \n    \n    crm_id\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_invoice_date\n    \n as \n    \n    last_invoice_date\n    \n, \n    \n    \n    mrr\n    \n as \n    \n    mrr\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_term\n    \n as \n    \n    payment_term\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tax_exempt_effective_date\n    \n as \n    \n    tax_exempt_effective_date\n    \n, \n    \n    \n    tax_exempt_expiration_date\n    \n as \n    \n    tax_exempt_expiration_date\n    \n, \n    \n    \n    tax_exempt_status\n    \n as \n    \n    tax_exempt_status\n    \n, \n    \n    \n    total_debit_memo_balance\n    \n as \n    \n    total_debit_memo_balance\n    \n, \n    \n    \n    total_invoice_balance\n    \n as \n    \n    total_invoice_balance\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    vatid\n    \n as \n    \n    vatid\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        account_number,\n        auto_pay,\n        balance,\n        batch, \n        bill_cycle_day,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        credit_balance,\n        crm_id,\n        currency,\n        default_payment_method_id,\n        last_invoice_date,\n        mrr,\n        name,\n        notes,\n        parent_account_id,\n        payment_term,\n        sold_to_contact_id,\n        status, \n        tax_exempt_effective_date, \n        tax_exempt_expiration_date, \n        tax_exempt_status, \n        total_debit_memo_balance,\n        total_invoice_balance,\n        updated_by_id,\n        updated_date,\n        vatid,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.739685Z", "completed_at": "2024-08-05T22:27:51.001507Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:51.013105Z", "completed_at": "2024-08-05T22:27:51.013144Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.31461477279663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__contact", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__contact_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    postal_code\n    \n as \n    \n    postal_code\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    work_email\n    \n as \n    \n    work_email\n    \n, \n    \n    \n    work_phone\n    \n as \n    \n    work_phone\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as contact_id,\n        account_id,\n        address_1,\n        address_2,\n        city,\n        country,\n        created_by_id,\n        created_date,\n        description, \n        first_name, \n        last_name,  \n        postal_code,\n        state,\n        updated_by_id,\n        updated_date,\n        work_email,\n        work_phone,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record,\n        row_number() over (partition by account_id order by created_date desc) = 1 as is_most_recent_account_contact\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__contact\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.735139Z", "completed_at": "2024-08-05T22:27:51.016012Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:51.016309Z", "completed_at": "2024-08-05T22:27:51.016313Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3279130458831787, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__amendment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__amendment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    auto_renew\n    \n as \n    \n    auto_renew\n    \n, \n    \n    \n    booking_date\n    \n as \n    \n    booking_date\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    contract_effective_date\n    \n as \n    \n    contract_effective_date\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    current_term\n    \n as \n    \n    current_term\n    \n, \n    \n    \n    current_term_period_type\n    \n as \n    \n    current_term_period_type\n    \n, \n    \n    \n    customer_acceptance_date\n    \n as \n    \n    customer_acceptance_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    effective_date\n    \n as \n    \n    effective_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    new_rate_plan_id\n    \n as \n    \n    new_rate_plan_id\n    \n, \n    \n    \n    removed_rate_plan_id\n    \n as \n    \n    removed_rate_plan_id\n    \n, \n    \n    \n    renewal_setting\n    \n as \n    \n    renewal_setting\n    \n, \n    \n    \n    renewal_term\n    \n as \n    \n    renewal_term\n    \n, \n    \n    \n    renewal_term_period_type\n    \n as \n    \n    renewal_term_period_type\n    \n, \n    \n    \n    resume_date\n    \n as \n    \n    resume_date\n    \n, \n    \n    \n    service_activation_date\n    \n as \n    \n    service_activation_date\n    \n, \n    \n    \n    specific_update_date\n    \n as \n    \n    specific_update_date\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    suspend_date\n    \n as \n    \n    suspend_date\n    \n, \n    \n    \n    term_start_date\n    \n as \n    \n    term_start_date\n    \n, \n    \n    \n    term_type\n    \n as \n    \n    term_type\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as amendment_id,\n        auto_renew,\n        booking_date,\n        code,\n        contract_effective_date,\n        created_by_id,\n        created_date,\n        current_term,\n        current_term_period_type,\n        customer_acceptance_date,\n        description,\n        effective_date,\n        name,\n        new_rate_plan_id,\n        removed_rate_plan_id,\n        renewal_setting,\n        renewal_term,\n        renewal_term_period_type,\n        resume_date,\n        service_activation_date,\n        specific_update_date,\n        status,\n        subscription_id,\n        suspend_date,\n        term_start_date,\n        term_type,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__amendment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:50.745620Z", "completed_at": "2024-08-05T22:27:51.064986Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:51.065858Z", "completed_at": "2024-08-05T22:27:51.065867Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3554799556732178, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__credit_balance_adjustment", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__credit_balance_adjustment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    adjustment_date\n    \n as \n    \n    adjustment_date\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_home_currency\n    \n as \n    \n    amount_home_currency\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    cancelled_on\n    \n as \n    \n    cancelled_on\n    \n, \n    \n    \n    comment\n    \n as \n    \n    comment\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    reason_code\n    \n as \n    \n    reason_code\n    \n, \n    \n    \n    reference_id\n    \n as \n    \n    reference_id\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    source_transaction_id\n    \n as \n    \n    source_transaction_id\n    \n, \n    \n    \n    source_transaction_number\n    \n as \n    \n    source_transaction_number\n    \n, \n    \n    \n    source_transaction_type\n    \n as \n    \n    source_transaction_type\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    transferred_to_accounting\n    \n as \n    \n    transferred_to_accounting\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_balance_adjustment_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        adjustment_date,\n        amount, \n        amount_home_currency,\n        bill_to_contact_id,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        invoice_id,\n        journal_entry_id, \n        number,\n        parent_account_id, \n        reason_code,\n        reference_id,\n        sold_to_contact_id,\n        source_transaction_id,\n        source_transaction_number,\n        source_transaction_type,\n        status,\n        transaction_currency,\n        transferred_to_accounting,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__credit_balance_adjustment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:51.040231Z", "completed_at": "2024-08-05T22:27:51.374345Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:51.383603Z", "completed_at": "2024-08-05T22:27:51.383616Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.38608598709106445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__invoice_item", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amendment_id\n    \n as \n    \n    amendment_id\n    \n, \n    \n    \n    applied_to_invoice_item_id\n    \n as \n    \n    applied_to_invoice_item_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    charge_amount\n    \n as \n    \n    charge_amount\n    \n, \n    \n    \n    charge_amount_home_currency\n    \n as \n    \n    charge_amount_home_currency\n    \n, \n    \n    \n    charge_date\n    \n as \n    \n    charge_date\n    \n, \n    \n    \n    charge_name\n    \n as \n    \n    charge_name\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    deferred_revenue_accounting_code_id\n    \n as \n    \n    deferred_revenue_accounting_code_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    processing_type\n    \n as \n    \n    processing_type\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_charge_id\n    \n as \n    \n    product_rate_plan_charge_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    rate_plan_charge_id\n    \n as \n    \n    rate_plan_charge_id\n    \n, \n    \n    \n    rate_plan_id\n    \n as \n    \n    rate_plan_id\n    \n, \n    \n    \n    recognized_revenue_accounting_code_id\n    \n as \n    \n    recognized_revenue_accounting_code_id\n    \n, \n    \n    \n    rev_rec_start_date\n    \n as \n    \n    rev_rec_start_date\n    \n, \n    \n    \n    service_end_date\n    \n as \n    \n    service_end_date\n    \n, \n    \n    \n    service_start_date\n    \n as \n    \n    service_start_date\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    source_item_type\n    \n as \n    \n    source_item_type\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_mode\n    \n as \n    \n    tax_mode\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    uom\n    \n as \n    \n    uom\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_item_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code, \n        amendment_id,\n        applied_to_invoice_item_id,\n        balance,\n        bill_to_contact_id, \n        charge_amount, \n        charge_amount_home_currency,\n        charge_date,\n        charge_name,\n        created_by_id,\n        created_date,\n        deferred_revenue_accounting_code_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        invoice_id,\n        journal_entry_id,\n        parent_account_id,\n        processing_type,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id,\n        quantity,\n        rate_plan_charge_id,\n        rate_plan_id,\n        recognized_revenue_accounting_code_id,\n        rev_rec_start_date,\n        service_end_date,\n        service_start_date,\n        sku,\n        sold_to_contact_id,\n        source_item_type,\n        subscription_id,\n        tax_amount,\n        tax_mode,\n        transaction_currency,\n        unit_price,\n        uom,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:51.044694Z", "completed_at": "2024-08-05T22:27:51.389186Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:51.392259Z", "completed_at": "2024-08-05T22:27:51.392267Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.38640594482421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__invoice_payment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_payment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_currency_rounding\n    \n as \n    \n    amount_currency_rounding\n    \n, \n    \n    \n    amount_home_currency\n    \n as \n    \n    amount_home_currency\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    cash_accounting_code_id\n    \n as \n    \n    cash_accounting_code_id\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    journal_run_id\n    \n as \n    \n    journal_run_id\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    provider_exchange_rate_date\n    \n as \n    \n    provider_exchange_rate_date\n    \n, \n    \n    \n    refund_amount\n    \n as \n    \n    refund_amount\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_payment_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_period_id,\n        amount,\n        amount_currency_rounding,\n        amount_home_currency,\n        bill_to_contact_id,\n        cash_accounting_code_id,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency, \n        invoice_id,\n        journal_entry_id,\n        journal_run_id,\n        parent_account_id,\n        payment_id,\n        payment_method_id,\n        provider_exchange_rate_date,\n        refund_amount,\n        sold_to_contact_id,\n        transaction_currency,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:51.101755Z", "completed_at": "2024-08-05T22:27:51.392930Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:51.393632Z", "completed_at": "2024-08-05T22:27:51.393639Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.32582998275756836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__order", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__order_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    error_code\n    \n as \n    \n    error_code\n    \n, \n    \n    \n    error_message\n    \n as \n    \n    error_message\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_date\n    \n as \n    \n    order_date\n    \n, \n    \n    \n    order_number\n    \n as \n    \n    order_number\n    \n, \n    \n    \n    response\n    \n as \n    \n    response\n    \n, \n    \n    \n    scheduled_date\n    \n as \n    \n    scheduled_date\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as order_id,\n        account_id,\n        bill_to_contact_id,\n        category,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        description,\n        error_code,\n        error_message,\n        order_date,\n        order_number,\n        response,\n        scheduled_date, \n        sold_to_contact_id,\n        state,\n        status,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__order\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:51.066223Z", "completed_at": "2024-08-05T22:27:51.392652Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:51.393300Z", "completed_at": "2024-08-05T22:27:51.393309Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.36256885528564453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__invoice", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    adjustment_amount\n    \n as \n    \n    adjustment_amount\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_home_currency\n    \n as \n    \n    amount_home_currency\n    \n, \n    \n    \n    amount_without_tax\n    \n as \n    \n    amount_without_tax\n    \n, \n    \n    \n    amount_without_tax_home_currency\n    \n as \n    \n    amount_without_tax_home_currency\n    \n, \n    \n    \n    auto_pay\n    \n as \n    \n    auto_pay\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_balance_adjustment_amount\n    \n as \n    \n    credit_balance_adjustment_amount\n    \n, \n    \n    \n    credit_memo_amount\n    \n as \n    \n    credit_memo_amount\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includes_one_time\n    \n as \n    \n    includes_one_time\n    \n, \n    \n    \n    includes_recurring\n    \n as \n    \n    includes_recurring\n    \n, \n    \n    \n    includes_usage\n    \n as \n    \n    includes_usage\n    \n, \n    \n    \n    invoice_date\n    \n as \n    \n    invoice_date\n    \n, \n    \n    \n    invoice_number\n    \n as \n    \n    invoice_number\n    \n, \n    \n    \n    last_email_sent_date\n    \n as \n    \n    last_email_sent_date\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_amount\n    \n as \n    \n    payment_amount\n    \n, \n    \n    \n    payment_term\n    \n as \n    \n    payment_term\n    \n, \n    \n    \n    posted_by\n    \n as \n    \n    posted_by\n    \n, \n    \n    \n    posted_date\n    \n as \n    \n    posted_date\n    \n, \n    \n    \n    refund_amount\n    \n as \n    \n    refund_amount\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    target_date\n    \n as \n    \n    target_date\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_status\n    \n as \n    \n    tax_status\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    transferred_to_accounting\n    \n as \n    \n    transferred_to_accounting\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        account_id,\n        adjustment_amount,\n        amount, \n        amount_home_currency,\n        amount_without_tax, \n        amount_without_tax_home_currency,\n        auto_pay,\n        balance,\n        bill_to_contact_id,\n        comments,\n        created_by_id,\n        created_date,\n        credit_balance_adjustment_amount,\n        credit_memo_amount,\n        default_payment_method_id,\n        due_date,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        includes_one_time,\n        includes_recurring,\n        includes_usage,\n        invoice_date,\n        invoice_number,\n        last_email_sent_date,\n        parent_account_id,\n        payment_amount,\n        payment_term,\n        posted_by,\n        posted_date, \n        refund_amount, \n        sold_to_contact_id,\n        source,\n        source_id,\n        source_type,\n        status,\n        target_date,\n        tax_amount,\n        tax_status, \n        transaction_currency,\n        transferred_to_accounting,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:51.440767Z", "completed_at": "2024-08-05T22:27:51.778044Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:51.798717Z", "completed_at": "2024-08-05T22:27:51.798729Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3971831798553467, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__payment_method", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment_method_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    ach_account_type\n    \n as \n    \n    ach_account_type\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    bank_transfer_account_type\n    \n as \n    \n    bank_transfer_account_type\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_failed_sale_transaction_date\n    \n as \n    \n    last_failed_sale_transaction_date\n    \n, \n    \n    \n    last_transaction_date_time\n    \n as \n    \n    last_transaction_date_time\n    \n, \n    \n    \n    last_transaction_status\n    \n as \n    \n    last_transaction_status\n    \n, \n    \n    \n    max_consecutive_payment_failures\n    \n as \n    \n    max_consecutive_payment_failures\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    num_consecutive_failures\n    \n as \n    \n    num_consecutive_failures\n    \n, \n    \n    \n    payment_method_status\n    \n as \n    \n    payment_method_status\n    \n, \n    \n    \n    paypal_type\n    \n as \n    \n    paypal_type\n    \n, \n    \n    \n    sub_type\n    \n as \n    \n    sub_type\n    \n, \n    \n    \n    total_number_of_error_payments\n    \n as \n    \n    total_number_of_error_payments\n    \n, \n    \n    \n    total_number_of_processed_payments\n    \n as \n    \n    total_number_of_processed_payments\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        account_id,\n        ach_account_type,\n        active,\n        bank_transfer_account_type,\n        created_by_id,\n        created_date,\n        credit_card_type,\n        last_failed_sale_transaction_date,\n        last_transaction_date_time,\n        last_transaction_status,\n        max_consecutive_payment_failures,\n        name,\n        num_consecutive_failures,\n        payment_method_status,\n        paypal_type,\n        sub_type,\n        total_number_of_error_payments,\n        total_number_of_processed_payments,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment_method\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:51.465701Z", "completed_at": "2024-08-05T22:27:51.802961Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:51.803854Z", "completed_at": "2024-08-05T22:27:51.803859Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4011530876159668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__payment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_home_currency\n    \n as \n    \n    amount_home_currency\n    \n, \n    \n    \n    applied_amount\n    \n as \n    \n    applied_amount\n    \n, \n    \n    \n    applied_credit_balance_amount\n    \n as \n    \n    applied_credit_balance_amount\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    cancelled_on\n    \n as \n    \n    cancelled_on\n    \n, \n    \n    \n    comment\n    \n as \n    \n    comment\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    effective_date\n    \n as \n    \n    effective_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_number\n    \n as \n    \n    payment_number\n    \n, \n    \n    \n    refund_amount\n    \n as \n    \n    refund_amount\n    \n, \n    \n    \n    settled_on\n    \n as \n    \n    settled_on\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    submitted_on\n    \n as \n    \n    submitted_on\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    transferred_to_accounting\n    \n as \n    \n    transferred_to_accounting\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unapplied_amount\n    \n as \n    \n    unapplied_amount\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_id,\n        account_id,\n        accounting_code,\n        amount,\n        amount_home_currency,\n        applied_amount,\n        applied_credit_balance_amount,\n        bill_to_contact_id,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        currency,\n        effective_date,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        parent_account_id,\n        payment_method_id,\n        payment_number,\n        refund_amount,\n        settled_on, \n        sold_to_contact_id,\n        status,\n        submitted_on,\n        transaction_currency,\n        transferred_to_accounting,\n        type,\n        unapplied_amount,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:51.486190Z", "completed_at": "2024-08-05T22:27:51.802356Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:51.803471Z", "completed_at": "2024-08-05T22:27:51.803478Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.40108704566955566, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__product_rate_plan", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product_rate_plan_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    effective_end_date\n    \n as \n    \n    effective_end_date\n    \n, \n    \n    \n    effective_start_date\n    \n as \n    \n    effective_start_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_rate_plan_id,\n        created_by_id,\n        created_date,\n        description,\n        effective_end_date,\n        effective_start_date, \n        name,\n        product_id, \n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product_rate_plan\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:51.478874Z", "completed_at": "2024-08-05T22:27:51.803179Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:51.804144Z", "completed_at": "2024-08-05T22:27:51.804147Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4174940586090088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__product_rate_plan_charge", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product_rate_plan_charge_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    apply_discount_to\n    \n as \n    \n    apply_discount_to\n    \n, \n    \n    \n    bill_cycle_day\n    \n as \n    \n    bill_cycle_day\n    \n, \n    \n    \n    bill_cycle_type\n    \n as \n    \n    bill_cycle_type\n    \n, \n    \n    \n    billing_period\n    \n as \n    \n    billing_period\n    \n, \n    \n    \n    charge_model\n    \n as \n    \n    charge_model\n    \n, \n    \n    \n    charge_type\n    \n as \n    \n    charge_type\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_quantity\n    \n as \n    \n    default_quantity\n    \n, \n    \n    \n    deferred_revenue_accounting_code_id\n    \n as \n    \n    deferred_revenue_accounting_code_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_level\n    \n as \n    \n    discount_level\n    \n, \n    \n    \n    end_date_condition\n    \n as \n    \n    end_date_condition\n    \n, \n    \n    \n    exclude_item_billing_from_revenue_accounting\n    \n as \n    \n    exclude_item_billing_from_revenue_accounting\n    \n, \n    \n    \n    exclude_item_booking_from_revenue_accounting\n    \n as \n    \n    exclude_item_booking_from_revenue_accounting\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    included_units\n    \n as \n    \n    included_units\n    \n, \n    \n    \n    is_stacked_discount\n    \n as \n    \n    is_stacked_discount\n    \n, \n    \n    \n    list_price_base\n    \n as \n    \n    list_price_base\n    \n, \n    \n    \n    max_quantity\n    \n as \n    \n    max_quantity\n    \n, \n    \n    \n    min_quantity\n    \n as \n    \n    min_quantity\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    specific_billing_period\n    \n as \n    \n    specific_billing_period\n    \n, \n    \n    \n    tax_mode\n    \n as \n    \n    tax_mode\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    trigger_event\n    \n as \n    \n    trigger_event\n    \n, \n    \n    \n    uom\n    \n as \n    \n    uom\n    \n, \n    \n    \n    up_to_periods\n    \n as \n    \n    up_to_periods\n    \n, \n    \n    \n    up_to_periods_type\n    \n as \n    \n    up_to_periods_type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    use_discount_specific_accounting_code\n    \n as \n    \n    use_discount_specific_accounting_code\n    \n, \n    \n    \n    weekly_bill_cycle_day\n    \n as \n    \n    weekly_bill_cycle_day\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_rate_plan_charge_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        apply_discount_to,\n        bill_cycle_day,\n        bill_cycle_type,\n        billing_period,  \n        charge_model,\n        charge_type,\n        created_by_id,\n        created_date,\n        default_quantity,\n        deferred_revenue_accounting_code_id,\n        description,\n        discount_class_id,\n        discount_level,\n        end_date_condition,\n        exclude_item_billing_from_revenue_accounting,\n        exclude_item_booking_from_revenue_accounting,\n        included_units,\n        is_stacked_discount, \n        list_price_base,\n        max_quantity,\n        min_quantity,\n        name,\n        product_id,\n        product_rate_plan_id, \n        specific_billing_period,\n        tax_mode,\n        taxable,\n        trigger_event,\n        uom,\n        up_to_periods,\n        up_to_periods_type,\n        updated_by_id,\n        updated_date, \n        use_discount_specific_accounting_code,\n        weekly_bill_cycle_day,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product_rate_plan_charge\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:51.856123Z", "completed_at": "2024-08-05T22:27:52.129346Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.129597Z", "completed_at": "2024-08-05T22:27:52.129607Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.31639814376831055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__product", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    effective_end_date\n    \n as \n    \n    effective_end_date\n    \n, \n    \n    \n    effective_start_date\n    \n as \n    \n    effective_start_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_id,\n        category,\n        created_by_id,\n        created_date,\n        description,\n        effective_end_date,\n        effective_start_date,\n        name,\n        sku,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:51.892800Z", "completed_at": "2024-08-05T22:27:52.245837Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.246677Z", "completed_at": "2024-08-05T22:27:52.246694Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3872339725494385, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__refund_invoice_payment", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__refund_invoice_payment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    refund_amount\n    \n as \n    \n    refund_amount\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_invoice_payment_id, \n        created_by_id,\n        created_date,\n        refund_amount,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__refund_invoice_payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:51.886795Z", "completed_at": "2024-08-05T22:27:52.247269Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.247553Z", "completed_at": "2024-08-05T22:27:52.247558Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.4188060760498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__rate_plan_charge", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__rate_plan_charge_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amended_by_order_on\n    \n as \n    \n    amended_by_order_on\n    \n, \n    \n    \n    amendment_id\n    \n as \n    \n    amendment_id\n    \n, \n    \n    \n    apply_discount_to\n    \n as \n    \n    apply_discount_to\n    \n, \n    \n    \n    bill_cycle_day\n    \n as \n    \n    bill_cycle_day\n    \n, \n    \n    \n    bill_cycle_type\n    \n as \n    \n    bill_cycle_type\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    bill_to_contact_snapshot_id\n    \n as \n    \n    bill_to_contact_snapshot_id\n    \n, \n    \n    \n    billing_period\n    \n as \n    \n    billing_period\n    \n, \n    \n    \n    billing_timing\n    \n as \n    \n    billing_timing\n    \n, \n    \n    \n    booking_exchange_rate\n    \n as \n    \n    booking_exchange_rate\n    \n, \n    \n    \n    booking_exchange_rate_date\n    \n as \n    \n    booking_exchange_rate_date\n    \n, \n    \n    \n    charge_model\n    \n as \n    \n    charge_model\n    \n, \n    \n    \n    charge_number\n    \n as \n    \n    charge_number\n    \n, \n    \n    \n    charge_type\n    \n as \n    \n    charge_type\n    \n, \n    \n    \n    charged_through_date\n    \n as \n    \n    charged_through_date\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_option\n    \n as \n    \n    credit_option\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    deferred_revenue_accounting_code_id\n    \n as \n    \n    deferred_revenue_accounting_code_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_level\n    \n as \n    \n    discount_level\n    \n, \n    \n    \n    dmrc\n    \n as \n    \n    dmrc\n    \n, \n    \n    \n    dmrchome_currency\n    \n as \n    \n    dmrchome_currency\n    \n, \n    \n    \n    dtcv\n    \n as \n    \n    dtcv\n    \n, \n    \n    \n    dtcvhome_currency\n    \n as \n    \n    dtcvhome_currency\n    \n, \n    \n    \n    effective_end_date\n    \n as \n    \n    effective_end_date\n    \n, \n    \n    \n    effective_start_date\n    \n as \n    \n    effective_start_date\n    \n, \n    \n    \n    end_date_condition\n    \n as \n    \n    end_date_condition\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_owner_id\n    \n as \n    \n    invoice_owner_id\n    \n, \n    \n    \n    is_prepaid\n    \n as \n    \n    is_prepaid\n    \n, \n    \n    \n    is_processed\n    \n as \n    \n    is_processed\n    \n, \n    \n    \n    mrr\n    \n as \n    \n    mrr\n    \n, \n    \n    \n    mrrhome_currency\n    \n as \n    \n    mrrhome_currency\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    number_of_periods\n    \n as \n    \n    number_of_periods\n    \n, \n    \n    \n    original_id\n    \n as \n    \n    original_id\n    \n, \n    \n    \n    original_order_date\n    \n as \n    \n    original_order_date\n    \n, \n    \n    \n    price_change_option\n    \n as \n    \n    price_change_option\n    \n, \n    \n    \n    price_increase_percentage\n    \n as \n    \n    price_increase_percentage\n    \n, \n    \n    \n    processed_through_date\n    \n as \n    \n    processed_through_date\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_charge_id\n    \n as \n    \n    product_rate_plan_charge_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    rate_plan_id\n    \n as \n    \n    rate_plan_id\n    \n, \n    \n    \n    recognized_revenue_accounting_code_id\n    \n as \n    \n    recognized_revenue_accounting_code_id\n    \n, \n    \n    \n    segment\n    \n as \n    \n    segment\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    specific_billing_period\n    \n as \n    \n    specific_billing_period\n    \n, \n    \n    \n    specific_end_date\n    \n as \n    \n    specific_end_date\n    \n, \n    \n    \n    specific_list_price_base\n    \n as \n    \n    specific_list_price_base\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    tcv\n    \n as \n    \n    tcv\n    \n, \n    \n    \n    tcvhome_currency\n    \n as \n    \n    tcvhome_currency\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    trigger_date\n    \n as \n    \n    trigger_date\n    \n, \n    \n    \n    trigger_event\n    \n as \n    \n    trigger_event\n    \n, \n    \n    \n    uom\n    \n as \n    \n    uom\n    \n, \n    \n    \n    up_to_periods\n    \n as \n    \n    up_to_periods\n    \n, \n    \n    \n    up_to_periods_type\n    \n as \n    \n    up_to_periods_type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    version\n    \n as \n    \n    version\n    \n, \n    \n    \n    weekly_bill_cycle_day\n    \n as \n    \n    weekly_bill_cycle_day\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as rate_plan_charge_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        amended_by_order_on,\n        amendment_id,\n        apply_discount_to,\n        bill_cycle_day,\n        bill_cycle_type,\n        bill_to_contact_id,\n        bill_to_contact_snapshot_id,\n        billing_period,\n        billing_timing,\n        booking_exchange_rate,\n        booking_exchange_rate_date,\n        charge_model,\n        charge_number,\n        charge_type,\n        charged_through_date,\n        created_by_id,\n        created_date,\n        credit_option,\n        default_payment_method_id,\n        deferred_revenue_accounting_code_id,\n        description,\n        discount_level,\n        dmrc,\n        dmrchome_currency,\n        dtcv,\n        dtcvhome_currency,\n        effective_end_date,\n        effective_start_date,\n        end_date_condition,\n        exchange_rate,\n        exchange_rate_date, \n        home_currency,  \n        is_prepaid,\n        is_processed,  \n        mrr,\n        mrrhome_currency,\n        name,\n        number_of_periods,\n        original_id,\n        original_order_date,\n        price_change_option,\n        price_increase_percentage,\n        processed_through_date,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id,\n        quantity,\n        rate_plan_id, \n        recognized_revenue_accounting_code_id,\n        segment,\n        sold_to_contact_id,\n        specific_billing_period,\n        specific_end_date,\n        specific_list_price_base,\n        subscription_id, \n        tcv, \n        tcvhome_currency,\n        transaction_currency,\n        trigger_date,\n        trigger_event,\n        uom,\n        up_to_periods,\n        up_to_periods_type,\n        updated_by_id,\n        updated_date, \n        version,\n        weekly_bill_cycle_day,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__rate_plan_charge\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:51.863108Z", "completed_at": "2024-08-05T22:27:52.246388Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.247031Z", "completed_at": "2024-08-05T22:27:52.247038Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.42864108085632324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__rate_plan", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__rate_plan_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amendment_id\n    \n as \n    \n    amendment_id\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    original_rate_plan_id\n    \n as \n    \n    original_rate_plan_id\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as rate_plan_id,\n        account_id,\n        amendment_id,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        default_payment_method_id,  \n        name,\n        original_rate_plan_id, \n        product_id,\n        product_rate_plan_id,\n        sold_to_contact_id,\n        subscription_id, \n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__rate_plan\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.288977Z", "completed_at": "2024-08-05T22:27:52.297605Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.297884Z", "completed_at": "2024-08-05T22:27:52.297892Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015176773071289062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__account_account_id.fbbdb7cb1f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__account\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.299218Z", "completed_at": "2024-08-05T22:27:52.304054Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.304290Z", "completed_at": "2024-08-05T22:27:52.304297Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005838871002197266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__account_account_id.48b1eab20d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__account\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.305742Z", "completed_at": "2024-08-05T22:27:52.309145Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.309414Z", "completed_at": "2024-08-05T22:27:52.309422Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004458904266357422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__contact_contact_id.825f7a5ab6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__contact\"\nwhere contact_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.311638Z", "completed_at": "2024-08-05T22:27:52.314649Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.314878Z", "completed_at": "2024-08-05T22:27:52.314886Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004827022552490234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__contact_contact_id.55e4bbceda", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    contact_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__contact\"\nwhere contact_id is not null\ngroup by contact_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.316214Z", "completed_at": "2024-08-05T22:27:52.319665Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.319903Z", "completed_at": "2024-08-05T22:27:52.319911Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004264116287231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__amendment_amendment_id.d5dfc9f72e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amendment_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__amendment\"\nwhere amendment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.321094Z", "completed_at": "2024-08-05T22:27:52.325269Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.325554Z", "completed_at": "2024-08-05T22:27:52.325562Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005063772201538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__amendment_amendment_id.1adf35b9b3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    amendment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__amendment\"\nwhere amendment_id is not null\ngroup by amendment_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.326886Z", "completed_at": "2024-08-05T22:27:52.330663Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.330980Z", "completed_at": "2024-08-05T22:27:52.330988Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004670858383178711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.b7d154ddd5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_balance_adjustment_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__credit_balance_adjustment\"\nwhere credit_balance_adjustment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.332377Z", "completed_at": "2024-08-05T22:27:52.335613Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.335846Z", "completed_at": "2024-08-05T22:27:52.335853Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004183053970336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.48dcd90757", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    credit_balance_adjustment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__credit_balance_adjustment\"\nwhere credit_balance_adjustment_id is not null\ngroup by credit_balance_adjustment_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.337032Z", "completed_at": "2024-08-05T22:27:52.341134Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.341359Z", "completed_at": "2024-08-05T22:27:52.341366Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004901885986328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__invoice_item_invoice_item_id.c9ce75552a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_item_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_item\"\nwhere invoice_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.342659Z", "completed_at": "2024-08-05T22:27:52.345430Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.345655Z", "completed_at": "2024-08-05T22:27:52.345664Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003695249557495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__invoice_item_invoice_item_id.c04fd09b46", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_item\"\nwhere invoice_item_id is not null\ngroup by invoice_item_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.347165Z", "completed_at": "2024-08-05T22:27:52.351164Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.351396Z", "completed_at": "2024-08-05T22:27:52.351402Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004986763000488281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__order_order_id.3e57f63e6b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__order\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.352646Z", "completed_at": "2024-08-05T22:27:52.355841Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.356058Z", "completed_at": "2024-08-05T22:27:52.356065Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0039789676666259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__order_order_id.2506b4224d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__order\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.357388Z", "completed_at": "2024-08-05T22:27:52.360137Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.360348Z", "completed_at": "2024-08-05T22:27:52.360353Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0036191940307617188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__invoice_invoice_id.2461bd7df7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.361725Z", "completed_at": "2024-08-05T22:27:52.365838Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.366059Z", "completed_at": "2024-08-05T22:27:52.366065Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0051000118255615234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__invoice_invoice_id.bce76b88e8", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice\"\nwhere invoice_id is not null\ngroup by invoice_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.367354Z", "completed_at": "2024-08-05T22:27:52.370973Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.371215Z", "completed_at": "2024-08-05T22:27:52.371222Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00455021858215332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__payment_method_payment_method_id.757f1baba1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment_method\"\nwhere payment_method_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.372663Z", "completed_at": "2024-08-05T22:27:52.375978Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.376249Z", "completed_at": "2024-08-05T22:27:52.376255Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004394054412841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__payment_method_payment_method_id.f4d0192fe3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    payment_method_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment_method\"\nwhere payment_method_id is not null\ngroup by payment_method_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.377546Z", "completed_at": "2024-08-05T22:27:52.380885Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.381137Z", "completed_at": "2024-08-05T22:27:52.381144Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004236936569213867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__payment_payment_id.21d5bbc205", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment\"\nwhere payment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.382570Z", "completed_at": "2024-08-05T22:27:52.385470Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.385719Z", "completed_at": "2024-08-05T22:27:52.385728Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003973960876464844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__payment_payment_id.104a07cd8c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    payment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment\"\nwhere payment_id is not null\ngroup by payment_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.387075Z", "completed_at": "2024-08-05T22:27:52.390992Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.391225Z", "completed_at": "2024-08-05T22:27:52.391231Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004823923110961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__product_rate_plan_product_rate_plan_id.17b42ef97f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_rate_plan_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product_rate_plan\"\nwhere product_rate_plan_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.392576Z", "completed_at": "2024-08-05T22:27:52.395652Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.395867Z", "completed_at": "2024-08-05T22:27:52.395873Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004000186920166016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__product_rate_plan_product_rate_plan_id.5172fe6de3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_rate_plan_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product_rate_plan\"\nwhere product_rate_plan_id is not null\ngroup by product_rate_plan_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.396949Z", "completed_at": "2024-08-05T22:27:52.399974Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.400193Z", "completed_at": "2024-08-05T22:27:52.400199Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0037288665771484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.ee9a534d30", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_rate_plan_charge_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product_rate_plan_charge\"\nwhere product_rate_plan_charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.401408Z", "completed_at": "2024-08-05T22:27:52.404175Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.404368Z", "completed_at": "2024-08-05T22:27:52.404373Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003560781478881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.3fba29feec", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_rate_plan_charge_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product_rate_plan_charge\"\nwhere product_rate_plan_charge_id is not null\ngroup by product_rate_plan_charge_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.405579Z", "completed_at": "2024-08-05T22:27:52.408884Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.409118Z", "completed_at": "2024-08-05T22:27:52.409126Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.004300117492675781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__product_product_id.08d94a982a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product\"\nwhere product_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.410380Z", "completed_at": "2024-08-05T22:27:52.414077Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.414282Z", "completed_at": "2024-08-05T22:27:52.414288Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0045359134674072266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__product_product_id.aff0a8698c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product\"\nwhere product_id is not null\ngroup by product_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.415522Z", "completed_at": "2024-08-05T22:27:52.418067Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.418273Z", "completed_at": "2024-08-05T22:27:52.418278Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0033888816833496094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.4f37fe0feb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rate_plan_charge_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__rate_plan_charge\"\nwhere rate_plan_charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.419356Z", "completed_at": "2024-08-05T22:27:52.422244Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.422616Z", "completed_at": "2024-08-05T22:27:52.422622Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0037698745727539062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.968ebd8116", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rate_plan_charge_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__rate_plan_charge\"\nwhere rate_plan_charge_id is not null\ngroup by rate_plan_charge_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.423784Z", "completed_at": "2024-08-05T22:27:52.426602Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.426823Z", "completed_at": "2024-08-05T22:27:52.426828Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0035462379455566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__rate_plan_rate_plan_id.0a3262a4ac", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rate_plan_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__rate_plan\"\nwhere rate_plan_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.428132Z", "completed_at": "2024-08-05T22:27:52.431206Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.431443Z", "completed_at": "2024-08-05T22:27:52.431449Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0040130615234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__rate_plan_rate_plan_id.09741de08d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rate_plan_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__rate_plan\"\nwhere rate_plan_id is not null\ngroup by rate_plan_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.157425Z", "completed_at": "2024-08-05T22:27:52.532087Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.532359Z", "completed_at": "2024-08-05T22:27:52.532367Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3995242118835449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__refund", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__refund_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    cancelled_on\n    \n as \n    \n    cancelled_on\n    \n, \n    \n    \n    comment\n    \n as \n    \n    comment\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    method_type\n    \n as \n    \n    method_type\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    refund_date\n    \n as \n    \n    refund_date\n    \n, \n    \n    \n    refund_number\n    \n as \n    \n    refund_number\n    \n, \n    \n    \n    refund_transaction_time\n    \n as \n    \n    refund_transaction_time\n    \n, \n    cast(null as timestamp) as \n    \n    settled_on\n    \n , \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    submitted_on\n    \n as \n    \n    submitted_on\n    \n, \n    \n    \n    transferred_to_accounting\n    \n as \n    \n    transferred_to_accounting\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        accounting_code,\n        amount,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        method_type,\n        payment_method_id,\n        refund_date,\n        refund_number,\n        refund_transaction_time, \n        settled_on, \n        source_type,\n        status,\n        submitted_on,\n        transferred_to_accounting,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__refund\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.557418Z", "completed_at": "2024-08-05T22:27:52.560640Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.560876Z", "completed_at": "2024-08-05T22:27:52.560883Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.003976106643676758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__refund_refund_id.01e977f065", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    refund_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__refund\"\nwhere refund_id is not null\ngroup by refund_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.274808Z", "completed_at": "2024-08-05T22:27:52.611648Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.611866Z", "completed_at": "2024-08-05T22:27:52.611873Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.36496925354003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__taxation_item", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__taxation_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amendment_id\n    \n as \n    \n    amendment_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_amount\n    \n as \n    \n    credit_amount\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    exempt_amount\n    \n as \n    \n    exempt_amount\n    \n, \n    \n    \n    exempt_amount_home_currency\n    \n as \n    \n    exempt_amount_home_currency\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_item_id\n    \n as \n    \n    invoice_item_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    journal_run_id\n    \n as \n    \n    journal_run_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    payment_amount\n    \n as \n    \n    payment_amount\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_charge_id\n    \n as \n    \n    product_rate_plan_charge_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    rate_plan_charge_id\n    \n as \n    \n    rate_plan_charge_id\n    \n, \n    \n    \n    rate_plan_id\n    \n as \n    \n    rate_plan_id\n    \n, \n    \n    \n    sales_tax_payable_accounting_code_id\n    \n as \n    \n    sales_tax_payable_accounting_code_id\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_amount_home_currency\n    \n as \n    \n    tax_amount_home_currency\n    \n, \n    \n    \n    tax_date\n    \n as \n    \n    tax_date\n    \n, \n    \n    \n    tax_description\n    \n as \n    \n    tax_description\n    \n, \n    \n    \n    tax_mode\n    \n as \n    \n    tax_mode\n    \n, \n    \n    \n    tax_rate\n    \n as \n    \n    tax_rate\n    \n, \n    \n    \n    tax_rate_type\n    \n as \n    \n    tax_rate_type\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as taxation_item_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code, \n        amendment_id,\n        balance,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        credit_amount,\n        exchange_rate,\n        exchange_rate_date,\n        exempt_amount, \n        exempt_amount_home_currency, \n        home_currency,\n        invoice_id,\n        invoice_item_id,\n        journal_entry_id,   \n        name,\n        payment_amount,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id, \n        rate_plan_charge_id,\n        rate_plan_id,\n        sales_tax_payable_accounting_code_id, \n        sold_to_contact_id,\n        subscription_id,\n        tax_amount, \n        tax_amount_home_currency,\n        tax_date,\n        tax_description,\n        tax_mode,\n        tax_rate,\n        tax_rate_type, \n        transaction_currency,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__taxation_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.641470Z", "completed_at": "2024-08-05T22:27:52.655368Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.658025Z", "completed_at": "2024-08-05T22:27:52.658040Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017468929290771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.int_zuora__billing_enriched", "compiled": true, "compiled_code": "with invoice_item_enriched as (\n\n    select \n        invoice_id,\n        count(distinct invoice_item_id) as invoice_items,\n        count(distinct product_id) as products,\n        count(distinct subscription_id) as subscriptions,\n        sum(case when cast(processing_type as TEXT) = '1' then charge_amount else 0 end) as discount_charges,\n        sum(case when cast(processing_type as TEXT) = '1' then charge_amount_home_currency else 0 end) as discount_charges_home_currency,\n        sum(quantity) as units,\n        min(charge_date) as first_charge_date,\n        max(charge_date) as most_recent_charge_date,\n        min(service_start_date) as invoice_service_start_date,\n        max(service_end_date) as invoice_service_end_date\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_item\"\n    where is_most_recent_record\n    group by 1\n),\n\ninvoice_payment as (\n\n    select \n        invoice_id,\n        payment_id\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_payment\" \n    where is_most_recent_record\n),\n\npayment as (\n\n    select\n        payment_id,\n        payment_number,\n        effective_date as payment_date,\n        status as payment_status,\n        type as payment_type, \n        amount_home_currency as payment_amount_home_currency,\n        payment_method_id\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment\"\n    where is_most_recent_record\n),\n\npayment_method as (\n    \n    select \n        payment_method_id,\n        type as payment_method_type,\n        coalesce(ach_account_type, bank_transfer_account_type, credit_card_type, paypal_type, sub_type) as payment_method_subtype,\n        active as is_payment_method_active\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment_method\" \n    where is_most_recent_record\n),\n\n\ncredit_balance_adjustment as (\n\n    select \n        invoice_id,\n        credit_balance_adjustment_id,\n        number as credit_balance_adjustment_number,\n        reason_code as credit_balance_adjustment_reason_code,\n        amount_home_currency as credit_balance_adjustment_amount_home_currency,\n        adjustment_date as credit_balance_adjustment_date\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__credit_balance_adjustment\"\n    where is_most_recent_record\n),\n\n\n\ntaxes as (\n\n    select\n        invoice_id, \n        sum(tax_amount_home_currency) as tax_amount_home_currency\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__taxation_item\" \n    where is_most_recent_record\n    group by 1\n),\n\n\nbilling_enriched as (\n\n    select \n        invoice_item_enriched.invoice_id,\n        invoice_item_enriched.invoice_items,\n        invoice_item_enriched.products,\n        invoice_item_enriched.subscriptions,\n        invoice_item_enriched.discount_charges,\n        invoice_item_enriched.discount_charges_home_currency,\n        invoice_item_enriched.units,\n        invoice_item_enriched.first_charge_date,\n        invoice_item_enriched.most_recent_charge_date,\n        invoice_item_enriched.invoice_service_start_date,\n        invoice_item_enriched.invoice_service_end_date,\n\n        \n        taxes.tax_amount_home_currency,\n        \n\n        count(distinct payment.payment_id) as payments, \n        sum(payment_amount_home_currency) as invoice_amount_paid_home_currency,\n        min(payment_date) as first_payment_date,\n        max(payment_date) as most_recent_payment_date, \n        count(distinct payment_method.payment_method_id) as payment_methods\n\n        \n        , count(distinct credit_balance_adjustment_id) as credit_balance_adjustments\n        , sum(credit_balance_adjustment_amount_home_currency) as credit_balance_adjustment_amount_home_currency\n        , min(credit_balance_adjustment_date) as first_credit_balance_adjustment_date\n        , max(credit_balance_adjustment_date) as most_recent_credit_balance_adjustment_date\n        \n\n    from invoice_item_enriched\n    left join invoice_payment \n        on invoice_item_enriched.invoice_id = invoice_payment.invoice_id\n    left join payment\n        on invoice_payment.payment_id = payment.payment_id\n    left join payment_method\n        on payment.payment_method_id = payment_method.payment_method_id\n    \n    \n    left join credit_balance_adjustment\n        on invoice_item_enriched.invoice_id = credit_balance_adjustment.invoice_id \n    \n\n    \n    left join taxes\n        on invoice_item_enriched.invoice_id = taxes.invoice_id\n    \n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12 \n)\n\nselect * \nfrom billing_enriched", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__billing_enriched\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.652354Z", "completed_at": "2024-08-05T22:27:52.658848Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.659388Z", "completed_at": "2024-08-05T22:27:52.659393Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008673906326293945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__taxation_item_taxation_item_id.8f5f59eabf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect taxation_item_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__taxation_item\"\nwhere taxation_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.655601Z", "completed_at": "2024-08-05T22:27:52.659796Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.660427Z", "completed_at": "2024-08-05T22:27:52.660432Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009266853332519531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__taxation_item_taxation_item_id.2762673f7d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    taxation_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__taxation_item\"\nwhere taxation_item_id is not null\ngroup by taxation_item_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.661205Z", "completed_at": "2024-08-05T22:27:52.668947Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.669169Z", "completed_at": "2024-08-05T22:27:52.669177Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009177207946777344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.zuora__billing_history", "compiled": true, "compiled_code": "with invoice as (\n\n    select\n        invoice_id,\n        account_id,\n        created_date as created_at,\n        invoice_number,\n        invoice_date,\n        amount as invoice_amount,\n        amount_home_currency as invoice_amount_home_currency,\n        payment_amount as invoice_amount_paid,\n        amount - payment_amount as invoice_amount_unpaid, \n        tax_amount,\n        refund_amount,\n\n        \n        credit_balance_adjustment_amount,\n        \n\n        transaction_currency,\n        home_currency,\n        exchange_rate_date,\n        due_date,\n        status,\n        source_type as purchase_type,\n        sum(case when cast(date_trunc('day', \n    current_timestamp::timestamp\n) as date) > due_date\n                and amount != payment_amount\n                then balance else 0 end) as total_amount_past_due\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice\" \n    where is_most_recent_record    \n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\n),\n\nbilling_enriched as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__billing_enriched\" \n), \n\nbilling_history as (\n\n    select \n        invoice.invoice_id,\n        invoice.account_id,\n        invoice.created_at,\n        invoice.invoice_number,\n        invoice.invoice_date,\n        invoice.invoice_amount,\n        invoice.invoice_amount_home_currency,\n        invoice.invoice_amount_paid,\n        invoice.invoice_amount_unpaid,\n        invoice.tax_amount,\n        invoice.refund_amount,\n\n        \n        invoice.credit_balance_adjustment_amount,\n        \n        \n        \n        billing_enriched.tax_amount_home_currency,\n        \n\n        invoice.transaction_currency,\n        invoice.home_currency,\n        invoice.exchange_rate_date,\n        invoice.due_date,\n        invoice.status,\n        invoice.purchase_type,\n        billing_enriched.invoice_items,\n        billing_enriched.products,\n        billing_enriched.subscriptions,\n        billing_enriched.discount_charges,\n        billing_enriched.discount_charges_home_currency,\n        billing_enriched.units,\n        billing_enriched.first_charge_date,\n        billing_enriched.most_recent_charge_date,\n        billing_enriched.invoice_service_start_date,\n        billing_enriched.invoice_service_end_date,        \n        billing_enriched.payments, \n        billing_enriched.invoice_amount_paid_home_currency,\n        invoice.invoice_amount_home_currency - billing_enriched.invoice_amount_paid_home_currency as invoice_amount_unpaid_home_currency, \n        billing_enriched.first_payment_date,\n        billing_enriched.most_recent_payment_date, \n        billing_enriched.payment_methods\n\n        \n        , billing_enriched.credit_balance_adjustments\n        , billing_enriched.credit_balance_adjustment_amount_home_currency\n        , billing_enriched.first_credit_balance_adjustment_date\n        , billing_enriched.most_recent_credit_balance_adjustment_date\n        \n\n    from invoice\n    left join billing_enriched on \n        invoice.invoice_id = billing_enriched.invoice_id\n)\n\nselect * \nfrom billing_history", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__billing_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.283731Z", "completed_at": "2024-08-05T22:27:52.639703Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.639921Z", "completed_at": "2024-08-05T22:27:52.639927Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.3886411190032959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora_source.stg_zuora__subscription", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__subscription_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    auto_renew\n    \n as \n    \n    auto_renew\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    cancel_reason\n    \n as \n    \n    cancel_reason\n    \n, \n    \n    \n    cancelled_date\n    \n as \n    \n    cancelled_date\n    \n, \n    \n    \n    contract_acceptance_date\n    \n as \n    \n    contract_acceptance_date\n    \n, \n    \n    \n    contract_effective_date\n    \n as \n    \n    contract_effective_date\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    current_term\n    \n as \n    \n    current_term\n    \n, \n    \n    \n    current_term_period_type\n    \n as \n    \n    current_term_period_type\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    externally_managed_by\n    \n as \n    \n    externally_managed_by\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    initial_term\n    \n as \n    \n    initial_term\n    \n, \n    \n    \n    initial_term_period_type\n    \n as \n    \n    initial_term_period_type\n    \n, \n    \n    \n    invoice_owner_id\n    \n as \n    \n    invoice_owner_id\n    \n, \n    \n    \n    is_invoice_separate\n    \n as \n    \n    is_invoice_separate\n    \n, \n    \n    \n    is_latest_version\n    \n as \n    \n    is_latest_version\n    \n, \n    \n    \n    last_booking_date\n    \n as \n    \n    last_booking_date\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    original_created_date\n    \n as \n    \n    original_created_date\n    \n, \n    \n    \n    original_id\n    \n as \n    \n    original_id\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_term\n    \n as \n    \n    payment_term\n    \n, \n    \n    \n    previous_subscription_id\n    \n as \n    \n    previous_subscription_id\n    \n, \n    \n    \n    renewal_term\n    \n as \n    \n    renewal_term\n    \n, \n    \n    \n    renewal_term_period_type\n    \n as \n    \n    renewal_term_period_type\n    \n, \n    \n    \n    revision\n    \n as \n    \n    revision\n    \n, \n    \n    \n    service_activation_date\n    \n as \n    \n    service_activation_date\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subscription_end_date\n    \n as \n    \n    subscription_end_date\n    \n, \n    \n    \n    subscription_start_date\n    \n as \n    \n    subscription_start_date\n    \n, \n    \n    \n    term_end_date\n    \n as \n    \n    term_end_date\n    \n, \n    \n    \n    term_start_date\n    \n as \n    \n    term_start_date\n    \n, \n    \n    \n    term_type\n    \n as \n    \n    term_type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    version\n    \n as \n    \n    version\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as subscription_id,\n        account_id,\n        auto_renew,\n        bill_to_contact_id,\n        cancel_reason,\n        cancelled_date,\n        contract_acceptance_date,\n        contract_effective_date,\n        created_by_id,\n        created_date,\n        current_term,\n        current_term_period_type, \n        default_payment_method_id,\n        externally_managed_by,\n        initial_term,\n        initial_term_period_type,\n        invoice_owner_id,\n        is_invoice_separate,\n        is_latest_version,\n        last_booking_date,\n        name,\n        notes,\n        original_created_date,\n        original_id,\n        parent_account_id,\n        payment_term,\n        previous_subscription_id,\n        renewal_term,\n        renewal_term_period_type,\n        revision,\n        service_activation_date,\n        sold_to_contact_id,\n        status,\n        subscription_end_date,\n        subscription_start_date,\n        term_end_date,\n        term_start_date,\n        term_type, \n        updated_by_id,\n        updated_date,\n        version,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__subscription\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.680610Z", "completed_at": "2024-08-05T22:27:52.691380Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.691944Z", "completed_at": "2024-08-05T22:27:52.691952Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020652055740356445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.int_zuora__transactions_grouped", "compiled": true, "compiled_code": "\n\n\n\n\nwith invoice_joined as (\n\n    select *\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__billing_history\"\n),\n\ntransactions_grouped as (\n\n    select \n        account_id, \n        invoice_date as date_day,             \n        cast(date_trunc('week', invoice_date) as date) as date_week, \n        cast(date_trunc('month', invoice_date) as date) as date_month, \n        cast(date_trunc('year', invoice_date) as date) as date_year, \n        count(distinct invoice_id) as daily_invoices,\n        sum(invoice_items) as daily_invoice_items,\n\n        \n         \n            sum(invoice_amount_home_currency) as daily_invoice_amount,\n        \n        \n         \n            sum(invoice_amount_paid_home_currency) as daily_invoice_amount_paid,\n        \n        \n         \n            sum(invoice_amount_unpaid_home_currency) as daily_invoice_amount_unpaid,\n        \n        \n         \n            sum(discount_charges_home_currency) as daily_discount_charges,\n        \n        \n         \n            sum(tax_amount_home_currency) as daily_tax_amount,\n        \n        \n         \n            sum(credit_balance_adjustment_amount_home_currency) as daily_credit_balance_adjustment_amount,\n        \n        \n\n        sum(refund_amount) as daily_refunds \n\n    from invoice_joined\n    group by 1,2,3,4,5\n)\n\nselect *\nfrom transactions_grouped", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__transactions_grouped\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.685215Z", "completed_at": "2024-08-05T22:27:52.691590Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.692366Z", "completed_at": "2024-08-05T22:27:52.692371Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020817995071411133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora.not_null_zuora__billing_history_invoice_id.46e1219d2e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__billing_history\"\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.688793Z", "completed_at": "2024-08-05T22:27:52.693228Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.694116Z", "completed_at": "2024-08-05T22:27:52.694123Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013899803161621094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora.unique_zuora__billing_history_invoice_id.9daecb68de", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__billing_history\"\nwhere invoice_id is not null\ngroup by invoice_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.695420Z", "completed_at": "2024-08-05T22:27:52.715196Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.715471Z", "completed_at": "2024-08-05T22:27:52.715479Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02175426483154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.zuora__line_item_enhanced", "compiled": true, "compiled_code": "with line_items as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_item\"\n    where is_most_recent_record \n\n), accounts as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__account\"\n    where is_most_recent_record \n\n), contacts as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__contact\"\n    where is_most_recent_record \n\n), invoices as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice\"\n    where is_most_recent_record \n\n), invoice_payments as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_payment\"\n    where is_most_recent_record \n\n), payments as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment\"\n    where is_most_recent_record\n\n), payment_methods as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment_method\"\n    where is_most_recent_record\n\n), products as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product\"\n    where is_most_recent_record\n\n), subscriptions as (\n\n    select *\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__subscription\" \n    where is_most_recent_record\n\n), rate_plan as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__rate_plan\"\n    where is_most_recent_record \n\n), enhanced as (\nselect\n    line_items.invoice_id as header_id,\n    line_items.invoice_item_id as line_item_id,\n    row_number() over (partition by line_items.invoice_id\n        order by line_items.invoice_item_id) as line_item_index,\n    line_items.created_date as line_item_created_at,\n    invoices.created_date as invoice_created_at,\n    invoices.status as header_status,\n    invoices.source_type as billing_type,\n    line_items.transaction_currency as currency,\n    line_items.product_id,\n    products.name as product_name,\n    products.category as product_type,\n    case \n        when cast(line_items.processing_type as TEXT) = '0' then 'charge'\n        when cast(line_items.processing_type as TEXT) = '1' then 'discount'\n        when cast(line_items.processing_type as TEXT) = '2' then 'prepayment'\n        when cast(line_items.processing_type as TEXT) = '3' then 'tax'\n        end as transaction_type,\n    line_items.quantity,\n    line_items.unit_price as unit_amount,\n    case when cast(line_items.processing_type as TEXT) = '1' \n        then line_items.charge_amount else 0 end as discount_amount,\n    line_items.tax_amount,\n    line_items.charge_amount as total_amount,\n    invoice_payments.payment_id as payment_id,\n    invoice_payments.payment_method_id,\n    payment_methods.name as payment_method,\n    payments.effective_date as payment_at,\n    invoices.refund_amount,\n    line_items.subscription_id,\n    rate_plan.name as subscription_plan,\n    subscriptions.subscription_start_date as subscription_period_started_at,\n    subscriptions.subscription_end_date as subscription_period_ended_at,\n    subscriptions.status as subscription_status,\n    line_items.account_id as customer_id,\n    'customer' as customer_level,\n    accounts.created_date as customer_created_at,\n    accounts.name as customer_company,\n    contacts.first_name || ' ' || contacts.last_name as customer_name,\n    contacts.work_email as customer_email,\n    contacts.city as customer_city,\n    contacts.country as customer_country\n\nfrom line_items\n\nleft join invoices\n    on invoices.invoice_id = line_items.invoice_id\n\nleft join invoice_payments\n    on invoice_payments.invoice_id = invoices.invoice_id\n\nleft join payments\n    on payments.payment_id = invoice_payments.payment_id\n\nleft join payment_methods\n    on payment_methods.payment_method_id = payments.payment_method_id\n\nleft join accounts\n    on accounts.account_id = line_items.account_id\n\nleft join contacts\n    on contacts.contact_id = line_items.bill_to_contact_id\n\nleft join products\n    on products.product_id = line_items.product_id\n\nleft join subscriptions\n    on subscriptions.subscription_id = line_items.subscription_id\n\nleft join rate_plan\n    on rate_plan.subscription_id = subscriptions.subscription_id\n\n\n), final as (\n\n    select \n        header_id,\n        line_item_id,\n        line_item_index,\n        'line_item' as record_type,\n        line_item_created_at as created_at,\n        currency,\n        header_status,\n        product_id,\n        product_name,\n        transaction_type,\n        billing_type,\n        product_type,\n        quantity,\n        unit_amount,\n        discount_amount,\n        tax_amount,\n        total_amount,\n        payment_id,\n        payment_method_id,\n        payment_method,\n        payment_at,\n        cast(null as float) as fee_amount,\n        cast(null as float) as refund_amount,\n        subscription_id,\n        subscription_plan,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country\n    from enhanced\n\n    union all\n\n    -- Refund information is only reliable at the invoice header. Therefore the below operation creates a new line to track the refund values.\n    select\n        header_id,\n        cast(null as TEXT) as line_item_id,\n        cast(0 as integer) as line_item_index,\n        'header' as record_type,\n        invoice_created_at as created_at,\n        currency,\n        header_status,\n        cast(null as TEXT) as product_id,\n        cast(null as TEXT) as product_name,\n        cast(null as TEXT) as transaction_type,\n        billing_type,\n        cast(null as TEXT) as product_type,\n        cast(null as float) as quantity,\n        cast(null as float) as unit_amount,\n        cast(null as float) as discount_amount,\n        cast(null as float) as tax_amount,\n        cast(null as float) as total_amount,\n        payment_id,\n        payment_method_id,\n        payment_method,\n        payment_at,\n        cast(null as float) as fee_amount,\n        refund_amount,\n        cast(null as TEXT) as subscription_id,\n        cast(null as TEXT) as subscription_plan,\n        cast(null as timestamp) as subscription_period_started_at,\n        cast(null as timestamp) as subscription_period_ended_at,\n        cast(null as TEXT) as subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country\n    from enhanced\n    where line_item_index = 1\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__line_item_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.712068Z", "completed_at": "2024-08-05T22:27:52.715888Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.716503Z", "completed_at": "2024-08-05T22:27:52.716506Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00818490982055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.unique_stg_zuora__subscription_subscription_id.219bd2fe86", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__subscription\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.708708Z", "completed_at": "2024-08-05T22:27:52.716082Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.716928Z", "completed_at": "2024-08-05T22:27:52.716931Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022507905960083008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora_source.not_null_stg_zuora__subscription_subscription_id.be7f23f7d2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__subscription\"\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.736985Z", "completed_at": "2024-08-05T22:27:52.743360Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.743600Z", "completed_at": "2024-08-05T22:27:52.743607Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.025490760803222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora.dbt_utils_unique_combination_of_columns_zuora__line_item_enhanced_header_id__line_item_id.8348c40ed1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        header_id, line_item_id\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__line_item_enhanced\"\n    group by header_id, line_item_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.718544Z", "completed_at": "2024-08-05T22:27:52.744063Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.744267Z", "completed_at": "2024-08-05T22:27:52.744270Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.027059078216552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.int_zuora__account_enriched", "compiled": true, "compiled_code": "with account as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__account\" \n    where is_most_recent_record \n),\n\nbilling_history as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__billing_history\"\n), \n\nsubscription as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__subscription\" \n    where is_most_recent_record\n), \n\ninvoice_item as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_item\"\n    where is_most_recent_record\n),\n\naccount_payment_data as (\n\n    select \n        account_id,\n        sum(amount) as account_amount_paid\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__payment\" \n    where is_most_recent_record\n        and account_id is not null\n    group by 1\n),\n\naccount_details as (\n\n    select \n        account_id,\n        created_date,\n        name,\n        account_number,\n        credit_balance, \n        mrr,\n        status,\n        auto_pay, \n        \n    ( \n        ((\n    current_timestamp::timestamp\n)::date - (account.created_date)::date)\n     ) / nullif( ( 30 ), 0)\n as account_active_months,\n        case when \n        ((\n    current_timestamp::timestamp\n)::date - (account.created_date)::date)\n     <= 30\n            then true else false end as is_new_customer\n    \n        \n\n\n\n\n\n    from account\n\n),\n\naccount_totals as (\n\n    select \n        account_id,\n        max(most_recent_payment_date) as most_recent_payment_date,\n\n        \n        max(most_recent_credit_balance_adjustment_date) as most_recent_credit_balance_adjustment_date,\n        \n\n        sum(case when cast(date_trunc('day', \n    current_timestamp::timestamp\n) as date) > due_date\n                and invoice_amount != invoice_amount_paid \n                then invoice_amount_unpaid else 0 end) as total_amount_past_due\n        \n        \n        \n        , sum(refund_amount) as total_refund_amount \n        \n        , sum(discount_charges) as total_discount_charges \n        \n        , sum(tax_amount) as total_tax_amount \n        \n        , sum(invoice_amount) as total_invoice_amount \n        \n        , sum(invoice_amount_home_currency) as total_invoice_amount_home_currency \n        \n        , sum(invoice_amount_paid) as total_invoice_amount_paid \n        \n        , sum(invoice_amount_unpaid) as total_invoice_amount_unpaid \n        \n\n    from billing_history\n    group by 1\n),\n\naccount_invoice_data as (\n\n    select \n        account_id,\n        min(charge_date) as first_charge_date,\n        max(charge_date) as most_recent_charge_date,\n        count(distinct invoice_item_id) as invoice_item_count,\n        count(distinct invoice_id) as invoice_count\n    from invoice_item\n    group by 1\n),\n\naccount_subscription_data as (\n\n    select \n        account_id,\n        count(distinct subscription_id) as subscription_count,\n        sum(case when lower(status) = 'active' then 1 else 0 end) as active_subscription_count\n    from subscription\n    group by 1\n),\n\naccount_cumulatives as (\n    \n    select \n        account_totals.account_id,\n        account_details.created_date,\n        account_details.name,\n        account_details.account_number,\n        account_details.credit_balance, \n        account_details.mrr,\n        account_details.status,\n        account_details.auto_pay,\n        account_details.account_active_months,\n        account_details.is_new_customer\n\n        \n\n\n\n,\n\n        account_totals.total_tax_amount as total_taxes,\n        account_totals.total_refund_amount as total_refunds,\n        account_totals.total_discount_charges as total_discounts,\n        account_totals.total_invoice_amount,\n        account_totals.total_invoice_amount_home_currency,\n        account_totals.total_invoice_amount_paid as total_amount_paid,\n        account_totals.total_invoice_amount_unpaid as total_amount_not_paid,\n        account_totals.total_amount_past_due,\n        account_totals.most_recent_payment_date,\n\n        \n        account_totals.most_recent_credit_balance_adjustment_date, \n        \n        \n        account_invoice_data.first_charge_date,\n        account_invoice_data.most_recent_charge_date,\n        account_invoice_data.invoice_item_count,\n        account_invoice_data.invoice_count,\n        round(cast(\n    ( account_totals.total_invoice_amount ) / nullif( ( account_invoice_data.invoice_count ), 0)\n as numeric(28,6)), 2) as total_average_invoice_value,\n        round(cast(\n    ( account_invoice_data.invoice_item_count ) / nullif( ( account_invoice_data.invoice_count ), 0)\n as numeric(28,6)), 2) as total_units_per_invoice,\n        account_subscription_data.subscription_count as total_subscription_count,\n        account_subscription_data.active_subscription_count,\n        case when account_subscription_data.active_subscription_count = 0 then false else true end as is_currently_subscribed,\n        account_payment_data.account_amount_paid\n    from account_details\n        left join account_totals\n            on account_details.account_id = account_totals.account_id\n        left join account_invoice_data\n            on account_totals.account_id = account_invoice_data.account_id\n        left join account_subscription_data\n            on account_totals.account_id = account_subscription_data.account_id\n        left join account_payment_data\n            on account_totals.account_id = account_payment_data.account_id\n)\n\nselect * \nfrom account_cumulatives", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__account_enriched\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.745598Z", "completed_at": "2024-08-05T22:27:52.752596Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.752820Z", "completed_at": "2024-08-05T22:27:52.752826Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007760763168334961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.zuora__account_overview", "compiled": true, "compiled_code": "with account_enriched as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__account_enriched\" \n),\n\ncontact as (\n\n    select *\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__contact\" \n    where is_most_recent_record\n    and is_most_recent_account_contact \n),\n\naccount_overview as (\n    \n    select \n        account_enriched.account_id, \n        account_enriched.created_date as account_created_at,\n        account_enriched.name as account_name,\n        account_enriched.account_number,\n        account_enriched.credit_balance as account_credit_balance,\n        account_enriched.mrr as account_zuora_calculated_mrr,\n        account_enriched.status as account_status,\n        account_enriched.auto_pay as is_auto_pay,\n        contact.country as account_country,\n        contact.city as account_city,\n        contact.work_email as account_email,\n        contact.first_name as account_first_name, \n        contact.last_name as account_last_name,\n        contact.postal_code as account_postal_code,\n        contact.state as account_state,\n        account_enriched.account_active_months,\n        account_enriched.first_charge_date as first_charge_processed_at,\n        account_enriched.is_currently_subscribed,\n        account_enriched.is_new_customer,\n        account_enriched.invoice_item_count,\n        account_enriched.invoice_count,\n    \n        \n        \n            round(cast(active_subscription_count as numeric(28,6)), 2) as active_subscription_count,   \n        \n            round(cast(total_subscription_count as numeric(28,6)), 2) as total_subscription_count,   \n        \n            round(cast(total_invoice_amount as numeric(28,6)), 2) as total_invoice_amount,   \n        \n            round(cast(total_invoice_amount_home_currency as numeric(28,6)), 2) as total_invoice_amount_home_currency,   \n        \n            round(cast(total_taxes as numeric(28,6)), 2) as total_taxes,   \n        \n            round(cast(total_discounts as numeric(28,6)), 2) as total_discounts,   \n        \n            round(cast(total_amount_paid as numeric(28,6)), 2) as total_amount_paid,   \n        \n            round(cast(total_amount_not_paid as numeric(28,6)), 2) as total_amount_not_paid,   \n        \n            round(cast(total_amount_past_due as numeric(28,6)), 2) as total_amount_past_due,   \n        \n            round(cast(total_refunds as numeric(28,6)), 2) as total_refunds,   \n        \n\n        account_enriched.total_average_invoice_value,\n        account_enriched.total_units_per_invoice,\n\n        \n        \n            round(cast(\n    ( total_subscription_count ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_subscription_count\n            ,\n            round(cast(\n    ( total_invoice_amount ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_invoice_amount\n            ,\n            round(cast(\n    ( total_invoice_amount_home_currency ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_invoice_amount_home_currency\n            ,\n            round(cast(\n    ( total_taxes ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_taxes\n            ,\n            round(cast(\n    ( total_discounts ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_discounts\n            ,\n            round(cast(\n    ( total_amount_paid ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_amount_paid\n            ,\n            round(cast(\n    ( total_amount_not_paid ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_amount_not_paid\n            ,\n            round(cast(\n    ( total_amount_past_due ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_amount_past_due\n            ,\n            round(cast(\n    ( total_refunds ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_refunds\n            \n\n        \n\n\n\n\n\n    from account_enriched\n    left join contact \n        on account_enriched.account_id = contact.account_id\n)\n\nselect * \nfrom account_overview", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__account_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.755044Z", "completed_at": "2024-08-05T22:27:52.770230Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.770573Z", "completed_at": "2024-08-05T22:27:52.770580Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016655683517456055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.zuora__subscription_overview", "compiled": true, "compiled_code": "with subscription as (\n\n    select *\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__subscription\"  \n    where is_most_recent_record\n),\n\nrate_plan_charge as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__rate_plan_charge\"\n    where is_most_recent_record\n),\n\namendment as (\n\n    select *\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__amendment\"\n    where is_most_recent_record\n),\n\n\naccount_overview as (\n\n    select \n        account_id,\n        account_name\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__account_overview\" \n),\n\nsubscription_overview as (\n\n    select  \n        md5(cast(coalesce(cast(subscription.subscription_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(rate_plan_charge.rate_plan_charge_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(amendment.amendment_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as subscription_key,\n        subscription.subscription_id,\n        subscription.account_id,\n        account_overview.account_name,\n        subscription.auto_renew,\n        subscription.cancel_reason,\n        subscription.cancelled_date,\n        subscription.current_term, \n        subscription.current_term_period_type, \n        subscription.initial_term,\n        subscription.initial_term_period_type, \n        subscription.is_latest_version,\n        subscription.previous_subscription_id,\n        subscription.renewal_term,\n        subscription.renewal_term_period_type,\n        subscription.service_activation_date,\n        subscription.status,\n        subscription.subscription_start_date,\n        subscription.subscription_end_date,\n        subscription.term_start_date,\n        subscription.term_end_date,\n        subscription.term_type,\n        subscription.version,\n        rate_plan_charge.rate_plan_charge_id, \n        rate_plan_charge.name as rate_plan_charge_name,\n        rate_plan_charge.billing_period as charge_billing_period,\n        rate_plan_charge.billing_timing as charge_billing_timing,\n        rate_plan_charge.charge_model,\n        rate_plan_charge.charge_type,\n        rate_plan_charge.charged_through_date,\n        rate_plan_charge.effective_start_date as charge_effective_start_date,\n        rate_plan_charge.effective_end_date as charge_effective_end_date,\n        rate_plan_charge.mrr as charge_mrr,\n        rate_plan_charge.mrrhome_currency as charge_mrr_home_currency,\n        amendment.amendment_id,\n        amendment.name as amendment_name,\n        amendment.booking_date as amendment_booking_date,\n        amendment.created_date as amendment_creation_date,\n        amendment.type as amendment_type,\n        amendment.status as amendment_status,\n        amendment.contract_effective_date as amendment_contract_date,\n        amendment.service_activation_date as amendment_activation_date,\n\n        \n        \n        case when subscription.current_term_period_type = 'Week' then 7 * subscription.current_term\n            when subscription.current_term_period_type = 'Month' then 30 * subscription.current_term\n            when subscription.current_term_period_type = 'Year' then 365 * subscription.current_term\n            else subscription.current_term \n            end as current_term_days,\n        \n        case when subscription.initial_term_period_type = 'Week' then 7 * subscription.initial_term\n            when subscription.initial_term_period_type = 'Month' then 30 * subscription.initial_term\n            when subscription.initial_term_period_type = 'Year' then 365 * subscription.initial_term\n            else subscription.initial_term \n            end as initial_term_days,\n        \n        case when subscription.renewal_term_period_type = 'Week' then 7 * subscription.renewal_term\n            when subscription.renewal_term_period_type = 'Month' then 30 * subscription.renewal_term\n            when subscription.renewal_term_period_type = 'Year' then 365 * subscription.renewal_term\n            else subscription.renewal_term \n            end as renewal_term_days,\n        \n\n        \n        \n        case when subscription.term_type = 'TERMED'\n            then \n        ((subscription.subscription_end_date)::date - (subscription.subscription_start_date)::date)\n     \n            when subscription.term_type = 'EVERGREEN' and subscription.cancelled_date is not null\n            then \n        ((subscription.cancelled_date)::date - (subscription.subscription_start_date)::date)\n    \n            else \n        ((\n    current_timestamp::timestamp\n)::date - (subscription.subscription_start_date)::date)\n    \n            end as subscription_days\n        ,\n        case when subscription.term_type = 'TERMED'\n            then \n        ((subscription.term_end_date)::date - (subscription.term_start_date)::date)\n     \n            when subscription.term_type = 'EVERGREEN' and subscription.cancelled_date is not null\n            then \n        ((subscription.cancelled_date)::date - (subscription.term_start_date)::date)\n    \n            else \n        ((\n    current_timestamp::timestamp\n)::date - (subscription.term_start_date)::date)\n    \n            end as term_days\n        \n\n        \n\n\n\n\n\n        \n\n\n\n\n\n    from subscription\n    left join rate_plan_charge\n        on subscription.subscription_id = rate_plan_charge.subscription_id\n    left join amendment\n        on subscription.subscription_id = amendment.subscription_id\n    left join account_overview \n        on subscription.account_id = account_overview.account_id\n)\n\nselect * \nfrom subscription_overview", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__subscription_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.766156Z", "completed_at": "2024-08-05T22:27:52.771062Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.771271Z", "completed_at": "2024-08-05T22:27:52.771274Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016983985900878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora.unique_zuora__account_overview_account_id.abf0280fca", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__account_overview\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.775952Z", "completed_at": "2024-08-05T22:27:52.778775Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.779115Z", "completed_at": "2024-08-05T22:27:52.779126Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006812095642089844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora.unique_zuora__subscription_overview_subscription_key.75505ca1b9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__subscription_overview\"\nwhere subscription_key is not null\ngroup by subscription_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.773220Z", "completed_at": "2024-08-05T22:27:52.779641Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:52.779858Z", "completed_at": "2024-08-05T22:27:52.779862Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007771015167236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora.not_null_zuora__subscription_overview_subscription_key.cf236f775f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_key\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__subscription_overview\"\nwhere subscription_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:52.672841Z", "completed_at": "2024-08-05T22:27:53.037697Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:53.037921Z", "completed_at": "2024-08-05T22:27:53.037928Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3937969207763672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.int_zuora__transaction_date_spine", "compiled": true, "compiled_code": "with spine as (\n\n    \n    \n        \n\n        \n        \n    \n\n    \n    \n\n    \n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 334\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2015-02-15'as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2016-01-15'as date)\n\n)\n\nselect * from filtered\n\n\n),\n\naccount_first_invoice as (\n\n    select \n        account_id,\n        min(invoice_date) as first_invoice_date\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__billing_history\"\n    group by 1\n),\n\ndate_spine as (\n\n    select\n        cast(date_trunc('day', date_day) as date) as date_day, \n        cast(date_trunc('week', date_day) as date) as date_week, \n        cast(date_trunc('month', date_day) as date) as date_month,\n        cast(date_trunc('year', date_day) as date) as date_year,  \n        row_number() over (order by cast(date_trunc('day', date_day) as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select \n        distinct account_first_invoice.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account_first_invoice\n    cross join date_spine\n    where cast(date_trunc('day', account_first_invoice.first_invoice_date) as date) <= date_spine.date_day\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__transaction_date_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:53.065950Z", "completed_at": "2024-08-05T22:27:53.070202Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:53.070444Z", "completed_at": "2024-08-05T22:27:53.070450Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005034923553466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.int_zuora__account_rolling_totals", "compiled": true, "compiled_code": "\n\n\n\nwith transaction_date_spine as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__transaction_date_spine\"\n),\n\ntransactions_grouped as (\n\n    select *\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__transactions_grouped\"\n), \n\naccount_rolling as (\n    \n    select \n        *,\n        \n            sum(daily_invoices) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_invoices,\n            sum(daily_invoice_items) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_invoice_items,\n            sum(daily_invoice_amount) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_invoice_amount,\n            sum(daily_invoice_amount_paid) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_invoice_amount_paid,\n            sum(daily_invoice_amount_unpaid) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_invoice_amount_unpaid,\n            sum(daily_discount_charges) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_discount_charges,\n            sum(daily_refunds) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_refunds,\n            sum(daily_tax_amount) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_tax_amount,\n            sum(daily_credit_balance_adjustment_amount) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_credit_balance_adjustment_amount  \n    from transactions_grouped\n),\n\naccount_rolling_totals as (\n\n    select \n        coalesce(account_rolling.account_id, transaction_date_spine.account_id) as account_id,\n        coalesce(account_rolling.date_day, transaction_date_spine.date_day) as date_day,\n        coalesce(account_rolling.date_week, transaction_date_spine.date_week) as date_week,\n        coalesce(account_rolling.date_month, transaction_date_spine.date_month) as date_month,\n        coalesce(account_rolling.date_year, transaction_date_spine.date_year) as date_year,\n        account_rolling.daily_invoices,\n        account_rolling.daily_invoice_items,\n        account_rolling.daily_invoice_amount,\n        account_rolling.daily_invoice_amount_paid,\n        account_rolling.daily_invoice_amount_unpaid,\n\n        \n        account_rolling.daily_tax_amount,\n        \n\n        \n        account_rolling.daily_credit_balance_adjustment_amount,\n        \n\n        account_rolling.daily_discount_charges,\n        account_rolling.daily_refunds,\n        \n        case when account_rolling.rolling_invoices is null and date_index = 1\n            then 0\n            else account_rolling.rolling_invoices\n            end as rolling_invoices,\n        \n        case when account_rolling.rolling_invoice_items is null and date_index = 1\n            then 0\n            else account_rolling.rolling_invoice_items\n            end as rolling_invoice_items,\n        \n        case when account_rolling.rolling_invoice_amount is null and date_index = 1\n            then 0\n            else account_rolling.rolling_invoice_amount\n            end as rolling_invoice_amount,\n        \n        case when account_rolling.rolling_invoice_amount_paid is null and date_index = 1\n            then 0\n            else account_rolling.rolling_invoice_amount_paid\n            end as rolling_invoice_amount_paid,\n        \n        case when account_rolling.rolling_invoice_amount_unpaid is null and date_index = 1\n            then 0\n            else account_rolling.rolling_invoice_amount_unpaid\n            end as rolling_invoice_amount_unpaid,\n        \n        case when account_rolling.rolling_discount_charges is null and date_index = 1\n            then 0\n            else account_rolling.rolling_discount_charges\n            end as rolling_discount_charges,\n        \n        case when account_rolling.rolling_refunds is null and date_index = 1\n            then 0\n            else account_rolling.rolling_refunds\n            end as rolling_refunds,\n        \n        case when account_rolling.rolling_tax_amount is null and date_index = 1\n            then 0\n            else account_rolling.rolling_tax_amount\n            end as rolling_tax_amount,\n        \n        case when account_rolling.rolling_credit_balance_adjustment_amount is null and date_index = 1\n            then 0\n            else account_rolling.rolling_credit_balance_adjustment_amount\n            end as rolling_credit_balance_adjustment_amount,\n        \n        transaction_date_spine.date_index\n\n    from transaction_date_spine \n    left join account_rolling\n        on account_rolling.account_id = transaction_date_spine.account_id \n        and account_rolling.date_day = transaction_date_spine.date_day\n)\n\nselect * \nfrom account_rolling_totals", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__account_rolling_totals\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:53.071765Z", "completed_at": "2024-08-05T22:27:53.075931Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:53.076167Z", "completed_at": "2024-08-05T22:27:53.076172Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004949092864990234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.int_zuora__account_partitions", "compiled": true, "compiled_code": "\n\n\n\nwith account_rolling_totals as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__account_rolling_totals\"\n),\n\naccount_partitions as (\n\n    select\n        *,\n\n        \n        sum(case when rolling_invoices is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_invoices_partition,\n        sum(case when rolling_invoice_items is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_invoice_items_partition,\n        sum(case when rolling_invoice_amount is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_invoice_amount_partition,\n        sum(case when rolling_invoice_amount_paid is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_invoice_amount_paid_partition,\n        sum(case when rolling_invoice_amount_unpaid is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_invoice_amount_unpaid_partition,\n        sum(case when rolling_discount_charges is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_discount_charges_partition,\n        sum(case when rolling_refunds is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_refunds_partition,\n        sum(case when rolling_tax_amount is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_tax_amount_partition,\n        sum(case when rolling_credit_balance_adjustment_amount is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_credit_balance_adjustment_amount_partition              \n\n    from account_rolling_totals\n)\n\nselect * \nfrom account_partitions", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__account_partitions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:53.077370Z", "completed_at": "2024-08-05T22:27:53.082307Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:53.082532Z", "completed_at": "2024-08-05T22:27:53.082537Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005656003952026367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.int_zuora__account_running_totals", "compiled": true, "compiled_code": "\n\n\n\nwith account_partitions as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__account_partitions\"\n),\n\naccount_running_totals as (\n\n    select\n        account_id,\n        md5(cast(coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as account_daily_id,\n        date_day,        \n        date_week, \n        date_month, \n        date_year,  \n        date_index, \n\n        \n            coalesce(daily_invoices, 0) as daily_invoices,\n        \n            coalesce(daily_invoice_items, 0) as daily_invoice_items,\n        \n            coalesce(daily_invoice_amount, 0) as daily_invoice_amount,\n        \n            coalesce(daily_invoice_amount_paid, 0) as daily_invoice_amount_paid,\n        \n            coalesce(daily_invoice_amount_unpaid, 0) as daily_invoice_amount_unpaid,\n        \n            coalesce(daily_discount_charges, 0) as daily_discount_charges,\n        \n            coalesce(daily_refunds, 0) as daily_refunds,\n        \n            coalesce(daily_tax_amount, 0) as daily_tax_amount,\n        \n            coalesce(daily_credit_balance_adjustment_amount, 0) as daily_credit_balance_adjustment_amount,\n         \n\n        \n            coalesce(rolling_invoices,   \n                first_value(rolling_invoices) over (partition by rolling_invoices_partition order by date_day rows unbounded preceding)) as rolling_invoices,\n            coalesce(rolling_invoice_items,   \n                first_value(rolling_invoice_items) over (partition by rolling_invoice_items_partition order by date_day rows unbounded preceding)) as rolling_invoice_items,\n            coalesce(rolling_invoice_amount,   \n                first_value(rolling_invoice_amount) over (partition by rolling_invoice_amount_partition order by date_day rows unbounded preceding)) as rolling_invoice_amount,\n            coalesce(rolling_invoice_amount_paid,   \n                first_value(rolling_invoice_amount_paid) over (partition by rolling_invoice_amount_paid_partition order by date_day rows unbounded preceding)) as rolling_invoice_amount_paid,\n            coalesce(rolling_invoice_amount_unpaid,   \n                first_value(rolling_invoice_amount_unpaid) over (partition by rolling_invoice_amount_unpaid_partition order by date_day rows unbounded preceding)) as rolling_invoice_amount_unpaid,\n            coalesce(rolling_discount_charges,   \n                first_value(rolling_discount_charges) over (partition by rolling_discount_charges_partition order by date_day rows unbounded preceding)) as rolling_discount_charges,\n            coalesce(rolling_refunds,   \n                first_value(rolling_refunds) over (partition by rolling_refunds_partition order by date_day rows unbounded preceding)) as rolling_refunds,\n            coalesce(rolling_tax_amount,   \n                first_value(rolling_tax_amount) over (partition by rolling_tax_amount_partition order by date_day rows unbounded preceding)) as rolling_tax_amount,\n            coalesce(rolling_credit_balance_adjustment_amount,   \n                first_value(rolling_credit_balance_adjustment_amount) over (partition by rolling_credit_balance_adjustment_amount_partition order by date_day rows unbounded preceding)) as rolling_credit_balance_adjustment_amount\n        \n    from account_partitions\n)\n\nselect *\nfrom account_running_totals", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__account_running_totals\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:53.083936Z", "completed_at": "2024-08-05T22:27:53.089586Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:53.089804Z", "completed_at": "2024-08-05T22:27:53.089810Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006445169448852539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.zuora__account_daily_overview", "compiled": true, "compiled_code": "\n\n\n\nwith account_running_totals as (\n\n    select *\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__account_running_totals\"\n),\n\naccount_overview as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__account_overview\"\n),\n\naccount_daily_overview as (\n\n    select \n        account_running_totals.account_daily_id,\n        account_running_totals.account_id,\n        account_running_totals.date_day,        \n        account_running_totals.date_week, \n        account_running_totals.date_month, \n        account_running_totals.date_year,  \n        account_running_totals.date_index,  \n        account_overview.account_created_at,\n        account_overview.account_name,\n        account_overview.account_number,\n        account_overview.account_status,\n        account_overview.account_country,\n        account_overview.account_email,\n        account_overview.account_first_name,\n        account_overview.account_last_name,\n        account_overview.account_postal_code,\n        account_overview.account_state, \n        account_overview.first_charge_processed_at\n        \n        \n\n\n\n,\n\n        account_running_totals.daily_invoices,\n        account_running_totals.daily_invoice_items,\n\n        \n            round(cast(daily_invoice_amount as numeric(28,6)), 2) as daily_invoice_amount,\n        \n            round(cast(daily_invoice_amount_paid as numeric(28,6)), 2) as daily_invoice_amount_paid,\n        \n            round(cast(daily_invoice_amount_unpaid as numeric(28,6)), 2) as daily_invoice_amount_unpaid,\n        \n            round(cast(daily_discount_charges as numeric(28,6)), 2) as daily_discount_charges,\n        \n            round(cast(daily_refunds as numeric(28,6)), 2) as daily_refunds,\n        \n            round(cast(daily_tax_amount as numeric(28,6)), 2) as daily_tax_amount,\n        \n            round(cast(daily_credit_balance_adjustment_amount as numeric(28,6)), 2) as daily_credit_balance_adjustment_amount,\n        \n\n        account_running_totals.rolling_invoices,\n        account_running_totals.rolling_invoice_items,\n\n        \n            round(cast(rolling_invoice_amount as numeric(28,6)), 2) as rolling_invoice_amount\n            ,\n        \n            round(cast(rolling_invoice_amount_paid as numeric(28,6)), 2) as rolling_invoice_amount_paid\n            ,\n        \n            round(cast(rolling_invoice_amount_unpaid as numeric(28,6)), 2) as rolling_invoice_amount_unpaid\n            ,\n        \n            round(cast(rolling_discount_charges as numeric(28,6)), 2) as rolling_discount_charges\n            ,\n        \n            round(cast(rolling_refunds as numeric(28,6)), 2) as rolling_refunds\n            ,\n        \n            round(cast(rolling_tax_amount as numeric(28,6)), 2) as rolling_tax_amount\n            ,\n        \n            round(cast(rolling_credit_balance_adjustment_amount as numeric(28,6)), 2) as rolling_credit_balance_adjustment_amount\n            \n        \n\n    from account_running_totals\n    left join account_overview\n        on account_running_totals.account_id = account_overview.account_id\n)\n\nselect * \nfrom account_daily_overview", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__account_daily_overview\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:53.092357Z", "completed_at": "2024-08-05T22:27:53.108041Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:53.108366Z", "completed_at": "2024-08-05T22:27:53.108373Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017411231994628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.zuora__line_item_history", "compiled": true, "compiled_code": "with invoice_item_enhanced as (\n\n    select *,\n        cast(date_trunc('day', charge_date) as date) as charge_day,\n        cast(date_trunc('week', charge_date) as date) as charge_week,\n        cast(date_trunc('month', charge_date) as date) as charge_month,\n        case when cast(processing_type as TEXT) = '1' \n            then charge_amount_home_currency else 0 end as discount_amount_home_currency,\n        case when cast(processing_type as TEXT) = '1' \n            then charge_amount else 0 end as discount_amount,\n        cast(date_trunc('day', service_start_date) as date) as service_start_day,\n        cast(date_trunc('week', service_start_date) as date) as service_start_week,\n        cast(date_trunc('month', service_start_date) as date) as service_start_month\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice_item\"\n    where is_most_recent_record \n),\n\ninvoice as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__invoice\"\n    where is_most_recent_record \n),\n\nproduct as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product\"\n    where is_most_recent_record\n),\n\nproduct_rate_plan as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product_rate_plan\" \n    where is_most_recent_record\n),\n\nproduct_rate_plan_charge as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__product_rate_plan_charge\" \n    where is_most_recent_record\n), \n\nrate_plan_charge as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__rate_plan_charge\" \n    where is_most_recent_record\n), \n\nsubscription as (\n\n    select *\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__subscription\" \n    where is_most_recent_record\n),\n\namendment as (\n\n    select *\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__amendment\" \n    where is_most_recent_record\n),\n\n\ntaxation_item as (\n\n    select \n        invoice_item_id,\n        sum(tax_amount_home_currency) as tax_amount_home_currency\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"stg_zuora__taxation_item\"\n    where is_most_recent_record\n    group by 1\n), \n\n\naccount_enhanced as (\n\n    select  \n        account_id,\n        cast(date_trunc('day', account_created_at) as date) as account_creation_day, \n        cast(date_trunc('day', first_charge_processed_at) as date) as first_charge_day,\n        account_status\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__account_daily_overview\"\n    group by 1,2,3,4\n),\n\ninvoice_revenue_items as (\n\n    select\n        invoice_item_id, \n         \n        charge_amount_home_currency as gross_revenue,\n        case when cast(processing_type as TEXT)= '1' \n            then charge_amount_home_currency else 0 end as discount_revenue\n        \n    from invoice_item_enhanced\n),\n\n\nline_item_history as (\n\n    select \n        invoice_item_enhanced.invoice_item_id, \n        invoice_item_enhanced.account_id,  \n        account_enhanced.account_creation_day, \n        account_enhanced.account_status,\n        invoice_item_enhanced.amendment_id,\n        invoice_item_enhanced.balance,\n        invoice_item_enhanced.charge_amount,\n        invoice_item_enhanced.charge_amount_home_currency,\n        invoice_item_enhanced.charge_date,\n        invoice_item_enhanced.charge_day,\n        invoice_item_enhanced.charge_week,\n        invoice_item_enhanced.charge_month,\n        invoice_item_enhanced.charge_name,\n        invoice_item_enhanced.discount_amount,\n        invoice_item_enhanced.discount_amount_home_currency,\n        account_enhanced.first_charge_day,\n        invoice_item_enhanced.home_currency,\n        invoice_item_enhanced.invoice_id,\n        invoice_item_enhanced.product_id,\n        invoice_item_enhanced.product_rate_plan_id,\n        invoice_item_enhanced.product_rate_plan_charge_id,\n        invoice_item_enhanced.rate_plan_charge_id,\n        invoice_item_enhanced.service_start_day,\n        invoice_item_enhanced.service_start_week,\n        invoice_item_enhanced.service_start_month,\n        invoice_item_enhanced.service_end_date,\n        invoice_item_enhanced.subscription_id,\n        invoice_item_enhanced.sku,\n        invoice_item_enhanced.tax_amount,\n\n        \n        taxation_item.tax_amount_home_currency,\n        \n\n        invoice_item_enhanced.transaction_currency,\n        invoice_item_enhanced.unit_price,\n        invoice_item_enhanced.uom,\n        invoice.invoice_number,\n        invoice.invoice_date,\n        invoice.due_date as invoice_due_date,   \n        subscription.auto_renew as subscription_auto_renew,\n        subscription.cancel_reason as subscription_cancel_reason,\n        subscription.cancelled_date as subscription_cancel_date, \n        subscription.service_activation_date as subscription_service_activation_date,\n        subscription.status as subscription_status,\n        subscription.subscription_start_date,\n        subscription.subscription_end_date,\n        subscription.term_start_date as subscription_term_start_date,\n        subscription.term_end_date as subscription_term_end_date,\n        subscription.term_type as subscription_term_type,\n        subscription.version as subscription_version,\n        rate_plan_charge.name as rate_plan_charge_name,\n        rate_plan_charge.billing_period as charge_billing_period,\n        rate_plan_charge.billing_timing as charge_billing_timing,\n        rate_plan_charge.charge_model as charge_model,\n        rate_plan_charge.charge_type as charge_type,\n        rate_plan_charge.effective_start_date as charge_effective_start_date,\n        rate_plan_charge.effective_end_date as charge_effective_end_date,\n        rate_plan_charge.segment as charge_segment,\n        rate_plan_charge.mrr as charge_mrr,\n        rate_plan_charge.mrrhome_currency as charge_mrr_home_currency,\n        amendment.name as amendment_name,\n        amendment.type as amendment_type,\n        amendment.status as amendment_status,\n        product.name as product_name,\n        product.category as product_category,\n        product.description as product_description,\n        product.effective_start_date as product_start_date,\n        product.effective_end_date as product_end_date, \n        product_rate_plan.name as product_rate_plan_name,\n        product_rate_plan.description as product_rate_plan_description,\n        invoice_revenue_items.gross_revenue,\n        invoice_revenue_items.discount_revenue,\n        invoice_revenue_items.gross_revenue - invoice_revenue_items.discount_revenue as net_revenue\n\n        \n\n\n\n\n\n        \n\n\n\n\n\n    from invoice_item_enhanced\n        left join invoice\n            on invoice_item_enhanced.invoice_id = invoice.invoice_id\n        left join subscription\n            on invoice_item_enhanced.subscription_id = subscription.subscription_id\n        left join rate_plan_charge \n            on invoice_item_enhanced.rate_plan_charge_id = rate_plan_charge.rate_plan_charge_id\n        left join amendment\n            on invoice_item_enhanced.amendment_id = amendment.amendment_id\n        left join product\n            on invoice_item_enhanced.product_id = product.product_id\n        left join product_rate_plan\n            on invoice_item_enhanced.product_rate_plan_id = product_rate_plan.product_rate_plan_id \n        left join account_enhanced\n            on invoice_item_enhanced.account_id = account_enhanced.account_id\n        left join invoice_revenue_items\n            on invoice_item_enhanced.invoice_item_id = invoice_revenue_items.invoice_item_id\n        \n        \n        left join taxation_item \n            on invoice_item_enhanced.invoice_item_id = taxation_item.invoice_item_id\n        \n)\n\nselect * \nfrom line_item_history", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__line_item_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:53.105625Z", "completed_at": "2024-08-05T22:27:53.115906Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:53.116818Z", "completed_at": "2024-08-05T22:27:53.116824Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025354862213134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora.unique_zuora__account_daily_overview_account_daily_id.2f527d4683", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_daily_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__account_daily_overview\"\nwhere account_daily_id is not null\ngroup by account_daily_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:53.102464Z", "completed_at": "2024-08-05T22:27:53.116096Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:53.117186Z", "completed_at": "2024-08-05T22:27:53.117190Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025954008102416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora.not_null_zuora__account_daily_overview_account_daily_id.5873836d5a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_daily_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__account_daily_overview\"\nwhere account_daily_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:53.118151Z", "completed_at": "2024-08-05T22:27:53.123797Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:53.124092Z", "completed_at": "2024-08-05T22:27:53.124098Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007829904556274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora.not_null_zuora__line_item_history_invoice_item_id.7b9dc1931d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_item_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__line_item_history\"\nwhere invoice_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:53.121360Z", "completed_at": "2024-08-05T22:27:53.124576Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:53.124813Z", "completed_at": "2024-08-05T22:27:53.124817Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004030942916870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora.unique_zuora__line_item_history_invoice_item_id.006d565076", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__line_item_history\"\nwhere invoice_item_id is not null\ngroup by invoice_item_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:53.109627Z", "completed_at": "2024-08-05T22:27:53.471754Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:53.471975Z", "completed_at": "2024-08-05T22:27:53.471982Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3983430862426758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.int_zuora__mrr_date_spine", "compiled": true, "compiled_code": "with spine as (\n\n    \n    \n        \n\n        \n        \n    \n\n    \n    \n\n    \n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 823\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2015-08-01'as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2017-11-01'as date)\n\n)\n\nselect * from filtered\n\n\n),\n\naccount_service_history as (\n\n    select \n        account_id,\n        min(service_start_month) as first_service_month\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__line_item_history\"\n    group by 1\n),\n\ndate_spine as (\n\n    select\n        cast(date_trunc('day', date_day) as date) as date_day, \n        cast(date_trunc('week', date_day) as date) as date_week, \n        cast(date_trunc('month', date_day) as date) as date_month,\n        cast(date_trunc('year', date_day) as date) as date_year,  \n        row_number() over (order by cast(date_trunc('day', date_day) as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select \n        distinct account_service_history.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account_service_history\n    cross join date_spine \n    where cast(date_trunc('day', account_service_history.first_service_month) as date) <= date_spine.date_day\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__mrr_date_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:53.508806Z", "completed_at": "2024-08-05T22:27:53.515260Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:53.515596Z", "completed_at": "2024-08-05T22:27:53.515605Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007327079772949219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zuora.zuora__monthly_recurring_revenue", "compiled": true, "compiled_code": "with line_items as (\n\n    select *\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__line_item_history\"\n),\n\nmonth_spine as (\n\n    select \n        account_id,\n        date_month as account_month\n    from \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"int_zuora__mrr_date_spine\"\n    group by 1,2\n),\n\nmrr_by_account as (\n\n    select \n        coalesce(month_spine.account_id, line_items.account_id) as account_id,\n        coalesce(month_spine.account_month, line_items.service_start_month) as account_month,\n\n         \n        sum(case when charge_mrr_home_currency is null then 0 else charge_mrr_home_currency end) as mrr_expected_current_month,\n        \n\n        \n         \n            sum(case when lower(charge_type) = 'recurring' and gross_revenue is not null then gross_revenue else 0 end) as gross_current_month_mrr,\n            sum(case when lower(charge_type) != 'recurring' and gross_revenue is not null then gross_revenue else 0 end) as gross_current_month_non_mrr\n            ,\n         \n            sum(case when lower(charge_type) = 'recurring' and discount_revenue is not null then discount_revenue else 0 end) as discount_current_month_mrr,\n            sum(case when lower(charge_type) != 'recurring' and discount_revenue is not null then discount_revenue else 0 end) as discount_current_month_non_mrr\n            ,\n         \n            sum(case when lower(charge_type) = 'recurring' and net_revenue is not null then net_revenue else 0 end) as net_current_month_mrr,\n            sum(case when lower(charge_type) != 'recurring' and net_revenue is not null then net_revenue else 0 end) as net_current_month_non_mrr\n            \n        \n\n    from month_spine\n    left join line_items\n        on month_spine.account_month = line_items.service_start_month\n        and month_spine.account_id = line_items.account_id\n    group by 1,2\n),\n\ncurrent_vs_previous_mrr as (\n    \n    select \n        account_id,\n        account_month,\n        gross_current_month_mrr,\n        discount_current_month_mrr,\n        net_current_month_mrr,\n        gross_current_month_non_mrr,\n        discount_current_month_non_mrr,\n        net_current_month_non_mrr,\n        mrr_expected_current_month,\n        lag(mrr_expected_current_month) over (partition by account_id order by account_month) as mrr_expected_previous_month,\n\n        \n         \n            lag(gross_current_month_mrr) over (partition by account_id order by account_month) as gross_previous_month_mrr,\n            lag(gross_current_month_non_mrr) over (partition by account_id order by account_month) as gross_previous_month_non_mrr,\n         \n            lag(discount_current_month_mrr) over (partition by account_id order by account_month) as discount_previous_month_mrr,\n            lag(discount_current_month_non_mrr) over (partition by account_id order by account_month) as discount_previous_month_non_mrr,\n         \n            lag(net_current_month_mrr) over (partition by account_id order by account_month) as net_previous_month_mrr,\n            lag(net_current_month_non_mrr) over (partition by account_id order by account_month) as net_previous_month_non_mrr,\n        \n\n        row_number() over (partition by account_id order by account_month) as account_month_number\n    from mrr_by_account\n    group by 1,2,3,4,5,6,7,8,9\n),\n\nmrr_type as (\n\n    select \n        md5(cast(coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as account_monthly_id,\n        *,   \n        case when net_current_month_mrr > net_previous_month_mrr then 'expansion'\n            when net_current_month_mrr < net_previous_month_mrr then 'contraction'\n            when net_current_month_mrr = net_previous_month_mrr then 'unchanged'\n            when net_previous_month_mrr is null then 'new'\n            when (net_current_month_mrr = 0.0 or net_current_month_mrr is null)\n                and (net_previous_month_mrr != 0.0)\n                then 'churned'\n            when (net_previous_month_mrr = 0.0 and net_current_month_mrr > 0.0 \n                and account_month_number >= 3) \n                then 'reactivation'\n            else null\n            end as net_mrr_type\n    from current_vs_previous_mrr\n)\n\nselect * \nfrom mrr_type", "relation_name": "\"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__monthly_recurring_revenue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:53.517891Z", "completed_at": "2024-08-05T22:27:53.524136Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:53.524659Z", "completed_at": "2024-08-05T22:27:53.524667Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007882118225097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora.not_null_zuora__monthly_recurring_revenue_account_monthly_id.652f06f421", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_monthly_id\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__monthly_recurring_revenue\"\nwhere account_monthly_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-08-05T22:27:53.520850Z", "completed_at": "2024-08-05T22:27:53.524364Z"}, {"name": "execute", "started_at": "2024-08-05T22:27:53.525080Z", "completed_at": "2024-08-05T22:27:53.525084Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007952213287353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zuora.unique_zuora__monthly_recurring_revenue_account_monthly_id.a7bf72a906", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_monthly_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests_1_zuora_dev\".\"zuora__monthly_recurring_revenue\"\nwhere account_monthly_id is not null\ngroup by account_monthly_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 4.315688848495483, "args": {"warn_error_options": {"include": [], "exclude": []}, "empty_catalog": false, "strict_mode": false, "log_level_file": "debug", "defer": false, "printer_width": 80, "require_explicit_package_overrides_for_builtin_materializations": true, "log_format": "default", "static": false, "favor_state": false, "cache_selected_only": false, "exclude": [], "vars": {}, "log_format_file": "debug", "invocation_command": "dbt docs generate -t postgres", "use_colors_file": true, "log_path": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_zuora/integration_tests/logs", "log_file_max_bytes": 10485760, "version_check": true, "which": "generate", "source_freshness_run_project_hooks": false, "project_dir": "/Users/joseph.markiewicz/Documents/dbt_packages/standardized_models/billing/dbt_zuora/integration_tests", "require_resource_names_without_spaces": false, "quiet": false, "use_colors": true, "profiles_dir": "/Users/joseph.markiewicz/.dbt", "indirect_selection": "eager", "compile": true, "populate_cache": true, "partial_parse": true, "send_anonymous_usage_stats": true, "static_parser": true, "macro_debugging": false, "select": [], "show_resource_report": false, "introspect": true, "write_json": true, "partial_parse_file_diff": true, "log_level": "info", "target": "postgres", "enable_legacy_logger": false, "print": true}}