{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.8.3", "generated_at": "2024-08-12T22:24:29.183750Z", "invocation_id": "3496597c-22af-4d1f-a1fd-82dfceab60d2", "env": {}, "project_name": "zuora_integration_tests", "project_id": "ed024b33d1c684e27a1a3a5548848aa2", "user_id": "8268eefe-e8f7-472e-ab2a-a92f0135d76d", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"seed.zuora_integration_tests.zuora_invoice_item_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_invoice_item_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_invoice_item_data.csv", "original_file_path": "seeds/zuora_invoice_item_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_invoice_item_data", "fqn": ["zuora_integration_tests", "zuora_invoice_item_data"], "alias": "zuora_invoice_item_data", "checksum": {"name": "sha256", "checksum": "321724e4b032bcf03cc60a802671d4f78bf88cd5f89b997538166d7b041db5ee"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "charge_amount": "float", "charge_amount_home_currency": "float", "charge_date": "timestamp", "unit_price": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"charge_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "charge_amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "charge_date": "timestamp", "unit_price": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1723501431.597994, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_invoice_item_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_contact_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_contact_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_contact_data.csv", "original_file_path": "seeds/zuora_contact_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_contact_data", "fqn": ["zuora_integration_tests", "zuora_contact_data"], "alias": "zuora_contact_data", "checksum": {"name": "sha256", "checksum": "0320dd2d62c5a3c71fda26fdd4875b9f6a142e3919201c6ef8a38c281c818ec6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1723501431.602603, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_contact_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_rate_plan_charge_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_rate_plan_charge_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_rate_plan_charge_data.csv", "original_file_path": "seeds/zuora_rate_plan_charge_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_rate_plan_charge_data", "fqn": ["zuora_integration_tests", "zuora_rate_plan_charge_data"], "alias": "zuora_rate_plan_charge_data", "checksum": {"name": "sha256", "checksum": "607879494964bb86c5fcf32fa1628e6cc38f8d017523f66abb26cd90706869f5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "booking_exchange_rate": "float", "dmrc": "float", "dmrchome_currency": "float", "dtcv": "float", "dtcvhome_currency": "float", "mrrhome_currency": "float", "price_increase_percentage": "float", "tcv": "float", "tcvhome_currency": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"booking_exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "dmrc": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "dmrchome_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "dtcv": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "dtcvhome_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrrhome_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "price_increase_percentage": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "tcv": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "tcvhome_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1723501431.604348, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_rate_plan_charge_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_product_rate_plan_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_product_rate_plan_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_product_rate_plan_data.csv", "original_file_path": "seeds/zuora_product_rate_plan_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_product_rate_plan_data", "fqn": ["zuora_integration_tests", "zuora_product_rate_plan_data"], "alias": "zuora_product_rate_plan_data", "checksum": {"name": "sha256", "checksum": "89a83ffc65493fa037da29b1345ec48d5639a40d96eb98f92e713064eb3f3642"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1723501431.606038, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_product_rate_plan_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_refund_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_refund_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_refund_data.csv", "original_file_path": "seeds/zuora_refund_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_refund_data", "fqn": ["zuora_integration_tests", "zuora_refund_data"], "alias": "zuora_refund_data", "checksum": {"name": "sha256", "checksum": "278912cc3f152a5a16fe28979d7e96a6aa9a00fcf28a4b23e25613571b88d57e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "refund_transaction_time": "timestamp", "refund_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"refund_transaction_time": "timestamp", "refund_date": "timestamp"}}, "created_at": 1723501431.607618, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_refund_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_rate_plan_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_rate_plan_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_rate_plan_data.csv", "original_file_path": "seeds/zuora_rate_plan_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_rate_plan_data", "fqn": ["zuora_integration_tests", "zuora_rate_plan_data"], "alias": "zuora_rate_plan_data", "checksum": {"name": "sha256", "checksum": "90b5d9c6a831e8635c6813489e765344f234a868887e31762188ab7dee6ef7d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1723501431.609272, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_rate_plan_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_product_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_product_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_product_data.csv", "original_file_path": "seeds/zuora_product_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_product_data", "fqn": ["zuora_integration_tests", "zuora_product_data"], "alias": "zuora_product_data", "checksum": {"name": "sha256", "checksum": "ac98d00bf2218e9aa4828106314ee963545057464b5ad5d71b240e232a3db715"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1723501431.611108, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_product_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_account_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_account_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_account_data.csv", "original_file_path": "seeds/zuora_account_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_account_data", "fqn": ["zuora_integration_tests", "zuora_account_data"], "alias": "zuora_account_data", "checksum": {"name": "sha256", "checksum": "c3eaff314b2550d4e2498d6bd359a7283c004cd94cf38c57a80cd5895dff0a60"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "credit_balance": "float", "last_invoice_date": "timestamp", "tax_exempt_effective_date": "timestamp", "tax_exempt_expiration_date": "timestamp", "total_debit_memo_balance": "float", "total_invoice_balance": "float", "unapplied_balance": "float", "unapplied_credit_memo_amount": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"credit_balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "last_invoice_date": "timestamp", "tax_exempt_effective_date": "timestamp", "tax_exempt_expiration_date": "timestamp", "total_debit_memo_balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "total_invoice_balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "unapplied_balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "unapplied_credit_memo_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1723501431.612752, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_account_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_amendment_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_amendment_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_amendment_data.csv", "original_file_path": "seeds/zuora_amendment_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_amendment_data", "fqn": ["zuora_integration_tests", "zuora_amendment_data"], "alias": "zuora_amendment_data", "checksum": {"name": "sha256", "checksum": "73afbd65c4c7ba61f29202353a223ca77b66d0697f6d858a0b2bf81d13bc2b27"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1723501431.6152709, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_amendment_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_taxation_item_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_taxation_item_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_taxation_item_data.csv", "original_file_path": "seeds/zuora_taxation_item_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_taxation_item_data", "fqn": ["zuora_integration_tests", "zuora_taxation_item_data"], "alias": "zuora_taxation_item_data", "checksum": {"name": "sha256", "checksum": "0c2e9f3f9c56ebffc4d96d28f6f702d1a002871a48b41cc50652a94039bde10a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "tax_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"tax_date": "timestamp"}}, "created_at": 1723501431.616833, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_taxation_item_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_payment_method_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_payment_method_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_payment_method_data.csv", "original_file_path": "seeds/zuora_payment_method_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_payment_method_data", "fqn": ["zuora_integration_tests", "zuora_payment_method_data"], "alias": "zuora_payment_method_data", "checksum": {"name": "sha256", "checksum": "c810aec44e44e93a84d2f077a499c4c8bac18b6dc8a1894ede8bd1d4dadd5ce9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "last_failed_sale_transaction_date": "timestamp", "last_transaction_date_time": "timestamp", "max_consecutive_payment_failures": "bigint", "num_consecutive_failures": "bigint", "total_number_of_error_payments": "bigint", "total_number_of_processed_payments": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"last_failed_sale_transaction_date": "timestamp", "last_transaction_date_time": "timestamp", "max_consecutive_payment_failures": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "num_consecutive_failures": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "total_number_of_error_payments": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "total_number_of_processed_payments": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1723501431.618457, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_payment_method_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_product_rate_plan_charge_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_product_rate_plan_charge_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_product_rate_plan_charge_data.csv", "original_file_path": "seeds/zuora_product_rate_plan_charge_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_product_rate_plan_charge_data", "fqn": ["zuora_integration_tests", "zuora_product_rate_plan_charge_data"], "alias": "zuora_product_rate_plan_charge_data", "checksum": {"name": "sha256", "checksum": "d6f98f3e7db7ecfac3b405e48877d149e1216326c2c094746c093e8ce7114931"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "default_quantity": "float", "included_units": "float", "max_quantity": "float", "min_quantity": "float", "specific_billing_period": "bigint", "up_to_periods": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"default_quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "included_units": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "max_quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "min_quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "specific_billing_period": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "up_to_periods": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1723501431.620416, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_product_rate_plan_charge_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_refund_invoice_payment_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_refund_invoice_payment_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_refund_invoice_payment_data.csv", "original_file_path": "seeds/zuora_refund_invoice_payment_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_refund_invoice_payment_data", "fqn": ["zuora_integration_tests", "zuora_refund_invoice_payment_data"], "alias": "zuora_refund_invoice_payment_data", "checksum": {"name": "sha256", "checksum": "de41680d5906d8aaec6905923bc04f7f2ae2315a78b46b2bc948d708fdb15fb1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1723501431.622078, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_refund_invoice_payment_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_invoice_payment_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_invoice_payment_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_invoice_payment_data.csv", "original_file_path": "seeds/zuora_invoice_payment_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_invoice_payment_data", "fqn": ["zuora_integration_tests", "zuora_invoice_payment_data"], "alias": "zuora_invoice_payment_data", "checksum": {"name": "sha256", "checksum": "66bec4a6a91f8bd8e68a0f78d48d91fba23cecb4fafadc82919fbbe04187b2e3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "amount_currency_rounding": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"amount_currency_rounding": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1723501431.623577, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_invoice_payment_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_subscription_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_subscription_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_subscription_data.csv", "original_file_path": "seeds/zuora_subscription_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_subscription_data", "fqn": ["zuora_integration_tests", "zuora_subscription_data"], "alias": "zuora_subscription_data", "checksum": {"name": "sha256", "checksum": "612fe9ef9b63f5c6c1f4e071eb53e032b20877d80c00b5237596dd11920562ef"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "contract_acceptance_date": "timestamp", "contract_effective_date": "timestamp", "initial_term": "bigint", "original_created_date": "timestamp", "service_activation_date": "timestamp", "subscription_end_date": "timestamp", "subscription_start_date": "timestamp", "term_end_date": "timestamp", "term_start_date": "timestamp", "version": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"contract_acceptance_date": "timestamp", "contract_effective_date": "timestamp", "created_date": "timestamp", "initial_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "original_created_date": "timestamp", "service_activation_date": "timestamp", "subscription_end_date": "timestamp", "subscription_start_date": "timestamp", "term_end_date": "timestamp", "term_start_date": "timestamp", "version": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1723501431.6252182, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_subscription_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_order_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_order_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_order_data.csv", "original_file_path": "seeds/zuora_order_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_order_data", "fqn": ["zuora_integration_tests", "zuora_order_data"], "alias": "zuora_order_data", "checksum": {"name": "sha256", "checksum": "c7c01280156b988c3ff826c166d24e1cd934e2bf46bb24e30bc6ce43d6d9c572"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1723501431.626848, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_order_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_payment_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_payment_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_payment_data.csv", "original_file_path": "seeds/zuora_payment_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_payment_data", "fqn": ["zuora_integration_tests", "zuora_payment_data"], "alias": "zuora_payment_data", "checksum": {"name": "sha256", "checksum": "ee247d9dc5c8c5d594a795732002cf5be9d329b1e308b306c11134f93ab53766"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "applied_amount": "float", "applied_credit_balance_amount": "float", "settled_on": "timestamp", "unapplied_amount": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"applied_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "applied_credit_balance_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "settled_on": "timestamp", "unapplied_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1723501431.6284149, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_payment_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_invoice_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_invoice_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_invoice_data.csv", "original_file_path": "seeds/zuora_invoice_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_invoice_data", "fqn": ["zuora_integration_tests", "zuora_invoice_data"], "alias": "zuora_invoice_data", "checksum": {"name": "sha256", "checksum": "8f6b1f8c51db0bd2fd1fb7a465de4ad0d2751b2f404d622474c5a3aa3f85ca04"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "adjustment_amount": "float", "amount_without_tax": "float", "amount_without_tax_home_currency": "float", "credit_balance_adjustment_amount": "float", "credit_memo_amount": "float", "last_email_sent_date": "timestamp", "payment_amount": "float", "posted_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"adjustment_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_without_tax": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_without_tax_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "credit_balance_adjustment_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "credit_memo_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "last_email_sent_date": "timestamp", "payment_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "posted_date": "timestamp"}}, "created_at": 1723501431.630186, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_invoice_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_integration_tests.zuora_credit_balance_adjustment_data": {"database": "postgres", "schema": "zz_zuora", "name": "zuora_credit_balance_adjustment_data", "resource_type": "seed", "package_name": "zuora_integration_tests", "path": "zuora_credit_balance_adjustment_data.csv", "original_file_path": "seeds/zuora_credit_balance_adjustment_data.csv", "unique_id": "seed.zuora_integration_tests.zuora_credit_balance_adjustment_data", "fqn": ["zuora_integration_tests", "zuora_credit_balance_adjustment_data"], "alias": "zuora_credit_balance_adjustment_data", "checksum": {"name": "sha256", "checksum": "890ba1c1d249049a5d150d92f87b8a396ca8f4008c729e7d0b2e2c1c33c0402e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1723501431.632067, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_credit_balance_adjustment_data\"", "raw_code": "", "root_path": "/Users/catherinefritz/Documents/dbt_packages/zuora/dbt_zuora/integration_tests", "depends_on": {"macros": []}}, "model.zuora.zuora__billing_history": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "zuora__billing_history", "resource_type": "model", "package_name": "zuora", "path": "zuora__billing_history.sql", "original_file_path": "models/zuora__billing_history.sql", "unique_id": "model.zuora.zuora__billing_history", "fqn": ["zuora", "zuora__billing_history"], "alias": "zuora__billing_history", "checksum": {"name": "sha256", "checksum": "e5360dc30ac858f8c229918dfdf73697e6d3ae19e12152d773b285f90f6316e0"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record is an invoice to evaluate the history of charges billed, enhanced with additional details from payments, refunds, adjustments, discounts, and taxes.", "columns": {"invoice_id": {"name": "invoice_id", "description": "The unique identifier of the invoice table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "The time at which the invoice was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "The unique identification number for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_date": {"name": "invoice_date", "description": "Specifies the date on which to generate the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_amount": {"name": "invoice_amount", "description": "The sum of all charges and taxes associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_amount_home_currency": {"name": "invoice_amount_home_currency", "description": "The sum of all charges and taxes associated with the invoice in its home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_amount_paid": {"name": "invoice_amount_paid", "description": "The amount of the invoice currently paid for.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_amount_unpaid": {"name": "invoice_amount_unpaid", "description": "The amount of the invoice yet to be paid for.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The total amount of the taxes applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "The amount of refunds applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_balance_adjustment_amount": {"name": "credit_balance_adjustment_amount", "description": "The amount of the credit balance adjustment applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount_home_currency": {"name": "tax_amount_home_currency", "description": "The amount of tax in home currency for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "Transaction currency the customer is billed in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Home currency the customer is billed in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date of the exchange rate used for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The due date of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the invoice in the system. This status is not the status of the payment of the invoice just the status of the invoice itself.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "purchase_type": {"name": "purchase_type", "description": "The type of the invoice source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_items": {"name": "invoice_items", "description": "The amount of invoice items in the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "products": {"name": "products", "description": "The number of products billed in the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscriptions": {"name": "subscriptions", "description": "The number of subscriptions in the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_charges": {"name": "discount_charges", "description": "The discount charges applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_charges_home_currency": {"name": "discount_charges_home_currency", "description": "The discount charges home currency applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "units": {"name": "units", "description": "The units in the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_charge_date": {"name": "first_charge_date", "description": "The first charge date for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_charge_date": {"name": "most_recent_charge_date", "description": "The most recent charge date for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_service_start_date": {"name": "invoice_service_start_date", "description": "Earliest invoice item service start date for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_service_end_date": {"name": "invoice_service_end_date", "description": "Earliest invoice item service end date for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payments": {"name": "payments", "description": "The number of payments applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_amount_paid_home_currency": {"name": "invoice_amount_paid_home_currency", "description": "The amount of the invoice amount paid in the home currency on the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_amount_unpaid_home_currency": {"name": "invoice_amount_unpaid_home_currency", "description": "The amount of the invoice amount unpaid in the home currency on the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_payment_date": {"name": "first_payment_date", "description": "The first date when a payment is applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_payment_date": {"name": "most_recent_payment_date", "description": "The most recent date when a payment is applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_methods": {"name": "payment_methods", "description": "The number of payment methods associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_balance_adjustments": {"name": "credit_balance_adjustments", "description": "The number of the credit balance adjustments applied on the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_balance_adjustment_amount_home_currency": {"name": "credit_balance_adjustment_amount_home_currency", "description": "The amount for the credit balance adjustment in home currency on the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_credit_balance_adjustment_date": {"name": "first_credit_balance_adjustment_date", "description": "The first date when a credit balance adjustment is applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_credit_balance_adjustment_date": {"name": "most_recent_credit_balance_adjustment_date", "description": "The most recent date when a credit balance adjustment is applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora://models/zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.359176, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"zuora__billing_history\"", "raw_code": "with invoice as (\n\n    select\n        invoice_id,\n        account_id,\n        created_date as created_at,\n        invoice_number,\n        invoice_date,\n        amount as invoice_amount,\n        amount_home_currency as invoice_amount_home_currency,\n        payment_amount as invoice_amount_paid,\n        amount - payment_amount as invoice_amount_unpaid, \n        tax_amount,\n        refund_amount,\n\n        {% if var('zuora__using_credit_balance_adjustment', true) %}\n        credit_balance_adjustment_amount,\n        {% endif %}\n\n        transaction_currency,\n        home_currency,\n        exchange_rate_date,\n        due_date,\n        status,\n        source_type as purchase_type,\n        sum(case when cast({{ dbt.date_trunc('day', dbt.current_timestamp_backcompat()) }} as date) > due_date\n                and amount != payment_amount\n                then balance else 0 end) as total_amount_past_due\n    from {{ var('invoice') }} \n    where is_most_recent_record    \n    {{ dbt_utils.group_by(18) if var('zuora__using_credit_balance_adjustment', true) else dbt_utils.group_by(17) }}\n),\n\nbilling_enriched as (\n\n    select * \n    from {{ ref('int_zuora__billing_enriched') }} \n), \n\nbilling_history as (\n\n    select \n        invoice.invoice_id,\n        invoice.account_id,\n        invoice.created_at,\n        invoice.invoice_number,\n        invoice.invoice_date,\n        invoice.invoice_amount,\n        invoice.invoice_amount_home_currency,\n        invoice.invoice_amount_paid,\n        invoice.invoice_amount_unpaid,\n        invoice.tax_amount,\n        invoice.refund_amount,\n\n        {% if var('zuora__using_credit_balance_adjustment', true) %}\n        invoice.credit_balance_adjustment_amount,\n        {% endif %}\n        \n        {% if var('zuora__using_taxation_item', true) %}\n        billing_enriched.tax_amount_home_currency,\n        {% endif %}\n\n        invoice.transaction_currency,\n        invoice.home_currency,\n        invoice.exchange_rate_date,\n        invoice.due_date,\n        invoice.status,\n        invoice.purchase_type,\n        billing_enriched.invoice_items,\n        billing_enriched.products,\n        billing_enriched.subscriptions,\n        billing_enriched.discount_charges,\n        billing_enriched.discount_charges_home_currency,\n        billing_enriched.units,\n        billing_enriched.first_charge_date,\n        billing_enriched.most_recent_charge_date,\n        billing_enriched.invoice_service_start_date,\n        billing_enriched.invoice_service_end_date,        \n        billing_enriched.payments, \n        billing_enriched.invoice_amount_paid_home_currency,\n        invoice.invoice_amount_home_currency - billing_enriched.invoice_amount_paid_home_currency as invoice_amount_unpaid_home_currency, \n        billing_enriched.first_payment_date,\n        billing_enriched.most_recent_payment_date, \n        billing_enriched.payment_methods\n\n        {% if var('zuora__using_credit_balance_adjustment', true) %}\n        , billing_enriched.credit_balance_adjustments\n        , billing_enriched.credit_balance_adjustment_amount_home_currency\n        , billing_enriched.first_credit_balance_adjustment_date\n        , billing_enriched.most_recent_credit_balance_adjustment_date\n        {% endif %}\n\n    from invoice\n    left join billing_enriched on \n        invoice.invoice_id = billing_enriched.invoice_id\n)\n\nselect * \nfrom billing_history", "language": "sql", "refs": [{"name": "stg_zuora__invoice", "package": null, "version": null}, {"name": "int_zuora__billing_enriched", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.date_trunc", "macro.dbt_utils.group_by"], "nodes": ["model.zuora_source.stg_zuora__invoice", "model.zuora.int_zuora__billing_enriched"]}, "compiled_path": "target/compiled/zuora/models/zuora__billing_history.sql", "compiled": true, "compiled_code": "with invoice as (\n\n    select\n        invoice_id,\n        account_id,\n        created_date as created_at,\n        invoice_number,\n        invoice_date,\n        amount as invoice_amount,\n        amount_home_currency as invoice_amount_home_currency,\n        payment_amount as invoice_amount_paid,\n        amount - payment_amount as invoice_amount_unpaid, \n        tax_amount,\n        refund_amount,\n\n        \n        credit_balance_adjustment_amount,\n        \n\n        transaction_currency,\n        home_currency,\n        exchange_rate_date,\n        due_date,\n        status,\n        source_type as purchase_type,\n        sum(case when cast(date_trunc('day', \n    current_timestamp::timestamp\n) as date) > due_date\n                and amount != payment_amount\n                then balance else 0 end) as total_amount_past_due\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice\" \n    where is_most_recent_record    \n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18\n),\n\nbilling_enriched as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__billing_enriched\" \n), \n\nbilling_history as (\n\n    select \n        invoice.invoice_id,\n        invoice.account_id,\n        invoice.created_at,\n        invoice.invoice_number,\n        invoice.invoice_date,\n        invoice.invoice_amount,\n        invoice.invoice_amount_home_currency,\n        invoice.invoice_amount_paid,\n        invoice.invoice_amount_unpaid,\n        invoice.tax_amount,\n        invoice.refund_amount,\n\n        \n        invoice.credit_balance_adjustment_amount,\n        \n        \n        \n        billing_enriched.tax_amount_home_currency,\n        \n\n        invoice.transaction_currency,\n        invoice.home_currency,\n        invoice.exchange_rate_date,\n        invoice.due_date,\n        invoice.status,\n        invoice.purchase_type,\n        billing_enriched.invoice_items,\n        billing_enriched.products,\n        billing_enriched.subscriptions,\n        billing_enriched.discount_charges,\n        billing_enriched.discount_charges_home_currency,\n        billing_enriched.units,\n        billing_enriched.first_charge_date,\n        billing_enriched.most_recent_charge_date,\n        billing_enriched.invoice_service_start_date,\n        billing_enriched.invoice_service_end_date,        \n        billing_enriched.payments, \n        billing_enriched.invoice_amount_paid_home_currency,\n        invoice.invoice_amount_home_currency - billing_enriched.invoice_amount_paid_home_currency as invoice_amount_unpaid_home_currency, \n        billing_enriched.first_payment_date,\n        billing_enriched.most_recent_payment_date, \n        billing_enriched.payment_methods\n\n        \n        , billing_enriched.credit_balance_adjustments\n        , billing_enriched.credit_balance_adjustment_amount_home_currency\n        , billing_enriched.first_credit_balance_adjustment_date\n        , billing_enriched.most_recent_credit_balance_adjustment_date\n        \n\n    from invoice\n    left join billing_enriched on \n        invoice.invoice_id = billing_enriched.invoice_id\n)\n\nselect * \nfrom billing_history", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora.zuora__account_daily_overview": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "zuora__account_daily_overview", "resource_type": "model", "package_name": "zuora", "path": "zuora__account_daily_overview.sql", "original_file_path": "models/zuora__account_daily_overview.sql", "unique_id": "model.zuora.zuora__account_daily_overview", "fqn": ["zuora", "zuora__account_daily_overview"], "alias": "zuora__account_daily_overview", "checksum": {"name": "sha256", "checksum": "5768b2c7a013bf43318f4efd926fe1bd0ac694e773800182595755cf87f56d9c"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record is a day in an account and its accumulated balance totals based on all line item transactions up to that day.", "columns": {"account_daily_id": {"name": "account_daily_id", "description": "Unique account key, based on account id and date of balance data.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Creation date for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Date compiled line item transactions by day for this account balance took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_week": {"name": "date_week", "description": "Date compiled line item transactions by week for this account balance took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_month": {"name": "date_month", "description": "Date compiled line item transactions by month for this account balance took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_year": {"name": "date_year", "description": "Date compiled line item transactions by year for this account balance took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_index": {"name": "date_index", "description": "The nth date in the transaction model.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_created_at": {"name": "account_created_at", "description": "Timestamp of when the account entry was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Account name as displayed in Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "Unique account number assigned to the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_status": {"name": "account_status", "description": "Status of the account in the system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_country": {"name": "account_country", "description": "The country of the contact's address associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_email": {"name": "account_email", "description": "The business email address of the contact associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_first_name": {"name": "account_first_name", "description": "The first name of the contact associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_last_name": {"name": "account_last_name", "description": "The last name of the contact associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_postal_code": {"name": "account_postal_code", "description": "The zip code of the contact associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_state": {"name": "account_state", "description": "The state of the contact associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_charge_processed_at": {"name": "first_charge_processed_at", "description": "Time at which the first charge on the account is processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_invoices": {"name": "daily_invoices", "description": "Number of invoices that day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_invoice_items": {"name": "daily_invoice_items", "description": "Number of invoice items that day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_invoice_amount": {"name": "daily_invoice_amount", "description": "Total amount of the invoices that day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_invoice_amount_paid": {"name": "daily_invoice_amount_paid", "description": "Total amount of the invoices paid that day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_invoice_amount_unpaid": {"name": "daily_invoice_amount_unpaid", "description": "Total amount of the invoices unpaid that day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_tax_amount": {"name": "daily_tax_amount", "description": "Total amount of the taxes that day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_credit_balance_adjustment_amount": {"name": "daily_credit_balance_adjustment_amount", "description": "Total amount of the credit balance adjustments that day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_discount_charges": {"name": "daily_discount_charges", "description": "Total amount of the discount charges that day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_refunds": {"name": "daily_refunds", "description": "Total amount of the refunds that day for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_invoices": {"name": "rolling_invoices", "description": "Number of invoices on this account since it was created to the current date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_invoice_items": {"name": "rolling_invoice_items", "description": "Number of invoice items on this account since it was created to the current date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_invoice_amount": {"name": "rolling_invoice_amount", "description": "Accumulated invoice amount based on totalled invoice amounts up to the current date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_invoice_amount_paid": {"name": "rolling_invoice_amount_paid", "description": "Accumulated invoice amount paid based on totalled invoice amounts paid up to the current date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_invoice_amount_unpaid": {"name": "rolling_invoice_amount_unpaid", "description": "Accumulated invoice amount unpaid based on totalled invoice amounts unpaid up to the current date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_tax_amount": {"name": "rolling_tax_amount", "description": "Accumulated taxes based on totalled taxes up to the current date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_credit_balance_adjustment_amount": {"name": "rolling_credit_balance_adjustment_amount", "description": "Accumulated credit balance adjustments based on totalled credit balances up to the current date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_discount_charges": {"name": "rolling_discount_charges", "description": "Accumulated discount charges based on totalled discount charges up to the current date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_refunds": {"name": "rolling_refunds", "description": "Accumulated refunds based on totalled refunds up to the current date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora://models/zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.346102, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"zuora__account_daily_overview\"", "raw_code": "{% set round_cols = ['invoice_amount', 'invoice_amount_paid', 'invoice_amount_unpaid', 'discount_charges', 'refunds'] %}\n{% do round_cols.append('tax_amount') if var('zuora__using_taxation_item', true) %}\n{% do round_cols.append('credit_balance_adjustment_amount') if var('zuora__using_credit_balance_adjustment', true) %}\n\nwith account_running_totals as (\n\n    select *\n    from {{ ref('int_zuora__account_running_totals') }}\n),\n\naccount_overview as (\n\n    select * \n    from {{ ref('zuora__account_overview') }}\n),\n\naccount_daily_overview as (\n\n    select \n        account_running_totals.account_daily_id,\n        account_running_totals.account_id,\n        account_running_totals.date_day,        \n        account_running_totals.date_week, \n        account_running_totals.date_month, \n        account_running_totals.date_year,  \n        account_running_totals.date_index,  \n        account_overview.account_created_at,\n        account_overview.account_name,\n        account_overview.account_number,\n        account_overview.account_status,\n        account_overview.account_country,\n        account_overview.account_email,\n        account_overview.account_first_name,\n        account_overview.account_last_name,\n        account_overview.account_postal_code,\n        account_overview.account_state, \n        account_overview.first_charge_processed_at\n        \n        {{ fivetran_utils.persist_pass_through_columns('zuora_account_pass_through_columns', identifier='account_overview') }},\n\n        account_running_totals.daily_invoices,\n        account_running_totals.daily_invoice_items,\n\n        {% for col in round_cols %}\n            round(cast(daily_{{ col }} as {{ dbt.type_numeric() }}), 2) as daily_{{ col }},\n        {% endfor %}\n\n        account_running_totals.rolling_invoices,\n        account_running_totals.rolling_invoice_items,\n\n        {% for col in round_cols %}\n            round(cast(rolling_{{ col }} as {{ dbt.type_numeric() }}), 2) as rolling_{{ col }}\n            {{ ',' if not loop.last }}\n        {% endfor %}\n\n    from account_running_totals\n    left join account_overview\n        on account_running_totals.account_id = account_overview.account_id\n)\n\nselect * \nfrom account_daily_overview", "language": "sql", "refs": [{"name": "int_zuora__account_running_totals", "package": null, "version": null}, {"name": "zuora__account_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.persist_pass_through_columns", "macro.dbt.type_numeric"], "nodes": ["model.zuora.int_zuora__account_running_totals", "model.zuora.zuora__account_overview"]}, "compiled_path": "target/compiled/zuora/models/zuora__account_daily_overview.sql", "compiled": true, "compiled_code": "\n\n\n\nwith account_running_totals as (\n\n    select *\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__account_running_totals\"\n),\n\naccount_overview as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__account_overview\"\n),\n\naccount_daily_overview as (\n\n    select \n        account_running_totals.account_daily_id,\n        account_running_totals.account_id,\n        account_running_totals.date_day,        \n        account_running_totals.date_week, \n        account_running_totals.date_month, \n        account_running_totals.date_year,  \n        account_running_totals.date_index,  \n        account_overview.account_created_at,\n        account_overview.account_name,\n        account_overview.account_number,\n        account_overview.account_status,\n        account_overview.account_country,\n        account_overview.account_email,\n        account_overview.account_first_name,\n        account_overview.account_last_name,\n        account_overview.account_postal_code,\n        account_overview.account_state, \n        account_overview.first_charge_processed_at\n        \n        \n\n\n\n,\n\n        account_running_totals.daily_invoices,\n        account_running_totals.daily_invoice_items,\n\n        \n            round(cast(daily_invoice_amount as numeric(28,6)), 2) as daily_invoice_amount,\n        \n            round(cast(daily_invoice_amount_paid as numeric(28,6)), 2) as daily_invoice_amount_paid,\n        \n            round(cast(daily_invoice_amount_unpaid as numeric(28,6)), 2) as daily_invoice_amount_unpaid,\n        \n            round(cast(daily_discount_charges as numeric(28,6)), 2) as daily_discount_charges,\n        \n            round(cast(daily_refunds as numeric(28,6)), 2) as daily_refunds,\n        \n            round(cast(daily_tax_amount as numeric(28,6)), 2) as daily_tax_amount,\n        \n            round(cast(daily_credit_balance_adjustment_amount as numeric(28,6)), 2) as daily_credit_balance_adjustment_amount,\n        \n\n        account_running_totals.rolling_invoices,\n        account_running_totals.rolling_invoice_items,\n\n        \n            round(cast(rolling_invoice_amount as numeric(28,6)), 2) as rolling_invoice_amount\n            ,\n        \n            round(cast(rolling_invoice_amount_paid as numeric(28,6)), 2) as rolling_invoice_amount_paid\n            ,\n        \n            round(cast(rolling_invoice_amount_unpaid as numeric(28,6)), 2) as rolling_invoice_amount_unpaid\n            ,\n        \n            round(cast(rolling_discount_charges as numeric(28,6)), 2) as rolling_discount_charges\n            ,\n        \n            round(cast(rolling_refunds as numeric(28,6)), 2) as rolling_refunds\n            ,\n        \n            round(cast(rolling_tax_amount as numeric(28,6)), 2) as rolling_tax_amount\n            ,\n        \n            round(cast(rolling_credit_balance_adjustment_amount as numeric(28,6)), 2) as rolling_credit_balance_adjustment_amount\n            \n        \n\n    from account_running_totals\n    left join account_overview\n        on account_running_totals.account_id = account_overview.account_id\n)\n\nselect * \nfrom account_daily_overview", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora.zuora__line_item_history": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "zuora__line_item_history", "resource_type": "model", "package_name": "zuora", "path": "zuora__line_item_history.sql", "original_file_path": "models/zuora__line_item_history.sql", "unique_id": "model.zuora.zuora__line_item_history", "fqn": ["zuora", "zuora__line_item_history"], "alias": "zuora__line_item_history", "checksum": {"name": "sha256", "checksum": "4035135c6fcbd682b94682d235ec8523144789751f6b6a76309ae6204da7ba4d"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record is an invoice item meant to provide all details on all transactions at the most granular level, with details being brought in from subscriptions, amendments, rate plan charges, products, subscriptions, amendments and more.", "columns": {"invoice_item_id": {"name": "invoice_item_id", "description": "The unique identifier of the invoice item table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Identifier of the account associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_creation_day": {"name": "account_creation_day", "description": "Day the account associated with the line item was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_status": {"name": "account_status", "description": "Status of the account associated with the line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "Amendment identifier associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Balance of the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "Amount charged for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_amount_home_currency": {"name": "charge_amount_home_currency", "description": "Amount charged for the invoice item in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_date": {"name": "charge_date", "description": "Date on which the charge for the invoice item was made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_day": {"name": "charge_day", "description": "Day on which the charge for the invoice item was made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_week": {"name": "charge_week", "description": "Week on which the charge for the invoice item was made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_month": {"name": "charge_month", "description": "Month on which the charge for the invoice item was made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_name": {"name": "charge_name", "description": "Name on which the charge for the invoice item was made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_amount": {"name": "discount_amount", "description": "Discount amount applied for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_amount_home_currency": {"name": "discount_amount_home_currency", "description": "Discount amount applied for the invoice item in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_charge_day": {"name": "first_charge_day", "description": "First charge day for the account associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Home currency the customer is billed in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The identifier for the invoice associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The identifier for the product associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The identifier for the product rate plan associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "The identifier for the product rate plan charge associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate_plan_charge_id": {"name": "rate_plan_charge_id", "description": "The identifier for the rate plan charge associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_start_day": {"name": "service_start_day", "description": "Start date of the service associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_start_week": {"name": "service_start_week", "description": "Start week of the service associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_start_month": {"name": "service_start_month", "description": "Start month of the service associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_end_date": {"name": "service_end_date", "description": "End date of the service associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sku": {"name": "sku", "description": "SKU of the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The tax amount for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount_home_currency": {"name": "tax_amount_home_currency", "description": "The tax amount for the invoice item in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "Transaction currency the customer is billed in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "The unit price for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uom": {"name": "uom", "description": "The unit of measure for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "The unique identification number for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_date": {"name": "invoice_date", "description": "Specifies the date on which to generate the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_due_date": {"name": "invoice_due_date", "description": "The due date of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_auto_renew": {"name": "subscription_auto_renew", "description": "Indicates whether the subscription is set to automatically renew at the end of the term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_cancel_reason": {"name": "subscription_cancel_reason", "description": "The reason for cancelling the subscription, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_cancel_date": {"name": "subscription_cancel_date", "description": "The date on which the subscription was cancelled, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_service_activation_date": {"name": "subscription_service_activation_date", "description": "The date the subscription was activated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_status": {"name": "subscription_status", "description": "The status of the subscription associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_start_date": {"name": "subscription_start_date", "description": "The start date of the subscription associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_end_date": {"name": "subscription_end_date", "description": "The end date of the subscription associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_term_start_date": {"name": "subscription_term_start_date", "description": "The start date of the subscription term associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_term_end_date": {"name": "subscription_term_end_date", "description": "The end date of the subscription term associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_term_type": {"name": "subscription_term_type", "description": "The type of subscription term associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_version": {"name": "subscription_version", "description": "The version number of the subscription for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate_plan_charge_name": {"name": "rate_plan_charge_name", "description": "The name of the rate plan charge associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_billing_period": {"name": "charge_billing_period", "description": "The billing period for the charge associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_billing_timing": {"name": "charge_billing_timing", "description": "The timing of the charge for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_model": {"name": "charge_model", "description": "The model used to calculate the charge for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_type": {"name": "charge_type", "description": "The type of charge for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_effective_start_date": {"name": "charge_effective_start_date", "description": "The date on which the rate plan charge goes into effect for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_effective_end_date": {"name": "charge_effective_end_date", "description": "The date on which the rate plan charge is no longer in effect for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_segment": {"name": "charge_segment", "description": "The segment associated with the rate plan charge for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_mrr": {"name": "charge_mrr", "description": "The monthly recurring revenue of the rate plan charge for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_mrr_home_currency": {"name": "charge_mrr_home_currency", "description": "The monthly recurring revenue of the rate plan charge in the home currency for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_name": {"name": "amendment_name", "description": "The name of the amendment associated with the invoice item..", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_type": {"name": "amendment_type", "description": "The type of the amendment associated with the invoice item..", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_status": {"name": "amendment_status", "description": "The status of the amendment associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "The name of the product associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_category": {"name": "product_category", "description": "The category of the product associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_description": {"name": "product_description", "description": "The description of the product associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_start_date": {"name": "product_start_date", "description": "The date when the product becomes available for purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_end_date": {"name": "product_end_date", "description": "The date when the product is no longer available for purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_name": {"name": "product_rate_plan_name", "description": "The name of the product rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_description": {"name": "product_rate_plan_description", "description": "A brief description of the product rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross_revenue": {"name": "gross_revenue", "description": "The charge amount for the invoice item, accumulated as revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_revenue": {"name": "discount_revenue", "description": "The discount amount applied to the invoice item, accumulated as revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_revenue": {"name": "net_revenue", "description": "The difference between the gross and the discount revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora://models/zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.371049, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"zuora__line_item_history\"", "raw_code": "with invoice_item_enhanced as (\n\n    select *,\n        cast({{ dbt.date_trunc(\"day\", \"charge_date\") }} as date) as charge_day,\n        cast({{ dbt.date_trunc(\"week\", \"charge_date\") }} as date) as charge_week,\n        cast({{ dbt.date_trunc(\"month\", \"charge_date\") }} as date) as charge_month,\n        case when cast(processing_type as {{ dbt.type_string() }}) = '1' \n            then charge_amount_home_currency else 0 end as discount_amount_home_currency,\n        case when cast(processing_type as {{ dbt.type_string() }}) = '1' \n            then charge_amount else 0 end as discount_amount,\n        cast({{ dbt.date_trunc(\"day\", \"service_start_date\") }} as date) as service_start_day,\n        cast({{ dbt.date_trunc(\"week\", \"service_start_date\") }} as date) as service_start_week,\n        cast({{ dbt.date_trunc(\"month\", \"service_start_date\") }} as date) as service_start_month\n    from {{ var('invoice_item') }}\n    where is_most_recent_record \n),\n\ninvoice as (\n\n    select * \n    from {{ var('invoice') }}\n    where is_most_recent_record \n),\n\nproduct as (\n\n    select * \n    from {{ var('product') }}\n    where is_most_recent_record\n),\n\nproduct_rate_plan as (\n\n    select * \n    from {{ var('product_rate_plan') }} \n    where is_most_recent_record\n),\n\nproduct_rate_plan_charge as (\n\n    select * \n    from {{ var('product_rate_plan_charge') }} \n    where is_most_recent_record\n), \n\nrate_plan_charge as (\n\n    select * \n    from {{ var('rate_plan_charge') }} \n    where is_most_recent_record\n), \n\nsubscription as (\n\n    select *\n    from {{ var('subscription') }} \n    where is_most_recent_record\n),\n\namendment as (\n\n    select *\n    from {{ var('amendment') }} \n    where is_most_recent_record\n),\n\n{% if var('zuora__using_taxation_item', true) %}\ntaxation_item as (\n\n    select \n        invoice_item_id,\n        sum(tax_amount_home_currency) as tax_amount_home_currency\n    from {{ var('taxation_item') }}\n    where is_most_recent_record\n    group by 1\n), \n{% endif %}\n\naccount_enhanced as (\n\n    select  \n        account_id,\n        cast({{ dbt.date_trunc(\"day\", \"account_created_at\") }} as date) as account_creation_day, \n        cast({{ dbt.date_trunc(\"day\", \"first_charge_processed_at\") }} as date) as first_charge_day,\n        account_status\n    from {{ ref('zuora__account_daily_overview') }}\n    {{ dbt_utils.group_by(4) }}\n),\n\ninvoice_revenue_items as (\n\n    select\n        invoice_item_id, \n        {% if var('zuora__using_multicurrency', false) %}\n        charge_amount as gross_revenue,\n        case when cast(processing_type as {{ dbt.type_string() }})= '1' \n            then charge_amount else 0 end as discount_revenue\n        {% else %} \n        charge_amount_home_currency as gross_revenue,\n        case when cast(processing_type as {{ dbt.type_string() }})= '1' \n            then charge_amount_home_currency else 0 end as discount_revenue\n        {% endif %}\n    from invoice_item_enhanced\n),\n\n\nline_item_history as (\n\n    select \n        invoice_item_enhanced.invoice_item_id, \n        invoice_item_enhanced.account_id,  \n        account_enhanced.account_creation_day, \n        account_enhanced.account_status,\n        invoice_item_enhanced.amendment_id,\n        invoice_item_enhanced.balance,\n        invoice_item_enhanced.charge_amount,\n        invoice_item_enhanced.charge_amount_home_currency,\n        invoice_item_enhanced.charge_date,\n        invoice_item_enhanced.charge_day,\n        invoice_item_enhanced.charge_week,\n        invoice_item_enhanced.charge_month,\n        invoice_item_enhanced.charge_name,\n        invoice_item_enhanced.discount_amount,\n        invoice_item_enhanced.discount_amount_home_currency,\n        account_enhanced.first_charge_day,\n        invoice_item_enhanced.home_currency,\n        invoice_item_enhanced.invoice_id,\n        invoice_item_enhanced.product_id,\n        invoice_item_enhanced.product_rate_plan_id,\n        invoice_item_enhanced.product_rate_plan_charge_id,\n        invoice_item_enhanced.rate_plan_charge_id,\n        invoice_item_enhanced.service_start_day,\n        invoice_item_enhanced.service_start_week,\n        invoice_item_enhanced.service_start_month,\n        invoice_item_enhanced.service_end_date,\n        invoice_item_enhanced.subscription_id,\n        invoice_item_enhanced.sku,\n        invoice_item_enhanced.tax_amount,\n\n        {% if var('zuora__using_taxation_item', true) %}\n        taxation_item.tax_amount_home_currency,\n        {% endif %}\n\n        invoice_item_enhanced.transaction_currency,\n        invoice_item_enhanced.unit_price,\n        invoice_item_enhanced.uom,\n        invoice.invoice_number,\n        invoice.invoice_date,\n        invoice.due_date as invoice_due_date,   \n        subscription.auto_renew as subscription_auto_renew,\n        subscription.cancel_reason as subscription_cancel_reason,\n        subscription.cancelled_date as subscription_cancel_date, \n        subscription.service_activation_date as subscription_service_activation_date,\n        subscription.status as subscription_status,\n        subscription.subscription_start_date,\n        subscription.subscription_end_date,\n        subscription.term_start_date as subscription_term_start_date,\n        subscription.term_end_date as subscription_term_end_date,\n        subscription.term_type as subscription_term_type,\n        subscription.version as subscription_version,\n        rate_plan_charge.name as rate_plan_charge_name,\n        rate_plan_charge.billing_period as charge_billing_period,\n        rate_plan_charge.billing_timing as charge_billing_timing,\n        rate_plan_charge.charge_model as charge_model,\n        rate_plan_charge.charge_type as charge_type,\n        rate_plan_charge.effective_start_date as charge_effective_start_date,\n        rate_plan_charge.effective_end_date as charge_effective_end_date,\n        rate_plan_charge.segment as charge_segment,\n        rate_plan_charge.mrr as charge_mrr,\n        rate_plan_charge.mrrhome_currency as charge_mrr_home_currency,\n        amendment.name as amendment_name,\n        amendment.type as amendment_type,\n        amendment.status as amendment_status,\n        product.name as product_name,\n        product.category as product_category,\n        product.description as product_description,\n        product.effective_start_date as product_start_date,\n        product.effective_end_date as product_end_date, \n        product_rate_plan.name as product_rate_plan_name,\n        product_rate_plan.description as product_rate_plan_description,\n        invoice_revenue_items.gross_revenue,\n        invoice_revenue_items.discount_revenue,\n        invoice_revenue_items.gross_revenue - invoice_revenue_items.discount_revenue as net_revenue\n\n        {{ fivetran_utils.persist_pass_through_columns('zuora_subscription_pass_through_columns', identifier='subscription') }}\n\n        {{ fivetran_utils.persist_pass_through_columns('zuora_rate_plan_charge_pass_through_columns', identifier='rate_plan_charge') }}\n\n    from invoice_item_enhanced\n        left join invoice\n            on invoice_item_enhanced.invoice_id = invoice.invoice_id\n        left join subscription\n            on invoice_item_enhanced.subscription_id = subscription.subscription_id\n        left join rate_plan_charge \n            on invoice_item_enhanced.rate_plan_charge_id = rate_plan_charge.rate_plan_charge_id\n        left join amendment\n            on invoice_item_enhanced.amendment_id = amendment.amendment_id\n        left join product\n            on invoice_item_enhanced.product_id = product.product_id\n        left join product_rate_plan\n            on invoice_item_enhanced.product_rate_plan_id = product_rate_plan.product_rate_plan_id \n        left join account_enhanced\n            on invoice_item_enhanced.account_id = account_enhanced.account_id\n        left join invoice_revenue_items\n            on invoice_item_enhanced.invoice_item_id = invoice_revenue_items.invoice_item_id\n        \n        {% if var('zuora__using_taxation_item', true) %}\n        left join taxation_item \n            on invoice_item_enhanced.invoice_item_id = taxation_item.invoice_item_id\n        {% endif %}\n)\n\nselect * \nfrom line_item_history", "language": "sql", "refs": [{"name": "stg_zuora__invoice_item", "package": null, "version": null}, {"name": "stg_zuora__invoice", "package": null, "version": null}, {"name": "stg_zuora__product", "package": null, "version": null}, {"name": "stg_zuora__product_rate_plan", "package": null, "version": null}, {"name": "stg_zuora__product_rate_plan_charge", "package": null, "version": null}, {"name": "stg_zuora__rate_plan_charge", "package": null, "version": null}, {"name": "stg_zuora__subscription", "package": null, "version": null}, {"name": "stg_zuora__amendment", "package": null, "version": null}, {"name": "stg_zuora__taxation_item", "package": null, "version": null}, {"name": "zuora__account_daily_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.type_string", "macro.dbt_utils.group_by", "macro.fivetran_utils.persist_pass_through_columns"], "nodes": ["model.zuora_source.stg_zuora__invoice_item", "model.zuora_source.stg_zuora__invoice", "model.zuora_source.stg_zuora__product", "model.zuora_source.stg_zuora__product_rate_plan", "model.zuora_source.stg_zuora__product_rate_plan_charge", "model.zuora_source.stg_zuora__rate_plan_charge", "model.zuora_source.stg_zuora__subscription", "model.zuora_source.stg_zuora__amendment", "model.zuora_source.stg_zuora__taxation_item", "model.zuora.zuora__account_daily_overview"]}, "compiled_path": "target/compiled/zuora/models/zuora__line_item_history.sql", "compiled": true, "compiled_code": "with invoice_item_enhanced as (\n\n    select *,\n        cast(date_trunc('day', charge_date) as date) as charge_day,\n        cast(date_trunc('week', charge_date) as date) as charge_week,\n        cast(date_trunc('month', charge_date) as date) as charge_month,\n        case when cast(processing_type as TEXT) = '1' \n            then charge_amount_home_currency else 0 end as discount_amount_home_currency,\n        case when cast(processing_type as TEXT) = '1' \n            then charge_amount else 0 end as discount_amount,\n        cast(date_trunc('day', service_start_date) as date) as service_start_day,\n        cast(date_trunc('week', service_start_date) as date) as service_start_week,\n        cast(date_trunc('month', service_start_date) as date) as service_start_month\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice_item\"\n    where is_most_recent_record \n),\n\ninvoice as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice\"\n    where is_most_recent_record \n),\n\nproduct as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product\"\n    where is_most_recent_record\n),\n\nproduct_rate_plan as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product_rate_plan\" \n    where is_most_recent_record\n),\n\nproduct_rate_plan_charge as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product_rate_plan_charge\" \n    where is_most_recent_record\n), \n\nrate_plan_charge as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__rate_plan_charge\" \n    where is_most_recent_record\n), \n\nsubscription as (\n\n    select *\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__subscription\" \n    where is_most_recent_record\n),\n\namendment as (\n\n    select *\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__amendment\" \n    where is_most_recent_record\n),\n\n\ntaxation_item as (\n\n    select \n        invoice_item_id,\n        sum(tax_amount_home_currency) as tax_amount_home_currency\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__taxation_item\"\n    where is_most_recent_record\n    group by 1\n), \n\n\naccount_enhanced as (\n\n    select  \n        account_id,\n        cast(date_trunc('day', account_created_at) as date) as account_creation_day, \n        cast(date_trunc('day', first_charge_processed_at) as date) as first_charge_day,\n        account_status\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__account_daily_overview\"\n    group by 1,2,3,4\n),\n\ninvoice_revenue_items as (\n\n    select\n        invoice_item_id, \n         \n        charge_amount_home_currency as gross_revenue,\n        case when cast(processing_type as TEXT)= '1' \n            then charge_amount_home_currency else 0 end as discount_revenue\n        \n    from invoice_item_enhanced\n),\n\n\nline_item_history as (\n\n    select \n        invoice_item_enhanced.invoice_item_id, \n        invoice_item_enhanced.account_id,  \n        account_enhanced.account_creation_day, \n        account_enhanced.account_status,\n        invoice_item_enhanced.amendment_id,\n        invoice_item_enhanced.balance,\n        invoice_item_enhanced.charge_amount,\n        invoice_item_enhanced.charge_amount_home_currency,\n        invoice_item_enhanced.charge_date,\n        invoice_item_enhanced.charge_day,\n        invoice_item_enhanced.charge_week,\n        invoice_item_enhanced.charge_month,\n        invoice_item_enhanced.charge_name,\n        invoice_item_enhanced.discount_amount,\n        invoice_item_enhanced.discount_amount_home_currency,\n        account_enhanced.first_charge_day,\n        invoice_item_enhanced.home_currency,\n        invoice_item_enhanced.invoice_id,\n        invoice_item_enhanced.product_id,\n        invoice_item_enhanced.product_rate_plan_id,\n        invoice_item_enhanced.product_rate_plan_charge_id,\n        invoice_item_enhanced.rate_plan_charge_id,\n        invoice_item_enhanced.service_start_day,\n        invoice_item_enhanced.service_start_week,\n        invoice_item_enhanced.service_start_month,\n        invoice_item_enhanced.service_end_date,\n        invoice_item_enhanced.subscription_id,\n        invoice_item_enhanced.sku,\n        invoice_item_enhanced.tax_amount,\n\n        \n        taxation_item.tax_amount_home_currency,\n        \n\n        invoice_item_enhanced.transaction_currency,\n        invoice_item_enhanced.unit_price,\n        invoice_item_enhanced.uom,\n        invoice.invoice_number,\n        invoice.invoice_date,\n        invoice.due_date as invoice_due_date,   \n        subscription.auto_renew as subscription_auto_renew,\n        subscription.cancel_reason as subscription_cancel_reason,\n        subscription.cancelled_date as subscription_cancel_date, \n        subscription.service_activation_date as subscription_service_activation_date,\n        subscription.status as subscription_status,\n        subscription.subscription_start_date,\n        subscription.subscription_end_date,\n        subscription.term_start_date as subscription_term_start_date,\n        subscription.term_end_date as subscription_term_end_date,\n        subscription.term_type as subscription_term_type,\n        subscription.version as subscription_version,\n        rate_plan_charge.name as rate_plan_charge_name,\n        rate_plan_charge.billing_period as charge_billing_period,\n        rate_plan_charge.billing_timing as charge_billing_timing,\n        rate_plan_charge.charge_model as charge_model,\n        rate_plan_charge.charge_type as charge_type,\n        rate_plan_charge.effective_start_date as charge_effective_start_date,\n        rate_plan_charge.effective_end_date as charge_effective_end_date,\n        rate_plan_charge.segment as charge_segment,\n        rate_plan_charge.mrr as charge_mrr,\n        rate_plan_charge.mrrhome_currency as charge_mrr_home_currency,\n        amendment.name as amendment_name,\n        amendment.type as amendment_type,\n        amendment.status as amendment_status,\n        product.name as product_name,\n        product.category as product_category,\n        product.description as product_description,\n        product.effective_start_date as product_start_date,\n        product.effective_end_date as product_end_date, \n        product_rate_plan.name as product_rate_plan_name,\n        product_rate_plan.description as product_rate_plan_description,\n        invoice_revenue_items.gross_revenue,\n        invoice_revenue_items.discount_revenue,\n        invoice_revenue_items.gross_revenue - invoice_revenue_items.discount_revenue as net_revenue\n\n        \n\n\n\n\n\n        \n\n\n\n\n\n    from invoice_item_enhanced\n        left join invoice\n            on invoice_item_enhanced.invoice_id = invoice.invoice_id\n        left join subscription\n            on invoice_item_enhanced.subscription_id = subscription.subscription_id\n        left join rate_plan_charge \n            on invoice_item_enhanced.rate_plan_charge_id = rate_plan_charge.rate_plan_charge_id\n        left join amendment\n            on invoice_item_enhanced.amendment_id = amendment.amendment_id\n        left join product\n            on invoice_item_enhanced.product_id = product.product_id\n        left join product_rate_plan\n            on invoice_item_enhanced.product_rate_plan_id = product_rate_plan.product_rate_plan_id \n        left join account_enhanced\n            on invoice_item_enhanced.account_id = account_enhanced.account_id\n        left join invoice_revenue_items\n            on invoice_item_enhanced.invoice_item_id = invoice_revenue_items.invoice_item_id\n        \n        \n        left join taxation_item \n            on invoice_item_enhanced.invoice_item_id = taxation_item.invoice_item_id\n        \n)\n\nselect * \nfrom line_item_history", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora.zuora__subscription_overview": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "zuora__subscription_overview", "resource_type": "model", "package_name": "zuora", "path": "zuora__subscription_overview.sql", "original_file_path": "models/zuora__subscription_overview.sql", "unique_id": "model.zuora.zuora__subscription_overview", "fqn": ["zuora", "zuora__subscription_overview"], "alias": "zuora__subscription_overview", "checksum": {"name": "sha256", "checksum": "edaacb3dbad1c4547a38783bbcfe1ae8d942a38927cbccddb70e2c42ffac6bbb"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record is a subscription, enhanced with additional details from rate plan charges and amendments.", "columns": {"subscription_key": {"name": "subscription_key", "description": "The unique subscription key, defined by subscription id, rate plan charge id, and amendment id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The unique identifier for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier for the account associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "The account name associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auto_renew": {"name": "auto_renew", "description": "Indicates whether the subscription is set to automatically renew at the end of the term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancel_reason": {"name": "cancel_reason", "description": "The reason for cancelling the subscription, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancelled_date": {"name": "cancelled_date", "description": "The date on which the subscription was cancelled, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term": {"name": "current_term", "description": "The length of the current subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term_period_type": {"name": "current_term_period_type", "description": "The unit of time for the current subscription term (e.g. \"Month\", \"Year\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "initial_term": {"name": "initial_term", "description": "The length of the initial subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "initial_term_period_type": {"name": "initial_term_period_type", "description": "The unit of time for the initial subscription term (e.g. \"Month\", \"Year\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Indicates whether the subscription is the latest version of the subscription on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "previous_subscription_id": {"name": "previous_subscription_id", "description": "The unique identifier for the previous subscription associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_term": {"name": "renewal_term", "description": "The length of the renewal subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_term_period_type": {"name": "renewal_term_period_type", "description": "The type of the renewal term for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_activation_date": {"name": "service_activation_date", "description": "The date the subscription was activated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_start_date": {"name": "subscription_start_date", "description": "The start date of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_end_date": {"name": "subscription_end_date", "description": "The end date of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_start_date": {"name": "term_start_date", "description": "The start date of the subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_end_date": {"name": "term_end_date", "description": "The end date of the subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_type": {"name": "term_type", "description": "The type of subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "version": {"name": "version", "description": "The version number of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate_plan_charge_id": {"name": "rate_plan_charge_id", "description": "The identifier for the rate plan charge associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate_plan_charge_name": {"name": "rate_plan_charge_name", "description": "The name of the rate plan charge associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_billing_period": {"name": "charge_billing_period", "description": "The billing period for the charge associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_billing_timing": {"name": "charge_billing_timing", "description": "The billing timing for the charge associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_model": {"name": "charge_model", "description": "The model used to calculate the charge associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_type": {"name": "charge_type", "description": "TThe type of charge associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charged_through_date": {"name": "charged_through_date", "description": "The date through which the charge has been charged on the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_effective_start_date": {"name": "charge_effective_start_date", "description": "The date on which the rate plan charge goes into effect on the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_effective_end_date": {"name": "charge_effective_end_date", "description": "The date on which the rate plan charge is no longer in effect on the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_mrr": {"name": "charge_mrr", "description": "The monthly recurring revenue of the rate plan charge associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_mrr_home_currency": {"name": "charge_mrr_home_currency", "description": "The monthly recurring revenue of the rate plan charge in the home currency associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "The id of the amendment associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_name": {"name": "amendment_name", "description": "The name of the amendment associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_booking_date": {"name": "amendment_booking_date", "description": "The date when the amendment is signed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_creation_date": {"name": "amendment_creation_date", "description": "Creation date for the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_type": {"name": "amendment_type", "description": "The type of amendment associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_status": {"name": "amendment_status", "description": "The status of the amendment associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_contract_date": {"name": "amendment_contract_date", "description": "The date when the amendment's changes become effective for billing purposes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_activation_date": {"name": "amendment_activation_date", "description": "The date when service is activated for the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term_days": {"name": "current_term_days", "description": "The length of the current term of the subscription in days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "initial_term_days": {"name": "initial_term_days", "description": "The length of the initial term of the subscription in days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_term_days": {"name": "renewal_term_days", "description": "The length of the renewal term of the subscription in days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_days": {"name": "subscription_days", "description": "The length of the subscription in days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_days": {"name": "term_days", "description": "The length of the subscription term in days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora://models/zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.379627, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"zuora__subscription_overview\"", "raw_code": "with subscription as (\n\n    select *\n    from {{ var('subscription') }}  \n    where is_most_recent_record\n),\n\nrate_plan_charge as (\n\n    select * \n    from {{ var('rate_plan_charge') }}\n    where is_most_recent_record\n),\n\namendment as (\n\n    select *\n    from {{ var('amendment') }}\n    where is_most_recent_record\n),\n\n\naccount_overview as (\n\n    select \n        account_id,\n        account_name\n    from {{ ref('zuora__account_overview') }} \n),\n\nsubscription_overview as (\n\n    select  \n        {{ dbt_utils.generate_surrogate_key(['subscription.subscription_id', 'rate_plan_charge.rate_plan_charge_id', 'amendment.amendment_id']) }} as subscription_key,\n        subscription.subscription_id,\n        subscription.account_id,\n        account_overview.account_name,\n        subscription.auto_renew,\n        subscription.cancel_reason,\n        subscription.cancelled_date,\n        subscription.current_term, \n        subscription.current_term_period_type, \n        subscription.initial_term,\n        subscription.initial_term_period_type, \n        subscription.is_latest_version,\n        subscription.previous_subscription_id,\n        subscription.renewal_term,\n        subscription.renewal_term_period_type,\n        subscription.service_activation_date,\n        subscription.status,\n        subscription.subscription_start_date,\n        subscription.subscription_end_date,\n        subscription.term_start_date,\n        subscription.term_end_date,\n        subscription.term_type,\n        subscription.version,\n        rate_plan_charge.rate_plan_charge_id, \n        rate_plan_charge.name as rate_plan_charge_name,\n        rate_plan_charge.billing_period as charge_billing_period,\n        rate_plan_charge.billing_timing as charge_billing_timing,\n        rate_plan_charge.charge_model,\n        rate_plan_charge.charge_type,\n        rate_plan_charge.charged_through_date,\n        rate_plan_charge.effective_start_date as charge_effective_start_date,\n        rate_plan_charge.effective_end_date as charge_effective_end_date,\n        rate_plan_charge.mrr as charge_mrr,\n        rate_plan_charge.mrrhome_currency as charge_mrr_home_currency,\n        amendment.amendment_id,\n        amendment.name as amendment_name,\n        amendment.booking_date as amendment_booking_date,\n        amendment.created_date as amendment_creation_date,\n        amendment.type as amendment_type,\n        amendment.status as amendment_status,\n        amendment.contract_effective_date as amendment_contract_date,\n        amendment.service_activation_date as amendment_activation_date,\n\n        {% set interval_cols = ['current_term', 'initial_term', 'renewal_term'] %}\n        {% for interval_col in interval_cols %}\n        case when subscription.{{ interval_col }}_period_type = 'Week' then 7 * subscription.{{ interval_col }}\n            when subscription.{{ interval_col }}_period_type = 'Month' then 30 * subscription.{{ interval_col }}\n            when subscription.{{ interval_col }}_period_type = 'Year' then 365 * subscription.{{ interval_col }}\n            else subscription.{{ interval_col }} \n            end as {{ interval_col }}_days,\n        {% endfor %}\n\n        {% set date_cols = ['subscription', 'term'] %}\n        {% for date_col in date_cols %}\n        case when subscription.term_type = 'TERMED'\n            then {{ dbt.datediff('subscription.' ~ date_col ~ '_start_date', 'subscription.' ~ date_col ~ '_end_date', 'day') }} \n            when subscription.term_type = 'EVERGREEN' and subscription.cancelled_date is not null\n            then {{ dbt.datediff('subscription.' ~ date_col ~ '_start_date', 'subscription.cancelled_date', 'day') }}\n            else {{ dbt.datediff('subscription.' ~ date_col ~ '_start_date', dbt.current_timestamp_backcompat(), 'day') }}\n            end as {{ date_col }}_days\n        {{ ',' if not loop.last -}}\n        {% endfor %}\n\n        {{ fivetran_utils.persist_pass_through_columns('zuora_subscription_pass_through_columns', identifier='subscription') }}\n\n        {{ fivetran_utils.persist_pass_through_columns('zuora_rate_plan_charge_pass_through_columns', identifier='rate_plan_charge') }}\n\n    from subscription\n    left join rate_plan_charge\n        on subscription.subscription_id = rate_plan_charge.subscription_id\n    left join amendment\n        on subscription.subscription_id = amendment.subscription_id\n    left join account_overview \n        on subscription.account_id = account_overview.account_id\n)\n\nselect * \nfrom subscription_overview", "language": "sql", "refs": [{"name": "stg_zuora__subscription", "package": null, "version": null}, {"name": "stg_zuora__rate_plan_charge", "package": null, "version": null}, {"name": "stg_zuora__amendment", "package": null, "version": null}, {"name": "zuora__account_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.datediff", "macro.dbt.current_timestamp_backcompat", "macro.fivetran_utils.persist_pass_through_columns"], "nodes": ["model.zuora_source.stg_zuora__subscription", "model.zuora_source.stg_zuora__rate_plan_charge", "model.zuora_source.stg_zuora__amendment", "model.zuora.zuora__account_overview"]}, "compiled_path": "target/compiled/zuora/models/zuora__subscription_overview.sql", "compiled": true, "compiled_code": "with subscription as (\n\n    select *\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__subscription\"  \n    where is_most_recent_record\n),\n\nrate_plan_charge as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__rate_plan_charge\"\n    where is_most_recent_record\n),\n\namendment as (\n\n    select *\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__amendment\"\n    where is_most_recent_record\n),\n\n\naccount_overview as (\n\n    select \n        account_id,\n        account_name\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__account_overview\" \n),\n\nsubscription_overview as (\n\n    select  \n        md5(cast(coalesce(cast(subscription.subscription_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(rate_plan_charge.rate_plan_charge_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(amendment.amendment_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as subscription_key,\n        subscription.subscription_id,\n        subscription.account_id,\n        account_overview.account_name,\n        subscription.auto_renew,\n        subscription.cancel_reason,\n        subscription.cancelled_date,\n        subscription.current_term, \n        subscription.current_term_period_type, \n        subscription.initial_term,\n        subscription.initial_term_period_type, \n        subscription.is_latest_version,\n        subscription.previous_subscription_id,\n        subscription.renewal_term,\n        subscription.renewal_term_period_type,\n        subscription.service_activation_date,\n        subscription.status,\n        subscription.subscription_start_date,\n        subscription.subscription_end_date,\n        subscription.term_start_date,\n        subscription.term_end_date,\n        subscription.term_type,\n        subscription.version,\n        rate_plan_charge.rate_plan_charge_id, \n        rate_plan_charge.name as rate_plan_charge_name,\n        rate_plan_charge.billing_period as charge_billing_period,\n        rate_plan_charge.billing_timing as charge_billing_timing,\n        rate_plan_charge.charge_model,\n        rate_plan_charge.charge_type,\n        rate_plan_charge.charged_through_date,\n        rate_plan_charge.effective_start_date as charge_effective_start_date,\n        rate_plan_charge.effective_end_date as charge_effective_end_date,\n        rate_plan_charge.mrr as charge_mrr,\n        rate_plan_charge.mrrhome_currency as charge_mrr_home_currency,\n        amendment.amendment_id,\n        amendment.name as amendment_name,\n        amendment.booking_date as amendment_booking_date,\n        amendment.created_date as amendment_creation_date,\n        amendment.type as amendment_type,\n        amendment.status as amendment_status,\n        amendment.contract_effective_date as amendment_contract_date,\n        amendment.service_activation_date as amendment_activation_date,\n\n        \n        \n        case when subscription.current_term_period_type = 'Week' then 7 * subscription.current_term\n            when subscription.current_term_period_type = 'Month' then 30 * subscription.current_term\n            when subscription.current_term_period_type = 'Year' then 365 * subscription.current_term\n            else subscription.current_term \n            end as current_term_days,\n        \n        case when subscription.initial_term_period_type = 'Week' then 7 * subscription.initial_term\n            when subscription.initial_term_period_type = 'Month' then 30 * subscription.initial_term\n            when subscription.initial_term_period_type = 'Year' then 365 * subscription.initial_term\n            else subscription.initial_term \n            end as initial_term_days,\n        \n        case when subscription.renewal_term_period_type = 'Week' then 7 * subscription.renewal_term\n            when subscription.renewal_term_period_type = 'Month' then 30 * subscription.renewal_term\n            when subscription.renewal_term_period_type = 'Year' then 365 * subscription.renewal_term\n            else subscription.renewal_term \n            end as renewal_term_days,\n        \n\n        \n        \n        case when subscription.term_type = 'TERMED'\n            then \n        ((subscription.subscription_end_date)::date - (subscription.subscription_start_date)::date)\n     \n            when subscription.term_type = 'EVERGREEN' and subscription.cancelled_date is not null\n            then \n        ((subscription.cancelled_date)::date - (subscription.subscription_start_date)::date)\n    \n            else \n        ((\n    current_timestamp::timestamp\n)::date - (subscription.subscription_start_date)::date)\n    \n            end as subscription_days\n        ,\n        case when subscription.term_type = 'TERMED'\n            then \n        ((subscription.term_end_date)::date - (subscription.term_start_date)::date)\n     \n            when subscription.term_type = 'EVERGREEN' and subscription.cancelled_date is not null\n            then \n        ((subscription.cancelled_date)::date - (subscription.term_start_date)::date)\n    \n            else \n        ((\n    current_timestamp::timestamp\n)::date - (subscription.term_start_date)::date)\n    \n            end as term_days\n        \n\n        \n\n\n\n\n\n        \n\n\n\n\n\n    from subscription\n    left join rate_plan_charge\n        on subscription.subscription_id = rate_plan_charge.subscription_id\n    left join amendment\n        on subscription.subscription_id = amendment.subscription_id\n    left join account_overview \n        on subscription.account_id = account_overview.account_id\n)\n\nselect * \nfrom subscription_overview", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora.zuora__monthly_recurring_revenue": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "zuora__monthly_recurring_revenue", "resource_type": "model", "package_name": "zuora", "path": "zuora__monthly_recurring_revenue.sql", "original_file_path": "models/zuora__monthly_recurring_revenue.sql", "unique_id": "model.zuora.zuora__monthly_recurring_revenue", "fqn": ["zuora", "zuora__monthly_recurring_revenue"], "alias": "zuora__monthly_recurring_revenue", "checksum": {"name": "sha256", "checksum": "09ba6e427f6ab3c73194b6d8df0cc3423e212a09b9c6d5f95469c37ec5c106c0"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record is an account and a month in that account, with details about its monthly recurring and non-recurring revenue in these time periods.", "columns": {"account_monthly_id": {"name": "account_monthly_id", "description": "The unique identifier for the account id and month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "Unique identifier of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_month": {"name": "account_month", "description": "Month of the account where MRR is being generated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mrr_expected_current_month": {"name": "mrr_expected_current_month", "description": "Expected monthly recurring revenue based on the rate plan charges for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross_current_month_mrr": {"name": "gross_current_month_mrr", "description": "Total recurring charges in the current month for the account, resulting in gross monthly recurring revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_current_month_mrr": {"name": "discount_current_month_mrr", "description": "Total recurring discounts in the current month for the account, resulting in discount monthly recurring revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_current_month_mrr": {"name": "net_current_month_mrr", "description": "The difference between gross monthly recurring revenue and net monthly recurring revenue in the current month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross_current_month_non_mrr": {"name": "gross_current_month_non_mrr", "description": "Total non-recurring charges in the current month for the account, resulting in gross monthly non-recurring revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_current_month_non_mrr": {"name": "discount_current_month_non_mrr", "description": "Total non-recurring discounts in the current month for the account, resulting in discount monthly non-recurring revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_current_month_non_mrr": {"name": "net_current_month_non_mrr", "description": "The difference between gross monthly non-recurring revenue and net monthly non-recurring revenue in that month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mrr_expected_previous_month": {"name": "mrr_expected_previous_month", "description": "Expected previous month's monthly recurring revenue based on the rate plan charges for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross_previous_month_mrr": {"name": "gross_previous_month_mrr", "description": "Total recurring charges in the previous month for the account, resulting in gross monthly recurring revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_previous_month_mrr": {"name": "discount_previous_month_mrr", "description": "Total recurring discounts in the previous month for the account, resulting in discount monthly recurring revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_previous_month_mrr": {"name": "net_previous_month_mrr", "description": "The difference between gross monthly recurring revenue and net monthly recurring revenue in the previous month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross_previous_month_non_mrr": {"name": "gross_previous_month_non_mrr", "description": "Total non-recurring charges in the previous month for the account, resulting in gross monthly non-recurring revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_previous_month_non_mrr": {"name": "discount_previous_month_non_mrr", "description": "Total non-recurring discounts in the previous month for the account, resulting in discount monthly non-recurring revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_previous_month_non_mrr": {"name": "net_previous_month_non_mrr", "description": "The difference between gross monthly non-recurring revenue and net monthly non-recurring revenue in the previous month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_month_number": {"name": "account_month_number", "description": "The number of the month of the account, 1 being the first month the account receives revenue and the number increases with each subsequent month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_mrr_type": {"name": "net_mrr_type", "description": "The net monthly recurring revenue type, defined by best-known MRR type terminology.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora://models/zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.3744042, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"zuora__monthly_recurring_revenue\"", "raw_code": "with line_items as (\n\n    select *\n    from {{ ref('zuora__line_item_history') }}\n),\n\nmonth_spine as (\n\n    select \n        account_id,\n        date_month as account_month\n    from {{ ref('int_zuora__mrr_date_spine') }}\n    {{ dbt_utils.group_by(2) }}\n),\n\nmrr_by_account as (\n\n    select \n        coalesce(month_spine.account_id, line_items.account_id) as account_id,\n        coalesce(month_spine.account_month, line_items.service_start_month) as account_month,\n\n        {% if var('zuora__using_multicurrency', false) %}\n        sum(case when charge_mrr is null then 0 else charge_mrr end) as mrr_expected_current_month,\n        {% else %} \n        sum(case when charge_mrr_home_currency is null then 0 else charge_mrr_home_currency end) as mrr_expected_current_month,\n        {% endif %}\n\n        {% set sum_cols = ['gross', 'discount', 'net'] %}\n        {% for col in sum_cols %} \n            sum(case when lower(charge_type) = 'recurring' and {{col}}_revenue is not null then {{col}}_revenue else 0 end) as {{col}}_current_month_mrr,\n            sum(case when lower(charge_type) != 'recurring' and {{col}}_revenue is not null then {{col}}_revenue else 0 end) as {{col}}_current_month_non_mrr\n            {{ ',' if not loop.last }}\n        {% endfor %}\n\n    from month_spine\n    left join line_items\n        on month_spine.account_month = line_items.service_start_month\n        and month_spine.account_id = line_items.account_id\n    {{ dbt_utils.group_by(2) }}\n),\n\ncurrent_vs_previous_mrr as (\n    \n    select \n        account_id,\n        account_month,\n        gross_current_month_mrr,\n        discount_current_month_mrr,\n        net_current_month_mrr,\n        gross_current_month_non_mrr,\n        discount_current_month_non_mrr,\n        net_current_month_non_mrr,\n        mrr_expected_current_month,\n        lag(mrr_expected_current_month) over (partition by account_id order by account_month) as mrr_expected_previous_month,\n\n        {% set sum_cols = ['gross', 'discount', 'net'] %}\n        {% for col in sum_cols %} \n            lag({{col}}_current_month_mrr) over (partition by account_id order by account_month) as {{col}}_previous_month_mrr,\n            lag({{col}}_current_month_non_mrr) over (partition by account_id order by account_month) as {{col}}_previous_month_non_mrr,\n        {% endfor %}\n\n        row_number() over (partition by account_id order by account_month) as account_month_number\n    from mrr_by_account\n    {{ dbt_utils.group_by(9) }}\n),\n\nmrr_type as (\n\n    select \n        {{ dbt_utils.generate_surrogate_key(['account_id', 'account_month']) }} as account_monthly_id,\n        *,   \n        case when net_current_month_mrr > net_previous_month_mrr then 'expansion'\n            when net_current_month_mrr < net_previous_month_mrr then 'contraction'\n            when net_current_month_mrr = net_previous_month_mrr then 'unchanged'\n            when net_previous_month_mrr is null then 'new'\n            when (net_current_month_mrr = 0.0 or net_current_month_mrr is null)\n                and (net_previous_month_mrr != 0.0)\n                then 'churned'\n            when (net_previous_month_mrr = 0.0 and net_current_month_mrr > 0.0 \n                and account_month_number >= 3) \n                then 'reactivation'\n            else null\n            end as net_mrr_type\n    from current_vs_previous_mrr\n)\n\nselect * \nfrom mrr_type", "language": "sql", "refs": [{"name": "zuora__line_item_history", "package": null, "version": null}, {"name": "int_zuora__mrr_date_spine", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.zuora.zuora__line_item_history", "model.zuora.int_zuora__mrr_date_spine"]}, "compiled_path": "target/compiled/zuora/models/zuora__monthly_recurring_revenue.sql", "compiled": true, "compiled_code": "with line_items as (\n\n    select *\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__line_item_history\"\n),\n\nmonth_spine as (\n\n    select \n        account_id,\n        date_month as account_month\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__mrr_date_spine\"\n    group by 1,2\n),\n\nmrr_by_account as (\n\n    select \n        coalesce(month_spine.account_id, line_items.account_id) as account_id,\n        coalesce(month_spine.account_month, line_items.service_start_month) as account_month,\n\n         \n        sum(case when charge_mrr_home_currency is null then 0 else charge_mrr_home_currency end) as mrr_expected_current_month,\n        \n\n        \n         \n            sum(case when lower(charge_type) = 'recurring' and gross_revenue is not null then gross_revenue else 0 end) as gross_current_month_mrr,\n            sum(case when lower(charge_type) != 'recurring' and gross_revenue is not null then gross_revenue else 0 end) as gross_current_month_non_mrr\n            ,\n         \n            sum(case when lower(charge_type) = 'recurring' and discount_revenue is not null then discount_revenue else 0 end) as discount_current_month_mrr,\n            sum(case when lower(charge_type) != 'recurring' and discount_revenue is not null then discount_revenue else 0 end) as discount_current_month_non_mrr\n            ,\n         \n            sum(case when lower(charge_type) = 'recurring' and net_revenue is not null then net_revenue else 0 end) as net_current_month_mrr,\n            sum(case when lower(charge_type) != 'recurring' and net_revenue is not null then net_revenue else 0 end) as net_current_month_non_mrr\n            \n        \n\n    from month_spine\n    left join line_items\n        on month_spine.account_month = line_items.service_start_month\n        and month_spine.account_id = line_items.account_id\n    group by 1,2\n),\n\ncurrent_vs_previous_mrr as (\n    \n    select \n        account_id,\n        account_month,\n        gross_current_month_mrr,\n        discount_current_month_mrr,\n        net_current_month_mrr,\n        gross_current_month_non_mrr,\n        discount_current_month_non_mrr,\n        net_current_month_non_mrr,\n        mrr_expected_current_month,\n        lag(mrr_expected_current_month) over (partition by account_id order by account_month) as mrr_expected_previous_month,\n\n        \n         \n            lag(gross_current_month_mrr) over (partition by account_id order by account_month) as gross_previous_month_mrr,\n            lag(gross_current_month_non_mrr) over (partition by account_id order by account_month) as gross_previous_month_non_mrr,\n         \n            lag(discount_current_month_mrr) over (partition by account_id order by account_month) as discount_previous_month_mrr,\n            lag(discount_current_month_non_mrr) over (partition by account_id order by account_month) as discount_previous_month_non_mrr,\n         \n            lag(net_current_month_mrr) over (partition by account_id order by account_month) as net_previous_month_mrr,\n            lag(net_current_month_non_mrr) over (partition by account_id order by account_month) as net_previous_month_non_mrr,\n        \n\n        row_number() over (partition by account_id order by account_month) as account_month_number\n    from mrr_by_account\n    group by 1,2,3,4,5,6,7,8,9\n),\n\nmrr_type as (\n\n    select \n        md5(cast(coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(account_month as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as account_monthly_id,\n        *,   \n        case when net_current_month_mrr > net_previous_month_mrr then 'expansion'\n            when net_current_month_mrr < net_previous_month_mrr then 'contraction'\n            when net_current_month_mrr = net_previous_month_mrr then 'unchanged'\n            when net_previous_month_mrr is null then 'new'\n            when (net_current_month_mrr = 0.0 or net_current_month_mrr is null)\n                and (net_previous_month_mrr != 0.0)\n                then 'churned'\n            when (net_previous_month_mrr = 0.0 and net_current_month_mrr > 0.0 \n                and account_month_number >= 3) \n                then 'reactivation'\n            else null\n            end as net_mrr_type\n    from current_vs_previous_mrr\n)\n\nselect * \nfrom mrr_type", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora.zuora__account_overview": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "zuora__account_overview", "resource_type": "model", "package_name": "zuora", "path": "zuora__account_overview.sql", "original_file_path": "models/zuora__account_overview.sql", "unique_id": "model.zuora.zuora__account_overview", "fqn": ["zuora", "zuora__account_overview"], "alias": "zuora__account_overview", "checksum": {"name": "sha256", "checksum": "4d67cb3103dfc6b8232fb79b2de3503c1e571184330eeed6dd14131e606f0198"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents an account enriched with metrics about their associated transactions.", "columns": {"account_id": {"name": "account_id", "description": "Primary key for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_created_at": {"name": "account_created_at", "description": "Creation date for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_name": {"name": "account_name", "description": "Account name as displayed in Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "Unique account number assigned to the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_credit_balance": {"name": "account_credit_balance", "description": "Total credit balance for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_zuora_calculated_mrr": {"name": "account_zuora_calculated_mrr", "description": "The amount of tabulated MRR as calculated by Zuora internally.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_status": {"name": "account_status", "description": "Status of the account in the system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_auto_pay": {"name": "is_auto_pay", "description": "Indicates if future payments are automatically collected when they're due during a Payment Run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_country": {"name": "account_country", "description": "The country of the contact's address associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_city": {"name": "account_city", "description": "The city of the contact's address associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_email": {"name": "account_email", "description": "The business email address of the contact associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_first_name": {"name": "account_first_name", "description": "The first name of the contact associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_last_name": {"name": "account_last_name", "description": "The last name of the contact associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_postal_code": {"name": "account_postal_code", "description": "The postal code of the contact's address associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_state": {"name": "account_state", "description": "The state of the contact's address associated with the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_active_months": {"name": "account_active_months", "description": "The number of months the account has been active, rounded to days.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_charge_processed_at": {"name": "first_charge_processed_at", "description": "Time at which the first charge on the account is processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_currently_subscribed": {"name": "is_currently_subscribed", "description": "Does the account have a current active subscription associated with it?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_new_customer": {"name": "is_new_customer", "description": "Was this account created in the past 30 days?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_item_count": {"name": "invoice_item_count", "description": "All invoice items ever associated with this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_count": {"name": "invoice_count", "description": "All invoices ever associated with this account.s", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active_subscription_count": {"name": "active_subscription_count", "description": "Subscriptions currently active in this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_subscription_count": {"name": "total_subscription_count", "description": "All subscriptions ever created with this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_invoice_amount": {"name": "total_invoice_amount", "description": "Total amount of all invoices associated with this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_invoice_amount_home_currency": {"name": "total_invoice_amount_home_currency", "description": "Total amount of all invoices in the home currency associated with this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_taxes": {"name": "total_taxes", "description": "Total taxes associated with this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_discounts": {"name": "total_discounts", "description": "Total discounts associated with this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount_paid": {"name": "total_amount_paid", "description": "Total amount of invoices paid associated with this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount_not_paid": {"name": "total_amount_not_paid", "description": "Total amount of invoices unpaid associated with this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount_past_due": {"name": "total_amount_past_due", "description": "Total amount of past due invoices associated with this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "Total amount of refunds associated with this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_average_invoice_value": {"name": "total_average_invoice_value", "description": "Total average value of the invoice associated with this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_units_per_invoice": {"name": "total_units_per_invoice", "description": "Total units per invoice associated with this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "monthly_average_subscription_count": {"name": "monthly_average_subscription_count", "description": "Average number of subscriptions per month for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "monthly_average_invoice_amount": {"name": "monthly_average_invoice_amount", "description": "Average invoice amount per month for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "monthly_average_invoice_amount_home_currency": {"name": "monthly_average_invoice_amount_home_currency", "description": "Average invoice amount in the home currency per month for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "monthly_average_taxes": {"name": "monthly_average_taxes", "description": "Average taxes per month for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "monthly_average_discounts": {"name": "monthly_average_discounts", "description": "Average discounts per month for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "monthly_average_amount_paid": {"name": "monthly_average_amount_paid", "description": "Average paid amount per month for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "monthly_average_amount_not_paid": {"name": "monthly_average_amount_not_paid", "description": "Average unpaid amount per month for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "monthly_average_amount_past_due": {"name": "monthly_average_amount_past_due", "description": "Average past due amount per month for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "monthly_average_refunds": {"name": "monthly_average_refunds", "description": "Average refunds per month for this account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora://models/zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.351819, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"zuora__account_overview\"", "raw_code": "with account_enriched as (\n\n    select * \n    from {{ ref('int_zuora__account_enriched') }} \n),\n\ncontact as (\n\n    select *\n    from {{ var('contact') }} \n    where is_most_recent_record\n    and is_most_recent_account_contact \n),\n\naccount_overview as (\n    \n    select \n        account_enriched.account_id, \n        account_enriched.created_date as account_created_at,\n        account_enriched.name as account_name,\n        account_enriched.account_number,\n        account_enriched.credit_balance as account_credit_balance,\n        account_enriched.mrr as account_zuora_calculated_mrr,\n        account_enriched.status as account_status,\n        account_enriched.auto_pay as is_auto_pay,\n        contact.country as account_country,\n        contact.city as account_city,\n        contact.work_email as account_email,\n        contact.first_name as account_first_name, \n        contact.last_name as account_last_name,\n        contact.postal_code as account_postal_code,\n        contact.state as account_state,\n        account_enriched.account_active_months,\n        account_enriched.first_charge_date as first_charge_processed_at,\n        account_enriched.is_currently_subscribed,\n        account_enriched.is_new_customer,\n        account_enriched.invoice_item_count,\n        account_enriched.invoice_count,\n    \n        {% set round_cols = ['active_subscription_count', 'total_subscription_count', 'total_invoice_amount', 'total_invoice_amount_home_currency', 'total_taxes', 'total_discounts', 'total_amount_paid', 'total_amount_not_paid', 'total_amount_past_due', 'total_refunds'] %}\n        {% for col in round_cols %}\n            round(cast({{ col }} as {{ dbt.type_numeric() }}), 2) as {{ col }},   \n        {% endfor %}\n\n        account_enriched.total_average_invoice_value,\n        account_enriched.total_units_per_invoice,\n\n        {% set avg_cols = ['subscription_count', 'invoice_amount', 'invoice_amount_home_currency', 'taxes', 'discounts', 'amount_paid', 'amount_not_paid', 'amount_past_due', 'refunds'] %}\n        {% for col in avg_cols %}\n            round(cast({{- dbt_utils.safe_divide('total_' ~ col, 'account_active_months') }} as {{ dbt.type_numeric() }} ), 2) as monthly_average_{{ col }}\n            {{ ',' if not loop.last -}}\n        {% endfor %}\n\n        {{ fivetran_utils.persist_pass_through_columns('zuora_account_pass_through_columns', identifier='account_enriched') }}\n\n    from account_enriched\n    left join contact \n        on account_enriched.account_id = contact.account_id\n)\n\nselect * \nfrom account_overview", "language": "sql", "refs": [{"name": "int_zuora__account_enriched", "package": null, "version": null}, {"name": "stg_zuora__contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_numeric", "macro.dbt_utils.safe_divide", "macro.fivetran_utils.persist_pass_through_columns"], "nodes": ["model.zuora.int_zuora__account_enriched", "model.zuora_source.stg_zuora__contact"]}, "compiled_path": "target/compiled/zuora/models/zuora__account_overview.sql", "compiled": true, "compiled_code": "with account_enriched as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__account_enriched\" \n),\n\ncontact as (\n\n    select *\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__contact\" \n    where is_most_recent_record\n    and is_most_recent_account_contact \n),\n\naccount_overview as (\n    \n    select \n        account_enriched.account_id, \n        account_enriched.created_date as account_created_at,\n        account_enriched.name as account_name,\n        account_enriched.account_number,\n        account_enriched.credit_balance as account_credit_balance,\n        account_enriched.mrr as account_zuora_calculated_mrr,\n        account_enriched.status as account_status,\n        account_enriched.auto_pay as is_auto_pay,\n        contact.country as account_country,\n        contact.city as account_city,\n        contact.work_email as account_email,\n        contact.first_name as account_first_name, \n        contact.last_name as account_last_name,\n        contact.postal_code as account_postal_code,\n        contact.state as account_state,\n        account_enriched.account_active_months,\n        account_enriched.first_charge_date as first_charge_processed_at,\n        account_enriched.is_currently_subscribed,\n        account_enriched.is_new_customer,\n        account_enriched.invoice_item_count,\n        account_enriched.invoice_count,\n    \n        \n        \n            round(cast(active_subscription_count as numeric(28,6)), 2) as active_subscription_count,   \n        \n            round(cast(total_subscription_count as numeric(28,6)), 2) as total_subscription_count,   \n        \n            round(cast(total_invoice_amount as numeric(28,6)), 2) as total_invoice_amount,   \n        \n            round(cast(total_invoice_amount_home_currency as numeric(28,6)), 2) as total_invoice_amount_home_currency,   \n        \n            round(cast(total_taxes as numeric(28,6)), 2) as total_taxes,   \n        \n            round(cast(total_discounts as numeric(28,6)), 2) as total_discounts,   \n        \n            round(cast(total_amount_paid as numeric(28,6)), 2) as total_amount_paid,   \n        \n            round(cast(total_amount_not_paid as numeric(28,6)), 2) as total_amount_not_paid,   \n        \n            round(cast(total_amount_past_due as numeric(28,6)), 2) as total_amount_past_due,   \n        \n            round(cast(total_refunds as numeric(28,6)), 2) as total_refunds,   \n        \n\n        account_enriched.total_average_invoice_value,\n        account_enriched.total_units_per_invoice,\n\n        \n        \n            round(cast(\n    ( total_subscription_count ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_subscription_count\n            ,\n            round(cast(\n    ( total_invoice_amount ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_invoice_amount\n            ,\n            round(cast(\n    ( total_invoice_amount_home_currency ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_invoice_amount_home_currency\n            ,\n            round(cast(\n    ( total_taxes ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_taxes\n            ,\n            round(cast(\n    ( total_discounts ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_discounts\n            ,\n            round(cast(\n    ( total_amount_paid ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_amount_paid\n            ,\n            round(cast(\n    ( total_amount_not_paid ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_amount_not_paid\n            ,\n            round(cast(\n    ( total_amount_past_due ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_amount_past_due\n            ,\n            round(cast(\n    ( total_refunds ) / nullif( ( account_active_months ), 0)\n as numeric(28,6) ), 2) as monthly_average_refunds\n            \n\n        \n\n\n\n\n\n    from account_enriched\n    left join contact \n        on account_enriched.account_id = contact.account_id\n)\n\nselect * \nfrom account_overview", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora.int_zuora__mrr_date_spine": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "int_zuora__mrr_date_spine", "resource_type": "model", "package_name": "zuora", "path": "intermediate/int_zuora__mrr_date_spine.sql", "original_file_path": "models/intermediate/int_zuora__mrr_date_spine.sql", "unique_id": "model.zuora.int_zuora__mrr_date_spine", "fqn": ["zuora", "intermediate", "int_zuora__mrr_date_spine"], "alias": "int_zuora__mrr_date_spine", "checksum": {"name": "sha256", "checksum": "54ba342049af2f5b5bf07d2ce6fa8cac0fd6923ecff14c777f066fb3fc056372"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501431.8548312, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__mrr_date_spine\"", "raw_code": "with spine as (\n\n    {% if execute %}\n    {% if not var('zuora_mrr_first_date', None) or not var('zuora_mrr_last_date', None) %}\n        {% set date_query %}\n        select \n            min( service_start_date ) as min_date,\n            max( service_start_date ) as max_date\n        from {{ source('zuora', 'invoice_item') }}\n        {% endset %}\n\n        {% set calc_first_date = run_query(date_query).columns[0][0]|string %}\n        {% set calc_last_date = run_query(date_query).columns[1][0]|string %}\n    {% endif %}\n\n    {# If only compiling, creates range going back 1 year #}\n    {% else %} \n        {% set calc_first_date = dbt.dateadd(\"year\", \"-1\", \"current_date\") %}\n        {% set calc_last_date = dbt.current_timestamp_backcompat() %}\n    {% endif %}\n\n    {# Prioritizes variables over calculated dates #}\n    {% set first_date = var('zuora_mrr_first_date', calc_first_date)|string %}\n    {% set last_date = var('zuora_mrr_last_date', calc_last_date)|string %}\n\n    {{ dbt_utils.date_spine(\n        datepart=\"day\",\n        start_date = \"cast('\" ~ first_date[0:10] ~ \"'as date)\",\n        end_date = \"cast('\" ~ last_date[0:10] ~ \"'as date)\"\n        )\n    }}\n),\n\naccount_service_history as (\n\n    select \n        account_id,\n        min(service_start_month) as first_service_month\n    from {{ ref('zuora__line_item_history') }}\n    {{ dbt_utils.group_by(1) }}\n),\n\ndate_spine as (\n\n    select\n        cast({{ dbt.date_trunc(\"day\", \"date_day\") }} as date) as date_day, \n        cast({{ dbt.date_trunc(\"week\", \"date_day\") }} as date) as date_week, \n        cast({{ dbt.date_trunc(\"month\", \"date_day\") }} as date) as date_month,\n        cast({{ dbt.date_trunc(\"year\", \"date_day\") }} as date) as date_year,  \n        row_number() over (order by cast({{ dbt.date_trunc(\"day\", \"date_day\") }} as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select \n        distinct account_service_history.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account_service_history\n    cross join date_spine \n    where cast({{ dbt.date_trunc('day', 'account_service_history.first_service_month') }} as date) <= date_spine.date_day\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "zuora__line_item_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp_backcompat", "macro.dbt_utils.date_spine", "macro.dbt_utils.group_by", "macro.dbt.date_trunc", "macro.dbt.run_query"], "nodes": ["model.zuora.zuora__line_item_history"]}, "compiled_path": "target/compiled/zuora/models/intermediate/int_zuora__mrr_date_spine.sql", "compiled": true, "compiled_code": "with spine as (\n\n    \n    \n        \n\n        \n        \n    \n\n    \n    \n\n    \n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 823\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2015-08-01'as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2017-11-01'as date)\n\n)\n\nselect * from filtered\n\n\n),\n\naccount_service_history as (\n\n    select \n        account_id,\n        min(service_start_month) as first_service_month\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__line_item_history\"\n    group by 1\n),\n\ndate_spine as (\n\n    select\n        cast(date_trunc('day', date_day) as date) as date_day, \n        cast(date_trunc('week', date_day) as date) as date_week, \n        cast(date_trunc('month', date_day) as date) as date_month,\n        cast(date_trunc('year', date_day) as date) as date_year,  \n        row_number() over (order by cast(date_trunc('day', date_day) as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select \n        distinct account_service_history.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account_service_history\n    cross join date_spine \n    where cast(date_trunc('day', account_service_history.first_service_month) as date) <= date_spine.date_day\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora.int_zuora__account_running_totals": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "int_zuora__account_running_totals", "resource_type": "model", "package_name": "zuora", "path": "intermediate/int_zuora__account_running_totals.sql", "original_file_path": "models/intermediate/int_zuora__account_running_totals.sql", "unique_id": "model.zuora.int_zuora__account_running_totals", "fqn": ["zuora", "intermediate", "int_zuora__account_running_totals"], "alias": "int_zuora__account_running_totals", "checksum": {"name": "sha256", "checksum": "7fcdd2715e07390f8b03505977fa41be35a5a9241a72717ae9cf113efe1faa24"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501431.876363, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__account_running_totals\"", "raw_code": "{% set fields = ['invoices','invoice_items','invoice_amount','invoice_amount_paid','invoice_amount_unpaid','discount_charges','refunds'] %}\n{% do fields.append('tax_amount') if var('zuora__using_taxation_item', true) %}\n{% do fields.append('credit_balance_adjustment_amount') if var('zuora__using_credit_balance_adjustment', true) %}\n\nwith account_partitions as (\n\n    select * \n    from {{ ref('int_zuora__account_partitions') }}\n),\n\naccount_running_totals as (\n\n    select\n        account_id,\n        {{ dbt_utils.generate_surrogate_key(['account_id','date_day']) }} as account_daily_id,\n        date_day,        \n        date_week, \n        date_month, \n        date_year,  \n        date_index, \n\n        {% for f in fields %}\n            coalesce(daily_{{ f }}, 0) as daily_{{ f }},\n        {% endfor %} \n\n        {% for f in fields %}\n            coalesce(rolling_{{ f }},   \n                first_value(rolling_{{ f }}) over (partition by rolling_{{ f }}_partition order by date_day rows unbounded preceding)) as rolling_{{ f }}\n        {%- if not loop.last -%},\n        {%- endif -%}\n        {% endfor %}\n        \n    from account_partitions\n)\n\nselect *\nfrom account_running_totals", "language": "sql", "refs": [{"name": "int_zuora__account_partitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.zuora.int_zuora__account_partitions"]}, "compiled_path": "target/compiled/zuora/models/intermediate/int_zuora__account_running_totals.sql", "compiled": true, "compiled_code": "\n\n\n\nwith account_partitions as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__account_partitions\"\n),\n\naccount_running_totals as (\n\n    select\n        account_id,\n        md5(cast(coalesce(cast(account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as account_daily_id,\n        date_day,        \n        date_week, \n        date_month, \n        date_year,  \n        date_index, \n\n        \n            coalesce(daily_invoices, 0) as daily_invoices,\n        \n            coalesce(daily_invoice_items, 0) as daily_invoice_items,\n        \n            coalesce(daily_invoice_amount, 0) as daily_invoice_amount,\n        \n            coalesce(daily_invoice_amount_paid, 0) as daily_invoice_amount_paid,\n        \n            coalesce(daily_invoice_amount_unpaid, 0) as daily_invoice_amount_unpaid,\n        \n            coalesce(daily_discount_charges, 0) as daily_discount_charges,\n        \n            coalesce(daily_refunds, 0) as daily_refunds,\n        \n            coalesce(daily_tax_amount, 0) as daily_tax_amount,\n        \n            coalesce(daily_credit_balance_adjustment_amount, 0) as daily_credit_balance_adjustment_amount,\n         \n\n        \n            coalesce(rolling_invoices,   \n                first_value(rolling_invoices) over (partition by rolling_invoices_partition order by date_day rows unbounded preceding)) as rolling_invoices,\n            coalesce(rolling_invoice_items,   \n                first_value(rolling_invoice_items) over (partition by rolling_invoice_items_partition order by date_day rows unbounded preceding)) as rolling_invoice_items,\n            coalesce(rolling_invoice_amount,   \n                first_value(rolling_invoice_amount) over (partition by rolling_invoice_amount_partition order by date_day rows unbounded preceding)) as rolling_invoice_amount,\n            coalesce(rolling_invoice_amount_paid,   \n                first_value(rolling_invoice_amount_paid) over (partition by rolling_invoice_amount_paid_partition order by date_day rows unbounded preceding)) as rolling_invoice_amount_paid,\n            coalesce(rolling_invoice_amount_unpaid,   \n                first_value(rolling_invoice_amount_unpaid) over (partition by rolling_invoice_amount_unpaid_partition order by date_day rows unbounded preceding)) as rolling_invoice_amount_unpaid,\n            coalesce(rolling_discount_charges,   \n                first_value(rolling_discount_charges) over (partition by rolling_discount_charges_partition order by date_day rows unbounded preceding)) as rolling_discount_charges,\n            coalesce(rolling_refunds,   \n                first_value(rolling_refunds) over (partition by rolling_refunds_partition order by date_day rows unbounded preceding)) as rolling_refunds,\n            coalesce(rolling_tax_amount,   \n                first_value(rolling_tax_amount) over (partition by rolling_tax_amount_partition order by date_day rows unbounded preceding)) as rolling_tax_amount,\n            coalesce(rolling_credit_balance_adjustment_amount,   \n                first_value(rolling_credit_balance_adjustment_amount) over (partition by rolling_credit_balance_adjustment_amount_partition order by date_day rows unbounded preceding)) as rolling_credit_balance_adjustment_amount\n        \n    from account_partitions\n)\n\nselect *\nfrom account_running_totals", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora.int_zuora__account_enriched": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "int_zuora__account_enriched", "resource_type": "model", "package_name": "zuora", "path": "intermediate/int_zuora__account_enriched.sql", "original_file_path": "models/intermediate/int_zuora__account_enriched.sql", "unique_id": "model.zuora.int_zuora__account_enriched", "fqn": ["zuora", "intermediate", "int_zuora__account_enriched"], "alias": "int_zuora__account_enriched", "checksum": {"name": "sha256", "checksum": "f3ce3b1aba4cafdc5999a064677c9b211c5782076967fc019f12d7c0da580c7a"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501431.882483, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__account_enriched\"", "raw_code": "with account as (\n\n    select * \n    from {{ var('account') }} \n    where is_most_recent_record \n),\n\nbilling_history as (\n\n    select * \n    from {{ ref('zuora__billing_history') }}\n), \n\nsubscription as (\n\n    select * \n    from {{ var('subscription') }} \n    where is_most_recent_record\n), \n\ninvoice_item as (\n\n    select * \n    from {{ var('invoice_item')}}\n    where is_most_recent_record\n),\n\naccount_payment_data as (\n\n    select \n        account_id,\n        sum(amount) as account_amount_paid\n    from {{ var('payment') }} \n    where is_most_recent_record\n        and account_id is not null\n    {{ dbt_utils.group_by(1) }}\n),\n\naccount_details as (\n\n    select \n        account_id,\n        created_date,\n        name,\n        account_number,\n        credit_balance, \n        mrr,\n        status,\n        auto_pay, \n        {{ dbt_utils.safe_divide( dbt.datediff(\"account.created_date\", dbt.current_timestamp_backcompat(), \"day\"), 30) }} as account_active_months,\n        case when {{ dbt.datediff(\"account.created_date\", dbt.current_timestamp_backcompat(), \"day\") }} <= 30\n            then true else false end as is_new_customer\n    \n        {{ fivetran_utils.persist_pass_through_columns('zuora_account_pass_through_columns') }}\n\n    from account\n\n),\n\naccount_totals as (\n\n    select \n        account_id,\n        max(most_recent_payment_date) as most_recent_payment_date,\n\n        {% if var('zuora__using_credit_balance_adjustment', true) %}\n        max(most_recent_credit_balance_adjustment_date) as most_recent_credit_balance_adjustment_date,\n        {% endif %}\n\n        sum(case when cast({{ dbt.date_trunc('day', dbt.current_timestamp_backcompat()) }} as date) > due_date\n                and invoice_amount != invoice_amount_paid \n                then invoice_amount_unpaid else 0 end) as total_amount_past_due\n        \n        {% set sum_cols = ['refund_amount', 'discount_charges', 'tax_amount', 'invoice_amount', 'invoice_amount_home_currency', 'invoice_amount_paid', 'invoice_amount_unpaid'] %}\n        {% for col in sum_cols %}\n        , sum({{ col }}) as total_{{ col }} \n        {% endfor %}\n\n    from billing_history\n    {{ dbt_utils.group_by(1) }}\n),\n\naccount_invoice_data as (\n\n    select \n        account_id,\n        min(charge_date) as first_charge_date,\n        max(charge_date) as most_recent_charge_date,\n        count(distinct invoice_item_id) as invoice_item_count,\n        count(distinct invoice_id) as invoice_count\n    from invoice_item\n    {{ dbt_utils.group_by(1) }}\n),\n\naccount_subscription_data as (\n\n    select \n        account_id,\n        count(distinct subscription_id) as subscription_count,\n        sum(case when lower(status) = 'active' then 1 else 0 end) as active_subscription_count\n    from subscription\n    {{ dbt_utils.group_by(1) }}\n),\n\naccount_cumulatives as (\n    \n    select \n        account_totals.account_id,\n        account_details.created_date,\n        account_details.name,\n        account_details.account_number,\n        account_details.credit_balance, \n        account_details.mrr,\n        account_details.status,\n        account_details.auto_pay,\n        account_details.account_active_months,\n        account_details.is_new_customer\n\n        {{ fivetran_utils.persist_pass_through_columns('zuora_account_pass_through_columns', identifier = 'account_details') }},\n\n        account_totals.total_tax_amount as total_taxes,\n        account_totals.total_refund_amount as total_refunds,\n        account_totals.total_discount_charges as total_discounts,\n        account_totals.total_invoice_amount,\n        account_totals.total_invoice_amount_home_currency,\n        account_totals.total_invoice_amount_paid as total_amount_paid,\n        account_totals.total_invoice_amount_unpaid as total_amount_not_paid,\n        account_totals.total_amount_past_due,\n        account_totals.most_recent_payment_date,\n\n        {% if var('zuora__using_credit_balance_adjustment', true) %}\n        account_totals.most_recent_credit_balance_adjustment_date, \n        {% endif %}\n        \n        account_invoice_data.first_charge_date,\n        account_invoice_data.most_recent_charge_date,\n        account_invoice_data.invoice_item_count,\n        account_invoice_data.invoice_count,\n        round(cast({{ dbt_utils.safe_divide('account_totals.total_invoice_amount', 'account_invoice_data.invoice_count') }} as {{ dbt.type_numeric() }}), 2) as total_average_invoice_value,\n        round(cast({{ dbt_utils.safe_divide('account_invoice_data.invoice_item_count', 'account_invoice_data.invoice_count') }} as {{ dbt.type_numeric() }}), 2) as total_units_per_invoice,\n        account_subscription_data.subscription_count as total_subscription_count,\n        account_subscription_data.active_subscription_count,\n        case when account_subscription_data.active_subscription_count = 0 then false else true end as is_currently_subscribed,\n        account_payment_data.account_amount_paid\n    from account_details\n        left join account_totals\n            on account_details.account_id = account_totals.account_id\n        left join account_invoice_data\n            on account_totals.account_id = account_invoice_data.account_id\n        left join account_subscription_data\n            on account_totals.account_id = account_subscription_data.account_id\n        left join account_payment_data\n            on account_totals.account_id = account_payment_data.account_id\n)\n\nselect * \nfrom account_cumulatives", "language": "sql", "refs": [{"name": "stg_zuora__account", "package": null, "version": null}, {"name": "zuora__billing_history", "package": null, "version": null}, {"name": "stg_zuora__subscription", "package": null, "version": null}, {"name": "stg_zuora__invoice_item", "package": null, "version": null}, {"name": "stg_zuora__payment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt.current_timestamp_backcompat", "macro.dbt.datediff", "macro.dbt_utils.safe_divide", "macro.fivetran_utils.persist_pass_through_columns", "macro.dbt.date_trunc", "macro.dbt.type_numeric"], "nodes": ["model.zuora_source.stg_zuora__account", "model.zuora.zuora__billing_history", "model.zuora_source.stg_zuora__subscription", "model.zuora_source.stg_zuora__invoice_item", "model.zuora_source.stg_zuora__payment"]}, "compiled_path": "target/compiled/zuora/models/intermediate/int_zuora__account_enriched.sql", "compiled": true, "compiled_code": "with account as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__account\" \n    where is_most_recent_record \n),\n\nbilling_history as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__billing_history\"\n), \n\nsubscription as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__subscription\" \n    where is_most_recent_record\n), \n\ninvoice_item as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice_item\"\n    where is_most_recent_record\n),\n\naccount_payment_data as (\n\n    select \n        account_id,\n        sum(amount) as account_amount_paid\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__payment\" \n    where is_most_recent_record\n        and account_id is not null\n    group by 1\n),\n\naccount_details as (\n\n    select \n        account_id,\n        created_date,\n        name,\n        account_number,\n        credit_balance, \n        mrr,\n        status,\n        auto_pay, \n        \n    ( \n        ((\n    current_timestamp::timestamp\n)::date - (account.created_date)::date)\n     ) / nullif( ( 30 ), 0)\n as account_active_months,\n        case when \n        ((\n    current_timestamp::timestamp\n)::date - (account.created_date)::date)\n     <= 30\n            then true else false end as is_new_customer\n    \n        \n\n\n\n\n\n    from account\n\n),\n\naccount_totals as (\n\n    select \n        account_id,\n        max(most_recent_payment_date) as most_recent_payment_date,\n\n        \n        max(most_recent_credit_balance_adjustment_date) as most_recent_credit_balance_adjustment_date,\n        \n\n        sum(case when cast(date_trunc('day', \n    current_timestamp::timestamp\n) as date) > due_date\n                and invoice_amount != invoice_amount_paid \n                then invoice_amount_unpaid else 0 end) as total_amount_past_due\n        \n        \n        \n        , sum(refund_amount) as total_refund_amount \n        \n        , sum(discount_charges) as total_discount_charges \n        \n        , sum(tax_amount) as total_tax_amount \n        \n        , sum(invoice_amount) as total_invoice_amount \n        \n        , sum(invoice_amount_home_currency) as total_invoice_amount_home_currency \n        \n        , sum(invoice_amount_paid) as total_invoice_amount_paid \n        \n        , sum(invoice_amount_unpaid) as total_invoice_amount_unpaid \n        \n\n    from billing_history\n    group by 1\n),\n\naccount_invoice_data as (\n\n    select \n        account_id,\n        min(charge_date) as first_charge_date,\n        max(charge_date) as most_recent_charge_date,\n        count(distinct invoice_item_id) as invoice_item_count,\n        count(distinct invoice_id) as invoice_count\n    from invoice_item\n    group by 1\n),\n\naccount_subscription_data as (\n\n    select \n        account_id,\n        count(distinct subscription_id) as subscription_count,\n        sum(case when lower(status) = 'active' then 1 else 0 end) as active_subscription_count\n    from subscription\n    group by 1\n),\n\naccount_cumulatives as (\n    \n    select \n        account_totals.account_id,\n        account_details.created_date,\n        account_details.name,\n        account_details.account_number,\n        account_details.credit_balance, \n        account_details.mrr,\n        account_details.status,\n        account_details.auto_pay,\n        account_details.account_active_months,\n        account_details.is_new_customer\n\n        \n\n\n\n,\n\n        account_totals.total_tax_amount as total_taxes,\n        account_totals.total_refund_amount as total_refunds,\n        account_totals.total_discount_charges as total_discounts,\n        account_totals.total_invoice_amount,\n        account_totals.total_invoice_amount_home_currency,\n        account_totals.total_invoice_amount_paid as total_amount_paid,\n        account_totals.total_invoice_amount_unpaid as total_amount_not_paid,\n        account_totals.total_amount_past_due,\n        account_totals.most_recent_payment_date,\n\n        \n        account_totals.most_recent_credit_balance_adjustment_date, \n        \n        \n        account_invoice_data.first_charge_date,\n        account_invoice_data.most_recent_charge_date,\n        account_invoice_data.invoice_item_count,\n        account_invoice_data.invoice_count,\n        round(cast(\n    ( account_totals.total_invoice_amount ) / nullif( ( account_invoice_data.invoice_count ), 0)\n as numeric(28,6)), 2) as total_average_invoice_value,\n        round(cast(\n    ( account_invoice_data.invoice_item_count ) / nullif( ( account_invoice_data.invoice_count ), 0)\n as numeric(28,6)), 2) as total_units_per_invoice,\n        account_subscription_data.subscription_count as total_subscription_count,\n        account_subscription_data.active_subscription_count,\n        case when account_subscription_data.active_subscription_count = 0 then false else true end as is_currently_subscribed,\n        account_payment_data.account_amount_paid\n    from account_details\n        left join account_totals\n            on account_details.account_id = account_totals.account_id\n        left join account_invoice_data\n            on account_totals.account_id = account_invoice_data.account_id\n        left join account_subscription_data\n            on account_totals.account_id = account_subscription_data.account_id\n        left join account_payment_data\n            on account_totals.account_id = account_payment_data.account_id\n)\n\nselect * \nfrom account_cumulatives", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora.int_zuora__account_rolling_totals": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "int_zuora__account_rolling_totals", "resource_type": "model", "package_name": "zuora", "path": "intermediate/int_zuora__account_rolling_totals.sql", "original_file_path": "models/intermediate/int_zuora__account_rolling_totals.sql", "unique_id": "model.zuora.int_zuora__account_rolling_totals", "fqn": ["zuora", "intermediate", "int_zuora__account_rolling_totals"], "alias": "int_zuora__account_rolling_totals", "checksum": {"name": "sha256", "checksum": "9fe5d7069abfa5ba011ca8248db436361e64f5385734c6d55a52aefebd43f5fb"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501431.893318, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__account_rolling_totals\"", "raw_code": "{% set fields = ['invoices','invoice_items','invoice_amount','invoice_amount_paid','invoice_amount_unpaid','discount_charges','refunds'] %}\n{% do fields.append('tax_amount') if var('zuora__using_taxation_item', true) %}\n{% do fields.append('credit_balance_adjustment_amount') if var('zuora__using_credit_balance_adjustment', true) %}\n\nwith transaction_date_spine as (\n\n    select * \n    from {{ ref('int_zuora__transaction_date_spine') }}\n),\n\ntransactions_grouped as (\n\n    select *\n    from {{ ref('int_zuora__transactions_grouped') }}\n), \n\naccount_rolling as (\n    \n    select \n        *,\n        {% for f in fields %}\n            sum(daily_{{ f }}) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_{{ f }}\n        {%- if not loop.last -%},{%- endif -%}\n        {% endfor %}  \n    from transactions_grouped\n),\n\naccount_rolling_totals as (\n\n    select \n        coalesce(account_rolling.account_id, transaction_date_spine.account_id) as account_id,\n        coalesce(account_rolling.date_day, transaction_date_spine.date_day) as date_day,\n        coalesce(account_rolling.date_week, transaction_date_spine.date_week) as date_week,\n        coalesce(account_rolling.date_month, transaction_date_spine.date_month) as date_month,\n        coalesce(account_rolling.date_year, transaction_date_spine.date_year) as date_year,\n        account_rolling.daily_invoices,\n        account_rolling.daily_invoice_items,\n        account_rolling.daily_invoice_amount,\n        account_rolling.daily_invoice_amount_paid,\n        account_rolling.daily_invoice_amount_unpaid,\n\n        {% if var('zuora__using_taxation_item', true) %}\n        account_rolling.daily_tax_amount,\n        {% endif %}\n\n        {% if var('zuora__using_credit_balance_adjustment', true) %}\n        account_rolling.daily_credit_balance_adjustment_amount,\n        {% endif %}\n\n        account_rolling.daily_discount_charges,\n        account_rolling.daily_refunds,\n        {% for f in fields %}\n        case when account_rolling.rolling_{{ f }} is null and date_index = 1\n            then 0\n            else account_rolling.rolling_{{ f }}\n            end as rolling_{{ f }},\n        {% endfor %}\n        transaction_date_spine.date_index\n\n    from transaction_date_spine \n    left join account_rolling\n        on account_rolling.account_id = transaction_date_spine.account_id \n        and account_rolling.date_day = transaction_date_spine.date_day\n)\n\nselect * \nfrom account_rolling_totals", "language": "sql", "refs": [{"name": "int_zuora__transaction_date_spine", "package": null, "version": null}, {"name": "int_zuora__transactions_grouped", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zuora.int_zuora__transaction_date_spine", "model.zuora.int_zuora__transactions_grouped"]}, "compiled_path": "target/compiled/zuora/models/intermediate/int_zuora__account_rolling_totals.sql", "compiled": true, "compiled_code": "\n\n\n\nwith transaction_date_spine as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__transaction_date_spine\"\n),\n\ntransactions_grouped as (\n\n    select *\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__transactions_grouped\"\n), \n\naccount_rolling as (\n    \n    select \n        *,\n        \n            sum(daily_invoices) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_invoices,\n            sum(daily_invoice_items) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_invoice_items,\n            sum(daily_invoice_amount) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_invoice_amount,\n            sum(daily_invoice_amount_paid) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_invoice_amount_paid,\n            sum(daily_invoice_amount_unpaid) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_invoice_amount_unpaid,\n            sum(daily_discount_charges) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_discount_charges,\n            sum(daily_refunds) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_refunds,\n            sum(daily_tax_amount) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_tax_amount,\n            sum(daily_credit_balance_adjustment_amount) over (partition by account_id order by date_day, account_id rows unbounded preceding) as rolling_credit_balance_adjustment_amount  \n    from transactions_grouped\n),\n\naccount_rolling_totals as (\n\n    select \n        coalesce(account_rolling.account_id, transaction_date_spine.account_id) as account_id,\n        coalesce(account_rolling.date_day, transaction_date_spine.date_day) as date_day,\n        coalesce(account_rolling.date_week, transaction_date_spine.date_week) as date_week,\n        coalesce(account_rolling.date_month, transaction_date_spine.date_month) as date_month,\n        coalesce(account_rolling.date_year, transaction_date_spine.date_year) as date_year,\n        account_rolling.daily_invoices,\n        account_rolling.daily_invoice_items,\n        account_rolling.daily_invoice_amount,\n        account_rolling.daily_invoice_amount_paid,\n        account_rolling.daily_invoice_amount_unpaid,\n\n        \n        account_rolling.daily_tax_amount,\n        \n\n        \n        account_rolling.daily_credit_balance_adjustment_amount,\n        \n\n        account_rolling.daily_discount_charges,\n        account_rolling.daily_refunds,\n        \n        case when account_rolling.rolling_invoices is null and date_index = 1\n            then 0\n            else account_rolling.rolling_invoices\n            end as rolling_invoices,\n        \n        case when account_rolling.rolling_invoice_items is null and date_index = 1\n            then 0\n            else account_rolling.rolling_invoice_items\n            end as rolling_invoice_items,\n        \n        case when account_rolling.rolling_invoice_amount is null and date_index = 1\n            then 0\n            else account_rolling.rolling_invoice_amount\n            end as rolling_invoice_amount,\n        \n        case when account_rolling.rolling_invoice_amount_paid is null and date_index = 1\n            then 0\n            else account_rolling.rolling_invoice_amount_paid\n            end as rolling_invoice_amount_paid,\n        \n        case when account_rolling.rolling_invoice_amount_unpaid is null and date_index = 1\n            then 0\n            else account_rolling.rolling_invoice_amount_unpaid\n            end as rolling_invoice_amount_unpaid,\n        \n        case when account_rolling.rolling_discount_charges is null and date_index = 1\n            then 0\n            else account_rolling.rolling_discount_charges\n            end as rolling_discount_charges,\n        \n        case when account_rolling.rolling_refunds is null and date_index = 1\n            then 0\n            else account_rolling.rolling_refunds\n            end as rolling_refunds,\n        \n        case when account_rolling.rolling_tax_amount is null and date_index = 1\n            then 0\n            else account_rolling.rolling_tax_amount\n            end as rolling_tax_amount,\n        \n        case when account_rolling.rolling_credit_balance_adjustment_amount is null and date_index = 1\n            then 0\n            else account_rolling.rolling_credit_balance_adjustment_amount\n            end as rolling_credit_balance_adjustment_amount,\n        \n        transaction_date_spine.date_index\n\n    from transaction_date_spine \n    left join account_rolling\n        on account_rolling.account_id = transaction_date_spine.account_id \n        and account_rolling.date_day = transaction_date_spine.date_day\n)\n\nselect * \nfrom account_rolling_totals", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora.int_zuora__account_partitions": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "int_zuora__account_partitions", "resource_type": "model", "package_name": "zuora", "path": "intermediate/int_zuora__account_partitions.sql", "original_file_path": "models/intermediate/int_zuora__account_partitions.sql", "unique_id": "model.zuora.int_zuora__account_partitions", "fqn": ["zuora", "intermediate", "int_zuora__account_partitions"], "alias": "int_zuora__account_partitions", "checksum": {"name": "sha256", "checksum": "826e5c66073bb1ba00bdf7ef31a61475e43cd72de3bf4c870b31bf50ec680a81"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501431.898517, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__account_partitions\"", "raw_code": "{% set fields = ['rolling_invoices','rolling_invoice_items','rolling_invoice_amount','rolling_invoice_amount_paid','rolling_invoice_amount_unpaid','rolling_discount_charges','rolling_refunds'] %}\n{% do fields.append('rolling_tax_amount') if var('zuora__using_taxation_item', true) %}\n{% do fields.append('rolling_credit_balance_adjustment_amount') if var('zuora__using_credit_balance_adjustment', true) %}\n\nwith account_rolling_totals as (\n\n    select * \n    from {{ ref('int_zuora__account_rolling_totals') }}\n),\n\naccount_partitions as (\n\n    select\n        *,\n\n        {% for f in fields %}\n        sum(case when {{ f }} is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as {{ f }}_partition\n        {%- if not loop.last -%},{%- endif -%}\n        {% endfor %}              \n\n    from account_rolling_totals\n)\n\nselect * \nfrom account_partitions", "language": "sql", "refs": [{"name": "int_zuora__account_rolling_totals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.zuora.int_zuora__account_rolling_totals"]}, "compiled_path": "target/compiled/zuora/models/intermediate/int_zuora__account_partitions.sql", "compiled": true, "compiled_code": "\n\n\n\nwith account_rolling_totals as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__account_rolling_totals\"\n),\n\naccount_partitions as (\n\n    select\n        *,\n\n        \n        sum(case when rolling_invoices is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_invoices_partition,\n        sum(case when rolling_invoice_items is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_invoice_items_partition,\n        sum(case when rolling_invoice_amount is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_invoice_amount_partition,\n        sum(case when rolling_invoice_amount_paid is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_invoice_amount_paid_partition,\n        sum(case when rolling_invoice_amount_unpaid is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_invoice_amount_unpaid_partition,\n        sum(case when rolling_discount_charges is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_discount_charges_partition,\n        sum(case when rolling_refunds is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_refunds_partition,\n        sum(case when rolling_tax_amount is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_tax_amount_partition,\n        sum(case when rolling_credit_balance_adjustment_amount is null  \n            then 0  \n            else 1  \n                end) over (order by account_id, date_day rows unbounded preceding) as rolling_credit_balance_adjustment_amount_partition              \n\n    from account_rolling_totals\n)\n\nselect * \nfrom account_partitions", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora.int_zuora__transactions_grouped": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "int_zuora__transactions_grouped", "resource_type": "model", "package_name": "zuora", "path": "intermediate/int_zuora__transactions_grouped.sql", "original_file_path": "models/intermediate/int_zuora__transactions_grouped.sql", "unique_id": "model.zuora.int_zuora__transactions_grouped", "fqn": ["zuora", "intermediate", "int_zuora__transactions_grouped"], "alias": "int_zuora__transactions_grouped", "checksum": {"name": "sha256", "checksum": "39322d1caa4aa99453274ae717cdef24ac59723df660c9d3cb3f2eb3d8746434"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501431.902863, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__transactions_grouped\"", "raw_code": "{% set sum_cols = ['invoice_amount', 'invoice_amount_paid', 'invoice_amount_unpaid', 'discount_charges'] %}\n{% do sum_cols.append('tax_amount') if var('zuora__using_taxation_item', true) %}\n{% do sum_cols.append('credit_balance_adjustment_amount') if var('zuora__using_credit_balance_adjustment', true) %}\n\n\nwith invoice_joined as (\n\n    select *\n    from {{ ref('zuora__billing_history') }}\n),\n\ntransactions_grouped as (\n\n    select \n        account_id, \n        invoice_date as date_day,             \n        cast({{ dbt.date_trunc(\"week\", \"invoice_date\") }} as date) as date_week, \n        cast({{ dbt.date_trunc(\"month\", \"invoice_date\") }} as date) as date_month, \n        cast({{ dbt.date_trunc(\"year\", \"invoice_date\") }} as date) as date_year, \n        count(distinct invoice_id) as daily_invoices,\n        sum(invoice_items) as daily_invoice_items,\n\n        {% for col in sum_cols %}\n        {% if var('zuora__using_multicurrency', false) %}\n            sum({{ col }}) as daily_{{ col }},\n        {% else %} \n            sum({{ col }}_home_currency) as daily_{{ col }},\n        {% endif %}\n        {% endfor %}\n\n        sum(refund_amount) as daily_refunds \n\n    from invoice_joined\n    {{ dbt_utils.group_by(5) }}\n)\n\nselect *\nfrom transactions_grouped", "language": "sql", "refs": [{"name": "zuora__billing_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_utils.group_by"], "nodes": ["model.zuora.zuora__billing_history"]}, "compiled_path": "target/compiled/zuora/models/intermediate/int_zuora__transactions_grouped.sql", "compiled": true, "compiled_code": "\n\n\n\n\nwith invoice_joined as (\n\n    select *\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__billing_history\"\n),\n\ntransactions_grouped as (\n\n    select \n        account_id, \n        invoice_date as date_day,             \n        cast(date_trunc('week', invoice_date) as date) as date_week, \n        cast(date_trunc('month', invoice_date) as date) as date_month, \n        cast(date_trunc('year', invoice_date) as date) as date_year, \n        count(distinct invoice_id) as daily_invoices,\n        sum(invoice_items) as daily_invoice_items,\n\n        \n         \n            sum(invoice_amount_home_currency) as daily_invoice_amount,\n        \n        \n         \n            sum(invoice_amount_paid_home_currency) as daily_invoice_amount_paid,\n        \n        \n         \n            sum(invoice_amount_unpaid_home_currency) as daily_invoice_amount_unpaid,\n        \n        \n         \n            sum(discount_charges_home_currency) as daily_discount_charges,\n        \n        \n         \n            sum(tax_amount_home_currency) as daily_tax_amount,\n        \n        \n         \n            sum(credit_balance_adjustment_amount_home_currency) as daily_credit_balance_adjustment_amount,\n        \n        \n\n        sum(refund_amount) as daily_refunds \n\n    from invoice_joined\n    group by 1,2,3,4,5\n)\n\nselect *\nfrom transactions_grouped", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora.int_zuora__billing_enriched": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "int_zuora__billing_enriched", "resource_type": "model", "package_name": "zuora", "path": "intermediate/int_zuora__billing_enriched.sql", "original_file_path": "models/intermediate/int_zuora__billing_enriched.sql", "unique_id": "model.zuora.int_zuora__billing_enriched", "fqn": ["zuora", "intermediate", "int_zuora__billing_enriched"], "alias": "int_zuora__billing_enriched", "checksum": {"name": "sha256", "checksum": "136df69dc151a95c7aa3a79ec87e9af0bb8bb42bdb4cdf8ee4cfb7139a8533d9"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501431.908177, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__billing_enriched\"", "raw_code": "with invoice_item_enriched as (\n\n    select \n        invoice_id,\n        count(distinct invoice_item_id) as invoice_items,\n        count(distinct product_id) as products,\n        count(distinct subscription_id) as subscriptions,\n        sum(case when cast(processing_type as {{ dbt.type_string() }}) = '1' then charge_amount else 0 end) as discount_charges,\n        sum(case when cast(processing_type as {{ dbt.type_string() }}) = '1' then charge_amount_home_currency else 0 end) as discount_charges_home_currency,\n        sum(quantity) as units,\n        min(charge_date) as first_charge_date,\n        max(charge_date) as most_recent_charge_date,\n        min(service_start_date) as invoice_service_start_date,\n        max(service_end_date) as invoice_service_end_date\n    from {{ var('invoice_item') }}\n    where is_most_recent_record\n    {{ dbt_utils.group_by(1) }}\n),\n\ninvoice_payment as (\n\n    select \n        invoice_id,\n        payment_id\n    from {{ var('invoice_payment') }} \n    where is_most_recent_record\n),\n\npayment as (\n\n    select\n        payment_id,\n        payment_number,\n        effective_date as payment_date,\n        status as payment_status,\n        type as payment_type, \n        amount_home_currency as payment_amount_home_currency,\n        payment_method_id\n    from {{ var('payment') }}\n    where is_most_recent_record\n),\n\npayment_method as (\n    \n    select \n        payment_method_id,\n        type as payment_method_type,\n        coalesce(ach_account_type, bank_transfer_account_type, credit_card_type, paypal_type, sub_type) as payment_method_subtype,\n        active as is_payment_method_active\n    from {{ var('payment_method') }} \n    where is_most_recent_record\n),\n\n{% if var('zuora__using_credit_balance_adjustment', true) %}\ncredit_balance_adjustment as (\n\n    select \n        invoice_id,\n        credit_balance_adjustment_id,\n        number as credit_balance_adjustment_number,\n        reason_code as credit_balance_adjustment_reason_code,\n        amount_home_currency as credit_balance_adjustment_amount_home_currency,\n        adjustment_date as credit_balance_adjustment_date\n    from {{ var('credit_balance_adjustment') }}\n    where is_most_recent_record\n),\n{% endif %}\n\n{% if var('zuora__using_taxation_item', true) %}\ntaxes as (\n\n    select\n        invoice_id, \n        sum(tax_amount_home_currency) as tax_amount_home_currency\n    from {{ var('taxation_item') }} \n    where is_most_recent_record\n    {{ dbt_utils.group_by(1) }}\n),\n{% endif %}\n\nbilling_enriched as (\n\n    select \n        invoice_item_enriched.invoice_id,\n        invoice_item_enriched.invoice_items,\n        invoice_item_enriched.products,\n        invoice_item_enriched.subscriptions,\n        invoice_item_enriched.discount_charges,\n        invoice_item_enriched.discount_charges_home_currency,\n        invoice_item_enriched.units,\n        invoice_item_enriched.first_charge_date,\n        invoice_item_enriched.most_recent_charge_date,\n        invoice_item_enriched.invoice_service_start_date,\n        invoice_item_enriched.invoice_service_end_date,\n\n        {% if var('zuora__using_taxation_item', true) %}\n        taxes.tax_amount_home_currency,\n        {% endif %}\n\n        count(distinct payment.payment_id) as payments, \n        sum(payment_amount_home_currency) as invoice_amount_paid_home_currency,\n        min(payment_date) as first_payment_date,\n        max(payment_date) as most_recent_payment_date, \n        count(distinct payment_method.payment_method_id) as payment_methods\n\n        {% if var('zuora__using_credit_balance_adjustment', true) %}\n        , count(distinct credit_balance_adjustment_id) as credit_balance_adjustments\n        , sum(credit_balance_adjustment_amount_home_currency) as credit_balance_adjustment_amount_home_currency\n        , min(credit_balance_adjustment_date) as first_credit_balance_adjustment_date\n        , max(credit_balance_adjustment_date) as most_recent_credit_balance_adjustment_date\n        {% endif %}\n\n    from invoice_item_enriched\n    left join invoice_payment \n        on invoice_item_enriched.invoice_id = invoice_payment.invoice_id\n    left join payment\n        on invoice_payment.payment_id = payment.payment_id\n    left join payment_method\n        on payment.payment_method_id = payment_method.payment_method_id\n    \n    {% if var('zuora__using_credit_balance_adjustment', true) %}\n    left join credit_balance_adjustment\n        on invoice_item_enriched.invoice_id = credit_balance_adjustment.invoice_id \n    {% endif %}\n\n    {% if var('zuora__using_taxation_item', true) %}\n    left join taxes\n        on invoice_item_enriched.invoice_id = taxes.invoice_id\n    {% endif %}\n\n    {{ dbt_utils.group_by(12) if var('zuora__using_taxation_item', true) else dbt_utils.group_by(11) }} \n)\n\nselect * \nfrom billing_enriched", "language": "sql", "refs": [{"name": "stg_zuora__invoice_item", "package": null, "version": null}, {"name": "stg_zuora__invoice_payment", "package": null, "version": null}, {"name": "stg_zuora__payment", "package": null, "version": null}, {"name": "stg_zuora__payment_method", "package": null, "version": null}, {"name": "stg_zuora__credit_balance_adjustment", "package": null, "version": null}, {"name": "stg_zuora__taxation_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt_utils.group_by"], "nodes": ["model.zuora_source.stg_zuora__invoice_item", "model.zuora_source.stg_zuora__invoice_payment", "model.zuora_source.stg_zuora__payment", "model.zuora_source.stg_zuora__payment_method", "model.zuora_source.stg_zuora__credit_balance_adjustment", "model.zuora_source.stg_zuora__taxation_item"]}, "compiled_path": "target/compiled/zuora/models/intermediate/int_zuora__billing_enriched.sql", "compiled": true, "compiled_code": "with invoice_item_enriched as (\n\n    select \n        invoice_id,\n        count(distinct invoice_item_id) as invoice_items,\n        count(distinct product_id) as products,\n        count(distinct subscription_id) as subscriptions,\n        sum(case when cast(processing_type as TEXT) = '1' then charge_amount else 0 end) as discount_charges,\n        sum(case when cast(processing_type as TEXT) = '1' then charge_amount_home_currency else 0 end) as discount_charges_home_currency,\n        sum(quantity) as units,\n        min(charge_date) as first_charge_date,\n        max(charge_date) as most_recent_charge_date,\n        min(service_start_date) as invoice_service_start_date,\n        max(service_end_date) as invoice_service_end_date\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice_item\"\n    where is_most_recent_record\n    group by 1\n),\n\ninvoice_payment as (\n\n    select \n        invoice_id,\n        payment_id\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice_payment\" \n    where is_most_recent_record\n),\n\npayment as (\n\n    select\n        payment_id,\n        payment_number,\n        effective_date as payment_date,\n        status as payment_status,\n        type as payment_type, \n        amount_home_currency as payment_amount_home_currency,\n        payment_method_id\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__payment\"\n    where is_most_recent_record\n),\n\npayment_method as (\n    \n    select \n        payment_method_id,\n        type as payment_method_type,\n        coalesce(ach_account_type, bank_transfer_account_type, credit_card_type, paypal_type, sub_type) as payment_method_subtype,\n        active as is_payment_method_active\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__payment_method\" \n    where is_most_recent_record\n),\n\n\ncredit_balance_adjustment as (\n\n    select \n        invoice_id,\n        credit_balance_adjustment_id,\n        number as credit_balance_adjustment_number,\n        reason_code as credit_balance_adjustment_reason_code,\n        amount_home_currency as credit_balance_adjustment_amount_home_currency,\n        adjustment_date as credit_balance_adjustment_date\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__credit_balance_adjustment\"\n    where is_most_recent_record\n),\n\n\n\ntaxes as (\n\n    select\n        invoice_id, \n        sum(tax_amount_home_currency) as tax_amount_home_currency\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__taxation_item\" \n    where is_most_recent_record\n    group by 1\n),\n\n\nbilling_enriched as (\n\n    select \n        invoice_item_enriched.invoice_id,\n        invoice_item_enriched.invoice_items,\n        invoice_item_enriched.products,\n        invoice_item_enriched.subscriptions,\n        invoice_item_enriched.discount_charges,\n        invoice_item_enriched.discount_charges_home_currency,\n        invoice_item_enriched.units,\n        invoice_item_enriched.first_charge_date,\n        invoice_item_enriched.most_recent_charge_date,\n        invoice_item_enriched.invoice_service_start_date,\n        invoice_item_enriched.invoice_service_end_date,\n\n        \n        taxes.tax_amount_home_currency,\n        \n\n        count(distinct payment.payment_id) as payments, \n        sum(payment_amount_home_currency) as invoice_amount_paid_home_currency,\n        min(payment_date) as first_payment_date,\n        max(payment_date) as most_recent_payment_date, \n        count(distinct payment_method.payment_method_id) as payment_methods\n\n        \n        , count(distinct credit_balance_adjustment_id) as credit_balance_adjustments\n        , sum(credit_balance_adjustment_amount_home_currency) as credit_balance_adjustment_amount_home_currency\n        , min(credit_balance_adjustment_date) as first_credit_balance_adjustment_date\n        , max(credit_balance_adjustment_date) as most_recent_credit_balance_adjustment_date\n        \n\n    from invoice_item_enriched\n    left join invoice_payment \n        on invoice_item_enriched.invoice_id = invoice_payment.invoice_id\n    left join payment\n        on invoice_payment.payment_id = payment.payment_id\n    left join payment_method\n        on payment.payment_method_id = payment_method.payment_method_id\n    \n    \n    left join credit_balance_adjustment\n        on invoice_item_enriched.invoice_id = credit_balance_adjustment.invoice_id \n    \n\n    \n    left join taxes\n        on invoice_item_enriched.invoice_id = taxes.invoice_id\n    \n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12 \n)\n\nselect * \nfrom billing_enriched", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora.int_zuora__transaction_date_spine": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "int_zuora__transaction_date_spine", "resource_type": "model", "package_name": "zuora", "path": "intermediate/int_zuora__transaction_date_spine.sql", "original_file_path": "models/intermediate/int_zuora__transaction_date_spine.sql", "unique_id": "model.zuora.int_zuora__transaction_date_spine", "fqn": ["zuora", "intermediate", "int_zuora__transaction_date_spine"], "alias": "int_zuora__transaction_date_spine", "checksum": {"name": "sha256", "checksum": "f80779319c654035ebca0cfe4a94f62b99ca212eccc94f5f0a8af689c50e44cc"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501431.916569, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"int_zuora__transaction_date_spine\"", "raw_code": "with spine as (\n\n    {% if execute %}\n    {% if not var('zuora_daily_overview_first_date', None) or not var('zuora_daily_overview_last_date', None) %}\n        {% set date_query %}\n        select \n            min( invoice_date ) as min_date,\n            max( invoice_date ) as max_date\n        from {{ source('zuora', 'invoice') }}\n        {% endset %}\n\n        {% set calc_first_date = run_query(date_query).columns[0][0]|string %}\n        {% set calc_last_date = run_query(date_query).columns[1][0]|string %}\n    {% endif %}\n\n    {# If only compiling, creates range going back 1 year #}\n    {% else %} \n        {% set calc_first_date = dbt.dateadd(\"year\", \"-1\", \"current_date\") %}\n        {% set calc_last_date = dbt.current_timestamp_backcompat() %}\n    {% endif %}\n\n    {# Prioritizes variables over calculated dates #}\n    {% set first_date = var('zuora_daily_overview_first_date', calc_first_date)|string %}\n    {% set last_date = var('zuora_daily_overview_last_date', calc_last_date)|string %}\n\n    {{ dbt_utils.date_spine(\n        datepart=\"day\",\n        start_date = \"cast('\" ~ first_date[0:10] ~ \"'as date)\",\n        end_date = \"cast('\" ~ last_date[0:10] ~ \"'as date)\"\n        )\n    }}\n),\n\naccount_first_invoice as (\n\n    select \n        account_id,\n        min(invoice_date) as first_invoice_date\n    from {{ ref('zuora__billing_history') }}\n    {{ dbt_utils.group_by(1) }}\n),\n\ndate_spine as (\n\n    select\n        cast({{ dbt.date_trunc(\"day\", \"date_day\") }} as date) as date_day, \n        cast({{ dbt.date_trunc(\"week\", \"date_day\") }} as date) as date_week, \n        cast({{ dbt.date_trunc(\"month\", \"date_day\") }} as date) as date_month,\n        cast({{ dbt.date_trunc(\"year\", \"date_day\") }} as date) as date_year,  \n        row_number() over (order by cast({{ dbt.date_trunc(\"day\", \"date_day\") }} as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select \n        distinct account_first_invoice.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account_first_invoice\n    cross join date_spine\n    where cast({{ dbt.date_trunc('day', 'account_first_invoice.first_invoice_date') }} as date) <= date_spine.date_day\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "zuora__billing_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp_backcompat", "macro.dbt_utils.date_spine", "macro.dbt_utils.group_by", "macro.dbt.date_trunc", "macro.dbt.run_query"], "nodes": ["model.zuora.zuora__billing_history"]}, "compiled_path": "target/compiled/zuora/models/intermediate/int_zuora__transaction_date_spine.sql", "compiled": true, "compiled_code": "with spine as (\n\n    \n    \n        \n\n        \n        \n    \n\n    \n    \n\n    \n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 334\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2015-02-15'as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2016-01-15'as date)\n\n)\n\nselect * from filtered\n\n\n),\n\naccount_first_invoice as (\n\n    select \n        account_id,\n        min(invoice_date) as first_invoice_date\n    from \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__billing_history\"\n    group by 1\n),\n\ndate_spine as (\n\n    select\n        cast(date_trunc('day', date_day) as date) as date_day, \n        cast(date_trunc('week', date_day) as date) as date_week, \n        cast(date_trunc('month', date_day) as date) as date_month,\n        cast(date_trunc('year', date_day) as date) as date_year,  \n        row_number() over (order by cast(date_trunc('day', date_day) as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select \n        distinct account_first_invoice.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account_first_invoice\n    cross join date_spine\n    where cast(date_trunc('day', account_first_invoice.first_invoice_date) as date) <= date_spine.date_day\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__product": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__product", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__product.sql", "original_file_path": "models/stg_zuora__product.sql", "unique_id": "model.zuora_source.stg_zuora__product", "fqn": ["zuora_source", "stg_zuora__product"], "alias": "stg_zuora__product", "checksum": {"name": "sha256", "checksum": "c4a47d253bf71b8428178b1e75853f9a1e7877a91b791a07b70cafa2b85dd37d"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A product is an item or service that your company sells. In the subscription economy, a product is generally a service that your customers subscribe to rather than a physical item that they purchase one time.", "columns": {"product_id": {"name": "product_id", "description": "The unique identifier for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the product was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A description of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_end_date": {"name": "effective_end_date", "description": "The date when the product is no longer available for purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_start_date": {"name": "effective_start_date", "description": "The date when the product becomes available for purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sku": {"name": "sku", "description": "The SKU (stock keeping unit) of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the product was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.513298, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__product_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__product_tmp')),\n                staging_columns=get_product_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_id,\n        category,\n        created_by_id,\n        created_date,\n        description,\n        effective_end_date,\n        effective_start_date,\n        name,\n        sku,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__product_tmp", "package": null, "version": null}, {"name": "stg_zuora__product_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_product_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__product_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__product.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    effective_end_date\n    \n as \n    \n    effective_end_date\n    \n, \n    \n    \n    effective_start_date\n    \n as \n    \n    effective_start_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_id,\n        category,\n        created_by_id,\n        created_date,\n        description,\n        effective_end_date,\n        effective_start_date,\n        name,\n        sku,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__product_rate_plan_charge": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__product_rate_plan_charge", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__product_rate_plan_charge.sql", "original_file_path": "models/stg_zuora__product_rate_plan_charge.sql", "unique_id": "model.zuora_source.stg_zuora__product_rate_plan_charge", "fqn": ["zuora_source", "stg_zuora__product_rate_plan_charge"], "alias": "stg_zuora__product_rate_plan_charge", "checksum": {"name": "sha256", "checksum": "99150ca4033d9d0cdd5ae79041d37f5c3c6dd5cf75e2b10f3c75b2bb036fe28b"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A product rate plan charge represents a charge model or a set of fees associated with a product rate plan, which is the part of a product that your customers subscribe to. Each product rate plan can have multiple product rate plan charges.", "columns": {"product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "Unique identifier of the product rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The id of the accounting code for the accounts receivable account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "apply_discount_to": {"name": "apply_discount_to", "description": "The type of charge to which discounts apply.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_cycle_day": {"name": "bill_cycle_day", "description": "The day of the bill cycle on which the charge should be billed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_cycle_type": {"name": "bill_cycle_type", "description": "The type of bill cycle for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_period": {"name": "billing_period", "description": "The billing period for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_model": {"name": "charge_model", "description": "The charge model for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_type": {"name": "charge_type", "description": "The type of charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date on which the charge was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_quantity": {"name": "default_quantity", "description": "The default quantity for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deferred_revenue_accounting_code_id": {"name": "deferred_revenue_accounting_code_id", "description": "The id of the accounting code for deferred revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A description of the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "The id of the discount class for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_level": {"name": "discount_level", "description": "The level at which the discount is applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_date_condition": {"name": "end_date_condition", "description": "The condition that determines when the charge ends.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclude_item_billing_from_revenue_accounting": {"name": "exclude_item_billing_from_revenue_accounting", "description": "Indicates whether the charge should be excluded from revenue accounting.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclude_item_booking_from_revenue_accounting": {"name": "exclude_item_booking_from_revenue_accounting", "description": "Indicates whether the charge should be excluded from booking revenue accounting.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "included_units": {"name": "included_units", "description": "The number of units included in the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_stacked_discount": {"name": "is_stacked_discount", "description": "Indicates whether the discount is a stacked discount. Values are true or false.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "list_price_base": {"name": "list_price_base", "description": "The price used to calculate the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_quantity": {"name": "max_quantity", "description": "The maximum number of units allowed for this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "min_quantity": {"name": "min_quantity", "description": "The minimum number of units required for this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The unique identifier of the product associated with the product rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The unique identifier of the product rate plan associated with the product rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specific_billing_period": {"name": "specific_billing_period", "description": "The billing period for this product rate plan charge. Values are DAY, WEEK, MONTH, and YEAR.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_mode": {"name": "tax_mode", "description": "Indicates how the charge is taxed. Values are TAXABLE, NON-TAXABLE, and TAXED_INCLUSIVE.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Indicates whether the charge is taxable. Values are true or false.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trigger_event": {"name": "trigger_event", "description": "The event that triggers the charge. Values are SERVICE_ACTIVATION, CONTRACT_EFFECTIVE, CUSTOMER_ACCEPTANCE, or SERVICE_USAGE.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uom": {"name": "uom", "description": "The unit of measure for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "up_to_periods": {"name": "up_to_periods", "description": "The maximum number of billing periods allowed for this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "up_to_periods_type": {"name": "up_to_periods_type", "description": "The billing period type for the up to periods setting. Values are DAY, WEEK, MONTH, and YEAR.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated the product rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the product rate plan charge was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "use_discount_specific_accounting_code": {"name": "use_discount_specific_accounting_code", "description": "Indicates whether the discount uses a specific accounting code. Values are true or false.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "weekly_bill_cycle_day": {"name": "weekly_bill_cycle_day", "description": "The day of the week when the bill cycle starts for a weekly billing period. Values are MON, TUE, WED, THU, FRI, SAT, and SUN.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the product rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.517926, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product_rate_plan_charge\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__product_rate_plan_charge_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__product_rate_plan_charge_tmp')),\n                staging_columns=get_product_rate_plan_charge_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_rate_plan_charge_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        apply_discount_to,\n        bill_cycle_day,\n        bill_cycle_type,\n        billing_period,  \n        charge_model,\n        charge_type,\n        created_by_id,\n        created_date,\n        default_quantity,\n        deferred_revenue_accounting_code_id,\n        description,\n        discount_class_id,\n        discount_level,\n        end_date_condition,\n        exclude_item_billing_from_revenue_accounting,\n        exclude_item_booking_from_revenue_accounting,\n        included_units,\n        is_stacked_discount, \n        list_price_base,\n        max_quantity,\n        min_quantity,\n        name,\n        product_id,\n        product_rate_plan_id, \n        specific_billing_period,\n        tax_mode,\n        taxable,\n        trigger_event,\n        uom,\n        up_to_periods,\n        up_to_periods_type,\n        updated_by_id,\n        updated_date, \n        use_discount_specific_accounting_code,\n        weekly_bill_cycle_day,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__product_rate_plan_charge_tmp", "package": null, "version": null}, {"name": "stg_zuora__product_rate_plan_charge_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_product_rate_plan_charge_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__product_rate_plan_charge_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__product_rate_plan_charge.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product_rate_plan_charge_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    apply_discount_to\n    \n as \n    \n    apply_discount_to\n    \n, \n    \n    \n    bill_cycle_day\n    \n as \n    \n    bill_cycle_day\n    \n, \n    \n    \n    bill_cycle_type\n    \n as \n    \n    bill_cycle_type\n    \n, \n    \n    \n    billing_period\n    \n as \n    \n    billing_period\n    \n, \n    \n    \n    charge_model\n    \n as \n    \n    charge_model\n    \n, \n    \n    \n    charge_type\n    \n as \n    \n    charge_type\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_quantity\n    \n as \n    \n    default_quantity\n    \n, \n    \n    \n    deferred_revenue_accounting_code_id\n    \n as \n    \n    deferred_revenue_accounting_code_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_level\n    \n as \n    \n    discount_level\n    \n, \n    \n    \n    end_date_condition\n    \n as \n    \n    end_date_condition\n    \n, \n    \n    \n    exclude_item_billing_from_revenue_accounting\n    \n as \n    \n    exclude_item_billing_from_revenue_accounting\n    \n, \n    \n    \n    exclude_item_booking_from_revenue_accounting\n    \n as \n    \n    exclude_item_booking_from_revenue_accounting\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    included_units\n    \n as \n    \n    included_units\n    \n, \n    \n    \n    is_stacked_discount\n    \n as \n    \n    is_stacked_discount\n    \n, \n    \n    \n    list_price_base\n    \n as \n    \n    list_price_base\n    \n, \n    \n    \n    max_quantity\n    \n as \n    \n    max_quantity\n    \n, \n    \n    \n    min_quantity\n    \n as \n    \n    min_quantity\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    specific_billing_period\n    \n as \n    \n    specific_billing_period\n    \n, \n    \n    \n    tax_mode\n    \n as \n    \n    tax_mode\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    trigger_event\n    \n as \n    \n    trigger_event\n    \n, \n    \n    \n    uom\n    \n as \n    \n    uom\n    \n, \n    \n    \n    up_to_periods\n    \n as \n    \n    up_to_periods\n    \n, \n    \n    \n    up_to_periods_type\n    \n as \n    \n    up_to_periods_type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    use_discount_specific_accounting_code\n    \n as \n    \n    use_discount_specific_accounting_code\n    \n, \n    \n    \n    weekly_bill_cycle_day\n    \n as \n    \n    weekly_bill_cycle_day\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_rate_plan_charge_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        apply_discount_to,\n        bill_cycle_day,\n        bill_cycle_type,\n        billing_period,  \n        charge_model,\n        charge_type,\n        created_by_id,\n        created_date,\n        default_quantity,\n        deferred_revenue_accounting_code_id,\n        description,\n        discount_class_id,\n        discount_level,\n        end_date_condition,\n        exclude_item_billing_from_revenue_accounting,\n        exclude_item_booking_from_revenue_accounting,\n        included_units,\n        is_stacked_discount, \n        list_price_base,\n        max_quantity,\n        min_quantity,\n        name,\n        product_id,\n        product_rate_plan_id, \n        specific_billing_period,\n        tax_mode,\n        taxable,\n        trigger_event,\n        uom,\n        up_to_periods,\n        up_to_periods_type,\n        updated_by_id,\n        updated_date, \n        use_discount_specific_accounting_code,\n        weekly_bill_cycle_day,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__invoice_item": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__invoice_item", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__invoice_item.sql", "original_file_path": "models/stg_zuora__invoice_item.sql", "unique_id": "model.zuora_source.stg_zuora__invoice_item", "fqn": ["zuora_source", "stg_zuora__invoice_item"], "alias": "stg_zuora__invoice_item", "checksum": {"name": "sha256", "checksum": "fdccd55db70349c1fdb29a131531b81e87c23503b9407e695236d094c32a80b1"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "An invoice item is an individual line item in an invoice. Invoice items are charges, such as a monthly recurring charge.", "columns": {"invoice_item_id": {"name": "invoice_item_id", "description": "The unique identifier of the invoice item table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "id of the account associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "id of the accounting code for the account receivable account for this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "Accounting code for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "id of the amendment associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "applied_to_invoice_item_id": {"name": "applied_to_invoice_item_id", "description": "id of the invoice item that this invoice item is applied to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Balance of the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "id of the contact to whom the invoice item is billed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "Amount charged for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_amount_home_currency": {"name": "charge_amount_home_currency", "description": "Amount charged for the invoice item in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_date": {"name": "charge_date", "description": "Date on which the charge for the invoice item was made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_name": {"name": "charge_name", "description": "Name of the charge associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "id of the user who created this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Date on which the invoice item was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deferred_revenue_accounting_code_id": {"name": "deferred_revenue_accounting_code_id", "description": "id of the accounting code for the deferred revenue account for this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "Exchange rate for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "Date of the exchange rate for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Currency used for the invoice item in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "id of the invoice associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "id of the journal entry associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "id of the parent account associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "processing_type": {"name": "processing_type", "description": "Type of processing for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "id of the product associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "id of the product rate plan charge associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "id of the product rate plan associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate_plan_charge_id": {"name": "rate_plan_charge_id", "description": "id of the rate plan charge associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate_plan_id": {"name": "rate_plan_id", "description": "id of the rate plan associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recognized_revenue_accounting_code_id": {"name": "recognized_revenue_accounting_code_id", "description": "id of the accounting code for the recognized revenue account for this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rev_rec_start_date": {"name": "rev_rec_start_date", "description": "Date on which revenue recognition starts for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_end_date": {"name": "service_end_date", "description": "End date of the service associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_start_date": {"name": "service_start_date", "description": "Start date of the service associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sku": {"name": "sku", "description": "SKU of the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact to whom the product or service was sold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_item_type": {"name": "source_item_type", "description": "The type of the source item that created the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The tax amount for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_mode": {"name": "tax_mode", "description": "The tax mode for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The transaction currency for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "The unit price for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uom": {"name": "uom", "description": "The unit of measure for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the invoice item was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.5040529, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice_item\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__invoice_item_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__invoice_item_tmp')),\n                staging_columns=get_invoice_item_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_item_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code, \n        amendment_id,\n        applied_to_invoice_item_id,\n        balance,\n        bill_to_contact_id, \n        charge_amount, \n        charge_amount_home_currency,\n        charge_date,\n        charge_name,\n        created_by_id,\n        created_date,\n        deferred_revenue_accounting_code_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        invoice_id,\n        journal_entry_id,\n        parent_account_id,\n        processing_type,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id,\n        quantity,\n        rate_plan_charge_id,\n        rate_plan_id,\n        recognized_revenue_accounting_code_id,\n        rev_rec_start_date,\n        service_end_date,\n        service_start_date,\n        sku,\n        sold_to_contact_id,\n        source_item_type,\n        subscription_id,\n        tax_amount,\n        tax_mode,\n        transaction_currency,\n        unit_price,\n        uom,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__invoice_item_tmp", "package": null, "version": null}, {"name": "stg_zuora__invoice_item_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_invoice_item_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__invoice_item_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__invoice_item.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amendment_id\n    \n as \n    \n    amendment_id\n    \n, \n    \n    \n    applied_to_invoice_item_id\n    \n as \n    \n    applied_to_invoice_item_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    charge_amount\n    \n as \n    \n    charge_amount\n    \n, \n    \n    \n    charge_amount_home_currency\n    \n as \n    \n    charge_amount_home_currency\n    \n, \n    \n    \n    charge_date\n    \n as \n    \n    charge_date\n    \n, \n    \n    \n    charge_name\n    \n as \n    \n    charge_name\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    deferred_revenue_accounting_code_id\n    \n as \n    \n    deferred_revenue_accounting_code_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    processing_type\n    \n as \n    \n    processing_type\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_charge_id\n    \n as \n    \n    product_rate_plan_charge_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    rate_plan_charge_id\n    \n as \n    \n    rate_plan_charge_id\n    \n, \n    \n    \n    rate_plan_id\n    \n as \n    \n    rate_plan_id\n    \n, \n    \n    \n    recognized_revenue_accounting_code_id\n    \n as \n    \n    recognized_revenue_accounting_code_id\n    \n, \n    \n    \n    rev_rec_start_date\n    \n as \n    \n    rev_rec_start_date\n    \n, \n    \n    \n    service_end_date\n    \n as \n    \n    service_end_date\n    \n, \n    \n    \n    service_start_date\n    \n as \n    \n    service_start_date\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    source_item_type\n    \n as \n    \n    source_item_type\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_mode\n    \n as \n    \n    tax_mode\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    uom\n    \n as \n    \n    uom\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_item_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code, \n        amendment_id,\n        applied_to_invoice_item_id,\n        balance,\n        bill_to_contact_id, \n        charge_amount, \n        charge_amount_home_currency,\n        charge_date,\n        charge_name,\n        created_by_id,\n        created_date,\n        deferred_revenue_accounting_code_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        invoice_id,\n        journal_entry_id,\n        parent_account_id,\n        processing_type,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id,\n        quantity,\n        rate_plan_charge_id,\n        rate_plan_id,\n        recognized_revenue_accounting_code_id,\n        rev_rec_start_date,\n        service_end_date,\n        service_start_date,\n        sku,\n        sold_to_contact_id,\n        source_item_type,\n        subscription_id,\n        tax_amount,\n        tax_mode,\n        transaction_currency,\n        unit_price,\n        uom,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__payment": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__payment", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__payment.sql", "original_file_path": "models/stg_zuora__payment.sql", "unique_id": "model.zuora_source.stg_zuora__payment", "fqn": ["zuora_source", "stg_zuora__payment"], "alias": "stg_zuora__payment", "checksum": {"name": "sha256", "checksum": "abe37c67ddd3cbbdc7572032fdb37390990c96d40b32fa5feb925ee902869fe8"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A payment is the money that customers send to pay for invoices related to their subscriptions", "columns": {"payment_id": {"name": "payment_id", "description": "The unique identifier of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the Zuora account associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the payment in the transaction currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The amount of the payment in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "applied_amount": {"name": "applied_amount", "description": "The amount of the payment that has been applied to one or more invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "applied_credit_balance_amount": {"name": "applied_credit_balance_amount", "description": "The amount of the payment that has been applied to a credit balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact to which the payment should be billed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancelled_on": {"name": "cancelled_on", "description": "The date the payment was cancelled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "A comment associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date the payment was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "The date the payment will be effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used to convert the payment amount from the transaction currency to the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date the exchange rate was set.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "The home currency of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The id of the parent account associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "The id of the payment method used for the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_number": {"name": "payment_number", "description": "The payment number assigned by Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "The amount of the payment that has been refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "settled_on": {"name": "settled_on", "description": "The date the payment was settled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact who made the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "submitted_on": {"name": "submitted_on", "description": "The date the payment was submitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The transaction currency of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "Whether the payment has been transferred to the accounting system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unapplied_amount": {"name": "unapplied_amount", "description": "The amount of the payment that has not yet been applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date the payment was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.509658, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__payment\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__payment_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__payment_tmp')),\n                staging_columns=get_payment_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_id,\n        account_id,\n        accounting_code,\n        amount,\n        amount_home_currency,\n        applied_amount,\n        applied_credit_balance_amount,\n        bill_to_contact_id,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        currency,\n        effective_date,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        parent_account_id,\n        payment_method_id,\n        payment_number,\n        refund_amount,\n        settled_on, \n        sold_to_contact_id,\n        status,\n        submitted_on,\n        transaction_currency,\n        transferred_to_accounting,\n        type,\n        unapplied_amount,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__payment_tmp", "package": null, "version": null}, {"name": "stg_zuora__payment_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_payment_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__payment_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__payment.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__payment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_home_currency\n    \n as \n    \n    amount_home_currency\n    \n, \n    \n    \n    applied_amount\n    \n as \n    \n    applied_amount\n    \n, \n    \n    \n    applied_credit_balance_amount\n    \n as \n    \n    applied_credit_balance_amount\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    cancelled_on\n    \n as \n    \n    cancelled_on\n    \n, \n    \n    \n    comment\n    \n as \n    \n    comment\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    effective_date\n    \n as \n    \n    effective_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_number\n    \n as \n    \n    payment_number\n    \n, \n    \n    \n    refund_amount\n    \n as \n    \n    refund_amount\n    \n, \n    \n    \n    settled_on\n    \n as \n    \n    settled_on\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    submitted_on\n    \n as \n    \n    submitted_on\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    transferred_to_accounting\n    \n as \n    \n    transferred_to_accounting\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unapplied_amount\n    \n as \n    \n    unapplied_amount\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_id,\n        account_id,\n        accounting_code,\n        amount,\n        amount_home_currency,\n        applied_amount,\n        applied_credit_balance_amount,\n        bill_to_contact_id,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        currency,\n        effective_date,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        parent_account_id,\n        payment_method_id,\n        payment_number,\n        refund_amount,\n        settled_on, \n        sold_to_contact_id,\n        status,\n        submitted_on,\n        transaction_currency,\n        transferred_to_accounting,\n        type,\n        unapplied_amount,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__contact": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__contact", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__contact.sql", "original_file_path": "models/stg_zuora__contact.sql", "unique_id": "model.zuora_source.stg_zuora__contact", "fqn": ["zuora_source", "stg_zuora__contact"], "alias": "stg_zuora__contact", "checksum": {"name": "sha256", "checksum": "82652b7fe9420b96fffa2a45b8bb1840da3443c93fde3b0befa825a9097db229"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Customer who holds an account or who is otherwise a person to contact about an account.", "columns": {"contact_id": {"name": "contact_id", "description": "The unique identifier of the contact table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The Zuora account id associated with this contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_1": {"name": "address_1", "description": "The first line of the contact's address, which is often a street address or business name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_2": {"name": "address_2", "description": "The second line of the contact's address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "The city of the contact's address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "The country of the contact's address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A description for the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The contact's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The contact's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "postal_code": {"name": "postal_code", "description": "The zip code for the contact's address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The state for the contact's address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_email": {"name": "work_email", "description": "The contact's business email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_phone": {"name": "work_phone", "description": "The contact's business phone number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_account_contact": {"name": "is_most_recent_account_contact", "description": "Is this the most recent account for the contact?", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.494411, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__contact\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__contact_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__contact_tmp')),\n                staging_columns=get_contact_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as contact_id,\n        account_id,\n        address_1,\n        address_2,\n        city,\n        country,\n        created_by_id,\n        created_date,\n        description, \n        first_name, \n        last_name,  \n        postal_code,\n        state,\n        updated_by_id,\n        updated_date,\n        work_email,\n        work_phone,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record,\n        row_number() over (partition by account_id order by created_date desc) = 1 as is_most_recent_account_contact\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__contact_tmp", "package": null, "version": null}, {"name": "stg_zuora__contact_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_contact_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__contact_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__contact.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__contact_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    postal_code\n    \n as \n    \n    postal_code\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    work_email\n    \n as \n    \n    work_email\n    \n, \n    \n    \n    work_phone\n    \n as \n    \n    work_phone\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as contact_id,\n        account_id,\n        address_1,\n        address_2,\n        city,\n        country,\n        created_by_id,\n        created_date,\n        description, \n        first_name, \n        last_name,  \n        postal_code,\n        state,\n        updated_by_id,\n        updated_date,\n        work_email,\n        work_phone,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record,\n        row_number() over (partition by account_id order by created_date desc) = 1 as is_most_recent_account_contact\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__refund": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__refund", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__refund.sql", "original_file_path": "models/stg_zuora__refund.sql", "unique_id": "model.zuora_source.stg_zuora__refund", "fqn": ["zuora_source", "stg_zuora__refund"], "alias": "stg_zuora__refund", "checksum": {"name": "sha256", "checksum": "b75e296b6f8a38024adc01939e21edf434eb01677f92e7db93d2ff5aa4255305"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A refund returns money to a customer - as opposed to a credit, which creates a customer credit balance that may be applied to reduce the amount owed to you. Electronic refunds are processed by Zuora via a payment gateway.\nExternal refunds indicate that the refund was processed outside of Zuora, say by a check, and the transaction must be recorded.", "columns": {"refund_id": {"name": "refund_id", "description": "The unique identifier of the refund object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancelled_on": {"name": "cancelled_on", "description": "The date and time when the refund was cancelled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "A comment about the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the refund was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "method_type": {"name": "method_type", "description": "The type of the refund method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "The id of the payment method used for the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_date": {"name": "refund_date", "description": "The date when the refund was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_number": {"name": "refund_number", "description": "The refund number associated with the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_transaction_time": {"name": "refund_transaction_time", "description": "The date and time when the refund transaction was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "settled_on": {"name": "settled_on", "description": "The date and time when the refund was settled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The type of the refund source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "submitted_on": {"name": "submitted_on", "description": "The date and time when the refund was submitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "A flag that indicates whether the refund was transferred to the accounting system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the refund was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1723501432.5261388, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__refund\"", "raw_code": "{{ config(enabled=var('zuora__using_refund', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zuora__refund_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__refund_tmp')),\n                staging_columns=get_refund_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        accounting_code,\n        amount,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        method_type,\n        payment_method_id,\n        refund_date,\n        refund_number,\n        refund_transaction_time, \n        settled_on, \n        source_type,\n        status,\n        submitted_on,\n        transferred_to_accounting,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__refund_tmp", "package": null, "version": null}, {"name": "stg_zuora__refund_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_refund_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__refund_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__refund.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__refund_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    cancelled_on\n    \n as \n    \n    cancelled_on\n    \n, \n    \n    \n    comment\n    \n as \n    \n    comment\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    method_type\n    \n as \n    \n    method_type\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    refund_date\n    \n as \n    \n    refund_date\n    \n, \n    \n    \n    refund_number\n    \n as \n    \n    refund_number\n    \n, \n    \n    \n    refund_transaction_time\n    \n as \n    \n    refund_transaction_time\n    \n, \n    cast(null as timestamp) as \n    \n    settled_on\n    \n , \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    submitted_on\n    \n as \n    \n    submitted_on\n    \n, \n    \n    \n    transferred_to_accounting\n    \n as \n    \n    transferred_to_accounting\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        accounting_code,\n        amount,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        method_type,\n        payment_method_id,\n        refund_date,\n        refund_number,\n        refund_transaction_time, \n        settled_on, \n        source_type,\n        status,\n        submitted_on,\n        transferred_to_accounting,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__account": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__account", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__account.sql", "original_file_path": "models/stg_zuora__account.sql", "unique_id": "model.zuora_source.stg_zuora__account", "fqn": ["zuora_source", "stg_zuora__account"], "alias": "stg_zuora__account", "checksum": {"name": "sha256", "checksum": "df01fa0a9f7e23558cb918c91b17ec889112e8eac40ad4cd35a28325f6bd707d"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "An account is a customer account that collects all of the critical information about the customer, such as contact information, payment terms, and payment methods.", "columns": {"account_id": {"name": "account_id", "description": "The unique identifier of the account table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "Unique account number assigned to the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auto_pay": {"name": "auto_pay", "description": "Indicates if future payments are automatically collected when they're due during a Payment Run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Current outstanding balance for the account. Can be calculated by (Total Invoice Balance - Total Credit Balance)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "batch": {"name": "batch", "description": "Organizes your customer accounts into groups to optimize your billing and payment operations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_cycle_day": {"name": "bill_cycle_day", "description": "Day on which bill runs generate invoices for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "Person that you would like to bill or send the invoice to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_balance": {"name": "credit_balance", "description": "Total credit balance for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "crm_id": {"name": "crm_id", "description": "CRM account ID, used in Salesforce integration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Currency the customer is billed in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "Identifier of the default payment method for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_invoice_date": {"name": "last_invoice_date", "description": "The date when the previous invoice was generated for the account. The field value is null if no invoice has ever been generated for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mrr": {"name": "mrr", "description": "The amount of predictable revenue expected to be received on a monthly basis.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Account name as displayed in Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Comments about the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "Identifier of the parent customer account for this account. Use this field if you have customer hierarchy enabled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_term": {"name": "payment_term", "description": "Indicates when the customer pays for subscriptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "Person that you have sold your product or services to; can be the same as the bill to contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the account in the system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_exempt_effective_date": {"name": "tax_exempt_effective_date", "description": "Date when the customer's tax exemption starts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_exempt_expiration_date": {"name": "tax_exempt_expiration_date", "description": "Date when the customer's tax exemption certificate expires.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_exempt_status": {"name": "tax_exempt_status", "description": "Status of the account's tax exemption.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_debit_memo_balance": {"name": "total_debit_memo_balance", "description": "Total balance of the account's debit memos.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_invoice_balance": {"name": "total_invoice_balance", "description": "Total balance of the account's invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vatid": {"name": "vatid", "description": "EU Value Added Tax ID.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.489204, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__account\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__account_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__account_tmp')),\n                staging_columns=get_account_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        account_number,\n        auto_pay,\n        balance,\n        batch, \n        bill_cycle_day,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        credit_balance,\n        crm_id,\n        currency,\n        default_payment_method_id,\n        last_invoice_date,\n        mrr,\n        name,\n        notes,\n        parent_account_id,\n        payment_term,\n        sold_to_contact_id,\n        status, \n        tax_exempt_effective_date, \n        tax_exempt_expiration_date, \n        tax_exempt_status, \n        total_debit_memo_balance,\n        total_invoice_balance,\n        updated_by_id,\n        updated_date,\n        vatid,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        {{ fivetran_utils.fill_pass_through_columns('zuora_account_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__account_tmp", "package": null, "version": null}, {"name": "stg_zuora__account_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_account_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.zuora_source.stg_zuora__account_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__account.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__account_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    auto_pay\n    \n as \n    \n    auto_pay\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    batch\n    \n as \n    \n    batch\n    \n, \n    \n    \n    bill_cycle_day\n    \n as \n    \n    bill_cycle_day\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_balance\n    \n as \n    \n    credit_balance\n    \n, \n    \n    \n    crm_id\n    \n as \n    \n    crm_id\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_invoice_date\n    \n as \n    \n    last_invoice_date\n    \n, \n    \n    \n    mrr\n    \n as \n    \n    mrr\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_term\n    \n as \n    \n    payment_term\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tax_exempt_effective_date\n    \n as \n    \n    tax_exempt_effective_date\n    \n, \n    \n    \n    tax_exempt_expiration_date\n    \n as \n    \n    tax_exempt_expiration_date\n    \n, \n    \n    \n    tax_exempt_status\n    \n as \n    \n    tax_exempt_status\n    \n, \n    \n    \n    total_debit_memo_balance\n    \n as \n    \n    total_debit_memo_balance\n    \n, \n    \n    \n    total_invoice_balance\n    \n as \n    \n    total_invoice_balance\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    vatid\n    \n as \n    \n    vatid\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        account_number,\n        auto_pay,\n        balance,\n        batch, \n        bill_cycle_day,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        credit_balance,\n        crm_id,\n        currency,\n        default_payment_method_id,\n        last_invoice_date,\n        mrr,\n        name,\n        notes,\n        parent_account_id,\n        payment_term,\n        sold_to_contact_id,\n        status, \n        tax_exempt_effective_date, \n        tax_exempt_expiration_date, \n        tax_exempt_status, \n        total_debit_memo_balance,\n        total_invoice_balance,\n        updated_by_id,\n        updated_date,\n        vatid,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__taxation_item": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__taxation_item", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__taxation_item.sql", "original_file_path": "models/stg_zuora__taxation_item.sql", "unique_id": "model.zuora_source.stg_zuora__taxation_item", "fqn": ["zuora_source", "stg_zuora__taxation_item"], "alias": "stg_zuora__taxation_item", "checksum": {"name": "sha256", "checksum": "091382becdb93a46fce5fa1bb1383775a5169616df3e128fc20254ece998eca6"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Used to add a tax amount to an invoice item. Changes that you make with this object affect the product charges in your product catalog, but not the charges in existing subscriptions. To change taxes in existing subscriptions, you need to amend the subscription - remove the existing charge and replace it with the modified charge.", "columns": {"taxation_item_id": {"name": "taxation_item_id", "description": "The unique identifier of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the account associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The id of the accounting code for the account receivable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "The id of the amendment associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact associated with the billing of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date when the taxation item was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_amount": {"name": "credit_amount", "description": "The credit amount of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date of the exchange rate of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exempt_amount": {"name": "exempt_amount", "description": "The exempt amount of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exempt_amount_home_currency": {"name": "exempt_amount_home_currency", "description": "The exempt amount in home currency of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "The home currency of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_item_id": {"name": "invoice_item_id", "description": "The id of the invoice item associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "The id of the journal entry associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_amount": {"name": "payment_amount", "description": "The payment amount of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The id of the product associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "The id of the product rate plan charge associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The id of the product rate plan associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate_plan_charge_id": {"name": "rate_plan_charge_id", "description": "The id of the rate plan charge associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate_plan_id": {"name": "rate_plan_id", "description": "The id of the rate plan associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_tax_payable_accounting_code_id": {"name": "sales_tax_payable_accounting_code_id", "description": "The id of the accounting code for the sales tax payable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact associated with the sale of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The tax amount of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount_home_currency": {"name": "tax_amount_home_currency", "description": "The tax amount in home currency of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_date": {"name": "tax_date", "description": "The date of the tax of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_description": {"name": "tax_description", "description": "The description of the tax of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_mode": {"name": "tax_mode", "description": "The tax mode of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "The tax rate of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate_type": {"name": "tax_rate_type", "description": "The type of tax rate that applies to the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency in which the transaction was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time the taxation item was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1723501432.530935, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__taxation_item\"", "raw_code": "{{ config(enabled=var('zuora__using_taxation_item', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zuora__taxation_item_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__taxation_item_tmp')),\n                staging_columns=get_taxation_item_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as taxation_item_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code, \n        amendment_id,\n        balance,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        credit_amount,\n        exchange_rate,\n        exchange_rate_date,\n        exempt_amount, \n        exempt_amount_home_currency, \n        home_currency,\n        invoice_id,\n        invoice_item_id,\n        journal_entry_id,   \n        name,\n        payment_amount,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id, \n        rate_plan_charge_id,\n        rate_plan_id,\n        sales_tax_payable_accounting_code_id, \n        sold_to_contact_id,\n        subscription_id,\n        tax_amount, \n        tax_amount_home_currency,\n        tax_date,\n        tax_description,\n        tax_mode,\n        tax_rate,\n        tax_rate_type, \n        transaction_currency,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__taxation_item_tmp", "package": null, "version": null}, {"name": "stg_zuora__taxation_item_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_taxation_item_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__taxation_item_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__taxation_item.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__taxation_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amendment_id\n    \n as \n    \n    amendment_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_amount\n    \n as \n    \n    credit_amount\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    exempt_amount\n    \n as \n    \n    exempt_amount\n    \n, \n    \n    \n    exempt_amount_home_currency\n    \n as \n    \n    exempt_amount_home_currency\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_item_id\n    \n as \n    \n    invoice_item_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    journal_run_id\n    \n as \n    \n    journal_run_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    payment_amount\n    \n as \n    \n    payment_amount\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_charge_id\n    \n as \n    \n    product_rate_plan_charge_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    rate_plan_charge_id\n    \n as \n    \n    rate_plan_charge_id\n    \n, \n    \n    \n    rate_plan_id\n    \n as \n    \n    rate_plan_id\n    \n, \n    \n    \n    sales_tax_payable_accounting_code_id\n    \n as \n    \n    sales_tax_payable_accounting_code_id\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_amount_home_currency\n    \n as \n    \n    tax_amount_home_currency\n    \n, \n    \n    \n    tax_date\n    \n as \n    \n    tax_date\n    \n, \n    \n    \n    tax_description\n    \n as \n    \n    tax_description\n    \n, \n    \n    \n    tax_mode\n    \n as \n    \n    tax_mode\n    \n, \n    \n    \n    tax_rate\n    \n as \n    \n    tax_rate\n    \n, \n    \n    \n    tax_rate_type\n    \n as \n    \n    tax_rate_type\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as taxation_item_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code, \n        amendment_id,\n        balance,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        credit_amount,\n        exchange_rate,\n        exchange_rate_date,\n        exempt_amount, \n        exempt_amount_home_currency, \n        home_currency,\n        invoice_id,\n        invoice_item_id,\n        journal_entry_id,   \n        name,\n        payment_amount,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id, \n        rate_plan_charge_id,\n        rate_plan_id,\n        sales_tax_payable_accounting_code_id, \n        sold_to_contact_id,\n        subscription_id,\n        tax_amount, \n        tax_amount_home_currency,\n        tax_date,\n        tax_description,\n        tax_mode,\n        tax_rate,\n        tax_rate_type, \n        transaction_currency,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__rate_plan": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__rate_plan", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__rate_plan.sql", "original_file_path": "models/stg_zuora__rate_plan.sql", "unique_id": "model.zuora_source.stg_zuora__rate_plan", "fqn": ["zuora_source", "stg_zuora__rate_plan"], "alias": "stg_zuora__rate_plan", "checksum": {"name": "sha256", "checksum": "1d28f064db9cc96a052c505d372a035303da4dbba697784f64599419af6f8371"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A rate plan is part of a subscription or an amendment to a subscription, and it comes from a product rate plan.  Rate plans represent a price or a collection of prices for a service you sell. An individual rate plan contains all charges specific to a particular subscription.", "columns": {"rate_plan_id": {"name": "rate_plan_id", "description": "The unique identifier of the rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier of the account that the rate plan belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "The unique identifier of the amendment that the rate plan belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The unique identifier of the contact that the rate plan is billed to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier of the user who created the rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the rate plan was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The unique identifier of the default payment method for the rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_rate_plan_id": {"name": "original_rate_plan_id", "description": "The unique identifier of the original rate plan that was used to create the rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The unique identifier of the product that the rate plan belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The unique identifier of the product rate plan that the rate plan belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The unique identifier of the contact that the rate plan is sold to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The unique identifier of the subscription that the rate plan belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated the rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the rate plan was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.5187058, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__rate_plan\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__rate_plan_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__rate_plan_tmp')),\n                staging_columns=get_rate_plan_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as rate_plan_id,\n        account_id,\n        amendment_id,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        default_payment_method_id,  \n        name,\n        original_rate_plan_id, \n        product_id,\n        product_rate_plan_id,\n        sold_to_contact_id,\n        subscription_id, \n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        {{ fivetran_utils.fill_pass_through_columns('zuora_rate_plan_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__rate_plan_tmp", "package": null, "version": null}, {"name": "stg_zuora__rate_plan_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_rate_plan_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.zuora_source.stg_zuora__rate_plan_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__rate_plan.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__rate_plan_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amendment_id\n    \n as \n    \n    amendment_id\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    original_rate_plan_id\n    \n as \n    \n    original_rate_plan_id\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as rate_plan_id,\n        account_id,\n        amendment_id,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        default_payment_method_id,  \n        name,\n        original_rate_plan_id, \n        product_id,\n        product_rate_plan_id,\n        sold_to_contact_id,\n        subscription_id, \n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__rate_plan_charge": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__rate_plan_charge", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__rate_plan_charge.sql", "original_file_path": "models/stg_zuora__rate_plan_charge.sql", "unique_id": "model.zuora_source.stg_zuora__rate_plan_charge", "fqn": ["zuora_source", "stg_zuora__rate_plan_charge"], "alias": "stg_zuora__rate_plan_charge", "checksum": {"name": "sha256", "checksum": "aa5a397d3813d889ebbeb12427777de861c35a258f64174557b774b081bc07ca"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A rate plan charge is part of a subscription or an amendment to a subscription, and it comes from a product rate plan charge. Rate plan charges represent the actual charges for the rate plans or services that you sell.", "columns": {"rate_plan_charge_id": {"name": "rate_plan_charge_id", "description": "The unique identifier for the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier of the account associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The unique identifier for the accounting code that represents the account receivable for this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amended_by_order_on": {"name": "amended_by_order_on", "description": "The date when the amendment order was created or processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "The unique identifier for the amendment associated with this rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "apply_discount_to": {"name": "apply_discount_to", "description": "The type of discount that is applied to the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_cycle_day": {"name": "bill_cycle_day", "description": "The day of the month when the billing cycle for the charge ends.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_cycle_type": {"name": "bill_cycle_type", "description": "The type of billing cycle that the charge uses.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The unique identifier of the contact associated with the account's billing information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_snapshot_id": {"name": "bill_to_contact_snapshot_id", "description": "The unique identifier for the snapshot of the bill-to contact information that was used when the charge was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_period": {"name": "billing_period", "description": "The billing period for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_timing": {"name": "billing_timing", "description": "The timing of the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "booking_exchange_rate": {"name": "booking_exchange_rate", "description": "The exchange rate for the charge when it was booked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "booking_exchange_rate_date": {"name": "booking_exchange_rate_date", "description": "The date on which the exchange rate for the charge when it was booked was determined.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_model": {"name": "charge_model", "description": "The model used to calculate the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_number": {"name": "charge_number", "description": "The number of the charge within the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_type": {"name": "charge_type", "description": "The type of charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charged_through_date": {"name": "charged_through_date", "description": "The date through which the charge has been charged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier of the user who created the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the rate plan charge was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_option": {"name": "credit_option", "description": "The option used to calculate the credit for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The unique identifier of the default payment method for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deferred_revenue_accounting_code_id": {"name": "deferred_revenue_accounting_code_id", "description": "The unique identifier for the accounting code that represents the deferred revenue for this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "The description of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_level": {"name": "discount_level", "description": "The level of the discount applied to the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dmrc": {"name": "dmrc", "description": "The amount of the charge in the charge currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dmrchome_currency": {"name": "dmrchome_currency", "description": "The amount of the charge in the home currency of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dtcv": {"name": "dtcv", "description": "The deferred tax calculated value of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dtcvhome_currency": {"name": "dtcvhome_currency", "description": "The deferred tax calculated value of the rate plan charge in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_end_date": {"name": "effective_end_date", "description": "The date on which the rate plan charge is no longer in effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_start_date": {"name": "effective_start_date", "description": "The date on which the rate plan charge goes into effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_date_condition": {"name": "end_date_condition", "description": "The condition that triggers the end date of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used for the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date on which the exchange rate was determined.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Home currency the customer is billed in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_prepaid": {"name": "is_prepaid", "description": "A boolean value indicating whether the rate plan charge is prepaid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_processed": {"name": "is_processed", "description": "A boolean value indicating whether the rate plan charge has been processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mrr": {"name": "mrr", "description": "The monthly recurring revenue of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mrrhome_currency": {"name": "mrrhome_currency", "description": "The monthly recurring revenue of the rate plan charge in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_periods": {"name": "number_of_periods", "description": "The number of billing periods for the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_id": {"name": "original_id", "description": "The original id of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_order_date": {"name": "original_order_date", "description": "The date on which the original order was placed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "price_change_option": {"name": "price_change_option", "description": "The option selected for handling price changes for the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "price_increase_percentage": {"name": "price_increase_percentage", "description": "The percentage increase applied to the rate plan charge price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "processed_through_date": {"name": "processed_through_date", "description": "The date through which the rate plan charge has been processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The unique identifier of the product associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "The unique identifier of the product rate plan charge associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The unique identifier of the product rate plan associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate_plan_id": {"name": "rate_plan_id", "description": "The unique identifier of the rate plan associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recognized_revenue_accounting_code_id": {"name": "recognized_revenue_accounting_code_id", "description": "The unique identifier of the accounting code associated with recognized revenue for the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "segment": {"name": "segment", "description": "The segment associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The unique identifier of the contact associated with the sold-to account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specific_billing_period": {"name": "specific_billing_period", "description": "The specific billing period associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specific_end_date": {"name": "specific_end_date", "description": "The specific end date associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specific_list_price_base": {"name": "specific_list_price_base", "description": "The list price base for the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tcv": {"name": "tcv", "description": "The total contract value for the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tcvhome_currency": {"name": "tcvhome_currency", "description": "The home currency value of the Total Contract Value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency in which the transaction occurs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trigger_date": {"name": "trigger_date", "description": "The date on which the trigger event occurs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trigger_event": {"name": "trigger_event", "description": "The type of trigger event that is associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uom": {"name": "uom", "description": "The unit of measure for the quantity of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "up_to_periods": {"name": "up_to_periods", "description": "The maximum number of billing periods for which the charge is applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "up_to_periods_type": {"name": "up_to_periods_type", "description": "The time unit that is used to calculate the maximum number of billing periods for which the charge is applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the rate plan charge was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "version": {"name": "version", "description": "The version number of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "weekly_bill_cycle_day": {"name": "weekly_bill_cycle_day", "description": "The day of the week on which the bill cycle starts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.52417, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__rate_plan_charge\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__rate_plan_charge_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__rate_plan_charge_tmp')),\n                staging_columns=get_rate_plan_charge_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as rate_plan_charge_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        amended_by_order_on,\n        amendment_id,\n        apply_discount_to,\n        bill_cycle_day,\n        bill_cycle_type,\n        bill_to_contact_id,\n        bill_to_contact_snapshot_id,\n        billing_period,\n        billing_timing,\n        booking_exchange_rate,\n        booking_exchange_rate_date,\n        charge_model,\n        charge_number,\n        charge_type,\n        charged_through_date,\n        created_by_id,\n        created_date,\n        credit_option,\n        default_payment_method_id,\n        deferred_revenue_accounting_code_id,\n        description,\n        discount_level,\n        dmrc,\n        dmrchome_currency,\n        dtcv,\n        dtcvhome_currency,\n        effective_end_date,\n        effective_start_date,\n        end_date_condition,\n        exchange_rate,\n        exchange_rate_date, \n        home_currency,  \n        is_prepaid,\n        is_processed,  \n        mrr,\n        mrrhome_currency,\n        name,\n        number_of_periods,\n        original_id,\n        original_order_date,\n        price_change_option,\n        price_increase_percentage,\n        processed_through_date,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id,\n        quantity,\n        rate_plan_id, \n        recognized_revenue_accounting_code_id,\n        segment,\n        sold_to_contact_id,\n        specific_billing_period,\n        specific_end_date,\n        specific_list_price_base,\n        subscription_id, \n        tcv, \n        tcvhome_currency,\n        transaction_currency,\n        trigger_date,\n        trigger_event,\n        uom,\n        up_to_periods,\n        up_to_periods_type,\n        updated_by_id,\n        updated_date, \n        version,\n        weekly_bill_cycle_day,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        {{ fivetran_utils.fill_pass_through_columns('zuora_rate_plan_charge_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__rate_plan_charge_tmp", "package": null, "version": null}, {"name": "stg_zuora__rate_plan_charge_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_rate_plan_charge_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.zuora_source.stg_zuora__rate_plan_charge_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__rate_plan_charge.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__rate_plan_charge_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amended_by_order_on\n    \n as \n    \n    amended_by_order_on\n    \n, \n    \n    \n    amendment_id\n    \n as \n    \n    amendment_id\n    \n, \n    \n    \n    apply_discount_to\n    \n as \n    \n    apply_discount_to\n    \n, \n    \n    \n    bill_cycle_day\n    \n as \n    \n    bill_cycle_day\n    \n, \n    \n    \n    bill_cycle_type\n    \n as \n    \n    bill_cycle_type\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    bill_to_contact_snapshot_id\n    \n as \n    \n    bill_to_contact_snapshot_id\n    \n, \n    \n    \n    billing_period\n    \n as \n    \n    billing_period\n    \n, \n    \n    \n    billing_timing\n    \n as \n    \n    billing_timing\n    \n, \n    \n    \n    booking_exchange_rate\n    \n as \n    \n    booking_exchange_rate\n    \n, \n    \n    \n    booking_exchange_rate_date\n    \n as \n    \n    booking_exchange_rate_date\n    \n, \n    \n    \n    charge_model\n    \n as \n    \n    charge_model\n    \n, \n    \n    \n    charge_number\n    \n as \n    \n    charge_number\n    \n, \n    \n    \n    charge_type\n    \n as \n    \n    charge_type\n    \n, \n    \n    \n    charged_through_date\n    \n as \n    \n    charged_through_date\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_option\n    \n as \n    \n    credit_option\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    deferred_revenue_accounting_code_id\n    \n as \n    \n    deferred_revenue_accounting_code_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_level\n    \n as \n    \n    discount_level\n    \n, \n    \n    \n    dmrc\n    \n as \n    \n    dmrc\n    \n, \n    \n    \n    dmrchome_currency\n    \n as \n    \n    dmrchome_currency\n    \n, \n    \n    \n    dtcv\n    \n as \n    \n    dtcv\n    \n, \n    \n    \n    dtcvhome_currency\n    \n as \n    \n    dtcvhome_currency\n    \n, \n    \n    \n    effective_end_date\n    \n as \n    \n    effective_end_date\n    \n, \n    \n    \n    effective_start_date\n    \n as \n    \n    effective_start_date\n    \n, \n    \n    \n    end_date_condition\n    \n as \n    \n    end_date_condition\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_owner_id\n    \n as \n    \n    invoice_owner_id\n    \n, \n    \n    \n    is_prepaid\n    \n as \n    \n    is_prepaid\n    \n, \n    \n    \n    is_processed\n    \n as \n    \n    is_processed\n    \n, \n    \n    \n    mrr\n    \n as \n    \n    mrr\n    \n, \n    \n    \n    mrrhome_currency\n    \n as \n    \n    mrrhome_currency\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    number_of_periods\n    \n as \n    \n    number_of_periods\n    \n, \n    \n    \n    original_id\n    \n as \n    \n    original_id\n    \n, \n    \n    \n    original_order_date\n    \n as \n    \n    original_order_date\n    \n, \n    \n    \n    price_change_option\n    \n as \n    \n    price_change_option\n    \n, \n    \n    \n    price_increase_percentage\n    \n as \n    \n    price_increase_percentage\n    \n, \n    \n    \n    processed_through_date\n    \n as \n    \n    processed_through_date\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_charge_id\n    \n as \n    \n    product_rate_plan_charge_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    rate_plan_id\n    \n as \n    \n    rate_plan_id\n    \n, \n    \n    \n    recognized_revenue_accounting_code_id\n    \n as \n    \n    recognized_revenue_accounting_code_id\n    \n, \n    \n    \n    segment\n    \n as \n    \n    segment\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    specific_billing_period\n    \n as \n    \n    specific_billing_period\n    \n, \n    \n    \n    specific_end_date\n    \n as \n    \n    specific_end_date\n    \n, \n    \n    \n    specific_list_price_base\n    \n as \n    \n    specific_list_price_base\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    tcv\n    \n as \n    \n    tcv\n    \n, \n    \n    \n    tcvhome_currency\n    \n as \n    \n    tcvhome_currency\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    trigger_date\n    \n as \n    \n    trigger_date\n    \n, \n    \n    \n    trigger_event\n    \n as \n    \n    trigger_event\n    \n, \n    \n    \n    uom\n    \n as \n    \n    uom\n    \n, \n    \n    \n    up_to_periods\n    \n as \n    \n    up_to_periods\n    \n, \n    \n    \n    up_to_periods_type\n    \n as \n    \n    up_to_periods_type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    version\n    \n as \n    \n    version\n    \n, \n    \n    \n    weekly_bill_cycle_day\n    \n as \n    \n    weekly_bill_cycle_day\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as rate_plan_charge_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        amended_by_order_on,\n        amendment_id,\n        apply_discount_to,\n        bill_cycle_day,\n        bill_cycle_type,\n        bill_to_contact_id,\n        bill_to_contact_snapshot_id,\n        billing_period,\n        billing_timing,\n        booking_exchange_rate,\n        booking_exchange_rate_date,\n        charge_model,\n        charge_number,\n        charge_type,\n        charged_through_date,\n        created_by_id,\n        created_date,\n        credit_option,\n        default_payment_method_id,\n        deferred_revenue_accounting_code_id,\n        description,\n        discount_level,\n        dmrc,\n        dmrchome_currency,\n        dtcv,\n        dtcvhome_currency,\n        effective_end_date,\n        effective_start_date,\n        end_date_condition,\n        exchange_rate,\n        exchange_rate_date, \n        home_currency,  \n        is_prepaid,\n        is_processed,  \n        mrr,\n        mrrhome_currency,\n        name,\n        number_of_periods,\n        original_id,\n        original_order_date,\n        price_change_option,\n        price_increase_percentage,\n        processed_through_date,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id,\n        quantity,\n        rate_plan_id, \n        recognized_revenue_accounting_code_id,\n        segment,\n        sold_to_contact_id,\n        specific_billing_period,\n        specific_end_date,\n        specific_list_price_base,\n        subscription_id, \n        tcv, \n        tcvhome_currency,\n        transaction_currency,\n        trigger_date,\n        trigger_event,\n        uom,\n        up_to_periods,\n        up_to_periods_type,\n        updated_by_id,\n        updated_date, \n        version,\n        weekly_bill_cycle_day,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__invoice": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__invoice", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__invoice.sql", "original_file_path": "models/stg_zuora__invoice.sql", "unique_id": "model.zuora_source.stg_zuora__invoice", "fqn": ["zuora_source", "stg_zuora__invoice"], "alias": "stg_zuora__invoice", "checksum": {"name": "sha256", "checksum": "b896836e71f759db17781669bdaed05dfe4465e529de9ff03ebe9e01b75b0f0e"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "An invoice represents a bill to a customer, providing information about customers' accounts for invoices, including dates, status, and amounts. It is created at the account level, and can include all of the charges for multiple subscriptions for an account.", "columns": {"invoice_id": {"name": "invoice_id", "description": "The unique identifier of the invoice table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account identifier associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adjustment_amount": {"name": "adjustment_amount", "description": "The amount of the invoice adjustments associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The sum of all charges and taxes associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The total amount of the invoice in the home currency of the customer's billing account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_without_tax": {"name": "amount_without_tax", "description": "The sum of all charges associated with the invoice. Taxes are excluded from this value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_without_tax_home_currency": {"name": "amount_without_tax_home_currency", "description": "The amount of the invoice that is not subject to tax, in the home currency of the customer's billing account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auto_pay": {"name": "auto_pay", "description": "Whether invoices are automatically picked up for processing in the corresponding payment run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The remaining balance of the invoice after all payments, adjustments, and refunds are applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "Person that you would like to bill or send the invoice to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comments": {"name": "comments", "description": "Additional comments about the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_balance_adjustment_amount": {"name": "credit_balance_adjustment_amount", "description": "The total amount of credit balance adjustments applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_memo_amount": {"name": "credit_memo_amount", "description": "The total amount of credit memos applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "Identifier of the default payment method for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The due date of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used to convert the invoice amount into the customer's billing account currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date the exchange rate was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Home currency the customer is billed in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "includes_one_time": {"name": "includes_one_time", "description": "Specifies whether the invoice includes one-time charges.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "includes_recurring": {"name": "includes_recurring", "description": "Specifies whether the invoice includes recurring charges.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "includes_usage": {"name": "includes_usage", "description": "Specifies whether the invoice includes usage charges.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_date": {"name": "invoice_date", "description": "Specifies the date on which to generate the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "The unique identification number for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_email_sent_date": {"name": "last_email_sent_date", "description": "The date when the invoice was last emailed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The id of the parent account, if the invoice is associated with a parent-child account relationship.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_amount": {"name": "payment_amount", "description": "The amount of payments applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_term": {"name": "payment_term", "description": "The name of the payment term associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "posted_by": {"name": "posted_by", "description": "The user ID of the person who moved the invoice to Posted status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "posted_date": {"name": "posted_date", "description": "The date when the invoice was posted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "Specifies the amount of a refund that was applied against an earlier payment on the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "Person that you have sold your product or services to; can be the same as the bill to contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The identifier of the value in the source field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The type of the invoice source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_date": {"name": "target_date", "description": "The date the invoice is generated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The total amount of the taxes applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_status": {"name": "tax_status", "description": "The status of tax calculation related to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency in which the invoice is billed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "Indicates whether the invoice has been transferred to the accounting system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.501535, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__invoice_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__invoice_tmp')),\n                staging_columns=get_invoice_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        account_id,\n        adjustment_amount,\n        amount, \n        amount_home_currency,\n        amount_without_tax, \n        amount_without_tax_home_currency,\n        auto_pay,\n        balance,\n        bill_to_contact_id,\n        comments,\n        created_by_id,\n        created_date,\n        credit_balance_adjustment_amount,\n        credit_memo_amount,\n        default_payment_method_id,\n        due_date,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        includes_one_time,\n        includes_recurring,\n        includes_usage,\n        invoice_date,\n        invoice_number,\n        last_email_sent_date,\n        parent_account_id,\n        payment_amount,\n        payment_term,\n        posted_by,\n        posted_date, \n        refund_amount, \n        sold_to_contact_id,\n        source,\n        source_id,\n        source_type,\n        status,\n        target_date,\n        tax_amount,\n        tax_status, \n        transaction_currency,\n        transferred_to_accounting,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__invoice_tmp", "package": null, "version": null}, {"name": "stg_zuora__invoice_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_invoice_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__invoice_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__invoice.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    adjustment_amount\n    \n as \n    \n    adjustment_amount\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_home_currency\n    \n as \n    \n    amount_home_currency\n    \n, \n    \n    \n    amount_without_tax\n    \n as \n    \n    amount_without_tax\n    \n, \n    \n    \n    amount_without_tax_home_currency\n    \n as \n    \n    amount_without_tax_home_currency\n    \n, \n    \n    \n    auto_pay\n    \n as \n    \n    auto_pay\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_balance_adjustment_amount\n    \n as \n    \n    credit_balance_adjustment_amount\n    \n, \n    \n    \n    credit_memo_amount\n    \n as \n    \n    credit_memo_amount\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includes_one_time\n    \n as \n    \n    includes_one_time\n    \n, \n    \n    \n    includes_recurring\n    \n as \n    \n    includes_recurring\n    \n, \n    \n    \n    includes_usage\n    \n as \n    \n    includes_usage\n    \n, \n    \n    \n    invoice_date\n    \n as \n    \n    invoice_date\n    \n, \n    \n    \n    invoice_number\n    \n as \n    \n    invoice_number\n    \n, \n    \n    \n    last_email_sent_date\n    \n as \n    \n    last_email_sent_date\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_amount\n    \n as \n    \n    payment_amount\n    \n, \n    \n    \n    payment_term\n    \n as \n    \n    payment_term\n    \n, \n    \n    \n    posted_by\n    \n as \n    \n    posted_by\n    \n, \n    \n    \n    posted_date\n    \n as \n    \n    posted_date\n    \n, \n    \n    \n    refund_amount\n    \n as \n    \n    refund_amount\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    target_date\n    \n as \n    \n    target_date\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_status\n    \n as \n    \n    tax_status\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    transferred_to_accounting\n    \n as \n    \n    transferred_to_accounting\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        account_id,\n        adjustment_amount,\n        amount, \n        amount_home_currency,\n        amount_without_tax, \n        amount_without_tax_home_currency,\n        auto_pay,\n        balance,\n        bill_to_contact_id,\n        comments,\n        created_by_id,\n        created_date,\n        credit_balance_adjustment_amount,\n        credit_memo_amount,\n        default_payment_method_id,\n        due_date,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        includes_one_time,\n        includes_recurring,\n        includes_usage,\n        invoice_date,\n        invoice_number,\n        last_email_sent_date,\n        parent_account_id,\n        payment_amount,\n        payment_term,\n        posted_by,\n        posted_date, \n        refund_amount, \n        sold_to_contact_id,\n        source,\n        source_id,\n        source_type,\n        status,\n        target_date,\n        tax_amount,\n        tax_status, \n        transaction_currency,\n        transferred_to_accounting,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__amendment": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__amendment", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__amendment.sql", "original_file_path": "models/stg_zuora__amendment.sql", "unique_id": "model.zuora_source.stg_zuora__amendment", "fqn": ["zuora_source", "stg_zuora__amendment"], "alias": "stg_zuora__amendment", "checksum": {"name": "sha256", "checksum": "fc4fb542985c2fed716bf1c563930117b6da2233e2acc4755f417f26ca835caa"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "When a customer needs to make a change to a subscription, you make that change through an amendment. Common subscription changes include 'Changing the terms and conditions of a contract; add a product or update an existing product to a subscription; renew, cancel, suspend or resume a subscription.'", "columns": {"amendment_id": {"name": "amendment_id", "description": "The unique identifier of the amendment table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auto_renew": {"name": "auto_renew", "description": "Determines whether the subscription is automatically renewed, or whether it expires at the end of the term and needs to be manually renewed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "booking_date": {"name": "booking_date", "description": "The date when the amendment is signed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "A unique alphanumeric string that identifies the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_effective_date": {"name": "contract_effective_date", "description": "The date when the amendment's changes become effective for billing purposes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term": {"name": "current_term", "description": "The length of the period for the current subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term_period_type": {"name": "current_term_period_type", "description": "The period type for the current subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_acceptance_date": {"name": "customer_acceptance_date", "description": "The date when the customer accepts the amendment's changes to the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A description of the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "The date when the amendment's changes take effective. This field validates that the amendment's changes are within valid ranges of products and product rate plans.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_rate_plan_id": {"name": "new_rate_plan_id", "description": "The id of the rate plan that was added to the subscription by this amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "removed_rate_plan_id": {"name": "removed_rate_plan_id", "description": "The id of the rate plan that was removed from the subscription by this amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_setting": {"name": "renewal_setting", "description": "Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_term": {"name": "renewal_term", "description": "The term of renewal for the amended subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_term_period_type": {"name": "renewal_term_period_type", "description": "The period type for the subscription renewal term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resume_date": {"name": "resume_date", "description": "The date when the subscription resumption takes effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_activation_date": {"name": "service_activation_date", "description": "The date when service is activated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specific_update_date": {"name": "specific_update_date", "description": "The date when the UpdateProduct amendment takes effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription that the amendment changes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "suspend_date": {"name": "suspend_date", "description": "The date when the subscription suspension takes effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_start_date": {"name": "term_start_date", "description": "The date when the new terms and conditions take effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_type": {"name": "term_type", "description": "Indicates if the subscription is TERMED (expiration date, must be manually renewed), EVERGREEN (doesn't have expiration date, must be manually ended).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.4919958, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__amendment\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__amendment_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__amendment_tmp')),\n                staging_columns=get_amendment_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as amendment_id,\n        auto_renew,\n        booking_date,\n        code,\n        contract_effective_date,\n        created_by_id,\n        created_date,\n        current_term,\n        current_term_period_type,\n        customer_acceptance_date,\n        description,\n        effective_date,\n        name,\n        new_rate_plan_id,\n        removed_rate_plan_id,\n        renewal_setting,\n        renewal_term,\n        renewal_term_period_type,\n        resume_date,\n        service_activation_date,\n        specific_update_date,\n        status,\n        subscription_id,\n        suspend_date,\n        term_start_date,\n        term_type,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__amendment_tmp", "package": null, "version": null}, {"name": "stg_zuora__amendment_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_amendment_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__amendment_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__amendment.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__amendment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    auto_renew\n    \n as \n    \n    auto_renew\n    \n, \n    \n    \n    booking_date\n    \n as \n    \n    booking_date\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    contract_effective_date\n    \n as \n    \n    contract_effective_date\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    current_term\n    \n as \n    \n    current_term\n    \n, \n    \n    \n    current_term_period_type\n    \n as \n    \n    current_term_period_type\n    \n, \n    \n    \n    customer_acceptance_date\n    \n as \n    \n    customer_acceptance_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    effective_date\n    \n as \n    \n    effective_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    new_rate_plan_id\n    \n as \n    \n    new_rate_plan_id\n    \n, \n    \n    \n    removed_rate_plan_id\n    \n as \n    \n    removed_rate_plan_id\n    \n, \n    \n    \n    renewal_setting\n    \n as \n    \n    renewal_setting\n    \n, \n    \n    \n    renewal_term\n    \n as \n    \n    renewal_term\n    \n, \n    \n    \n    renewal_term_period_type\n    \n as \n    \n    renewal_term_period_type\n    \n, \n    \n    \n    resume_date\n    \n as \n    \n    resume_date\n    \n, \n    \n    \n    service_activation_date\n    \n as \n    \n    service_activation_date\n    \n, \n    \n    \n    specific_update_date\n    \n as \n    \n    specific_update_date\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    suspend_date\n    \n as \n    \n    suspend_date\n    \n, \n    \n    \n    term_start_date\n    \n as \n    \n    term_start_date\n    \n, \n    \n    \n    term_type\n    \n as \n    \n    term_type\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as amendment_id,\n        auto_renew,\n        booking_date,\n        code,\n        contract_effective_date,\n        created_by_id,\n        created_date,\n        current_term,\n        current_term_period_type,\n        customer_acceptance_date,\n        description,\n        effective_date,\n        name,\n        new_rate_plan_id,\n        removed_rate_plan_id,\n        renewal_setting,\n        renewal_term,\n        renewal_term_period_type,\n        resume_date,\n        service_activation_date,\n        specific_update_date,\n        status,\n        subscription_id,\n        suspend_date,\n        term_start_date,\n        term_type,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__order": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__order", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__order.sql", "original_file_path": "models/stg_zuora__order.sql", "unique_id": "model.zuora_source.stg_zuora__order", "fqn": ["zuora_source", "stg_zuora__order"], "alias": "stg_zuora__order", "checksum": {"name": "sha256", "checksum": "56c1355610be0b08271e33fffd7ab4c63f5282c74d961547c1c238b007476d02"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Orders are contractual agreements between merchants and customers. You can create multiple subscriptions and subscription amendments at once in a single order. All the operations on subscriptions in orders are done by order actions.", "columns": {"order_id": {"name": "order_id", "description": "The unique identifier of the order table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the account associated with this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact associated with the billing address for this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the order, such as NewSubscription or Amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when this order was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The id of the default payment method used for this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A brief description of this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "error_code": {"name": "error_code", "description": "The error code associated with this order, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "error_message": {"name": "error_message", "description": "The error message associated with this order, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "The date and time when this order was placed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_number": {"name": "order_number", "description": "The unique identifier for this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "response": {"name": "response", "description": "The response associated with this order, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scheduled_date": {"name": "scheduled_date", "description": "The date and time when this order is scheduled to be processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact associated with the shipping address for this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The state of this order, such as Draft or Processing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of this order, such as Pending or Completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when this order was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.5077991, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__order\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__order_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__order_tmp')),\n                staging_columns=get_order_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as order_id,\n        account_id,\n        bill_to_contact_id,\n        category,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        description,\n        error_code,\n        error_message,\n        order_date,\n        order_number,\n        response,\n        scheduled_date, \n        sold_to_contact_id,\n        state,\n        status,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__order_tmp", "package": null, "version": null}, {"name": "stg_zuora__order_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_order_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__order_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__order.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__order_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    error_code\n    \n as \n    \n    error_code\n    \n, \n    \n    \n    error_message\n    \n as \n    \n    error_message\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_date\n    \n as \n    \n    order_date\n    \n, \n    \n    \n    order_number\n    \n as \n    \n    order_number\n    \n, \n    \n    \n    response\n    \n as \n    \n    response\n    \n, \n    \n    \n    scheduled_date\n    \n as \n    \n    scheduled_date\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as order_id,\n        account_id,\n        bill_to_contact_id,\n        category,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        description,\n        error_code,\n        error_message,\n        order_date,\n        order_number,\n        response,\n        scheduled_date, \n        sold_to_contact_id,\n        state,\n        status,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__subscription": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__subscription", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__subscription.sql", "original_file_path": "models/stg_zuora__subscription.sql", "unique_id": "model.zuora_source.stg_zuora__subscription", "fqn": ["zuora_source", "stg_zuora__subscription"], "alias": "stg_zuora__subscription", "checksum": {"name": "sha256", "checksum": "f80d2f978d5cdbbb6758f3c46a32e054b6553e45c9586b320870c05e2755a2f9"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A subscription is a product or service that has recurring charges, such as a monthly flat fee or charges based on usage. Subscriptions can also include one-time charges, such as activation fees. Every subscription must be associated with an account. At least one active account must exist before any subscriptions can be created.", "columns": {"subscription_id": {"name": "subscription_id", "description": "The unique identifier for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier for the account associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auto_renew": {"name": "auto_renew", "description": "Indicates whether the subscription is set to automatically renew at the end of the term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The unique identifier for the contact that will be billed for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancel_reason": {"name": "cancel_reason", "description": "The reason for cancelling the subscription, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancelled_date": {"name": "cancelled_date", "description": "The date on which the subscription was cancelled, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_acceptance_date": {"name": "contract_acceptance_date", "description": "The date on which the contract was accepted by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_effective_date": {"name": "contract_effective_date", "description": "The date on which the contract became effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier for the user who created the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date on which the subscription was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term": {"name": "current_term", "description": "The length of the current subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term_period_type": {"name": "current_term_period_type", "description": "The unit of time for the current subscription term (e.g. \"Month\", \"Year\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The unique identifier for the default payment method associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "externally_managed_by": {"name": "externally_managed_by", "description": "Indicates whether the subscription is externally managed by another system or platform.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "initial_term": {"name": "initial_term", "description": "The length of the initial subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "initial_term_period_type": {"name": "initial_term_period_type", "description": "The unit of time for the initial subscription term (e.g. \"Month\", \"Year\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_owner_id": {"name": "invoice_owner_id", "description": "The unique identifier for the user who will receive invoice notifications for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_invoice_separate": {"name": "is_invoice_separate", "description": "Indicates whether the subscription is invoiced separately from other subscriptions on the same account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Indicates whether the subscription is the latest version of the subscription on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_booking_date": {"name": "last_booking_date", "description": "The date on which the most recent booking was created for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Additional notes or comments about the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_created_date": {"name": "original_created_date", "description": "The date on which the original subscription was created, if the current subscription is a renewal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_id": {"name": "original_id", "description": "The unique identifier for the original subscription, if the current subscription is a renewal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The unique identifier for the parent account associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_term": {"name": "payment_term", "description": "The payment term associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "previous_subscription_id": {"name": "previous_subscription_id", "description": "The unique identifier for the previous subscription associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_term": {"name": "renewal_term", "description": "The length of the renewal subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_term_period_type": {"name": "renewal_term_period_type", "description": "The type of the renewal term for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "revision": {"name": "revision", "description": "The revision number for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_activation_date": {"name": "service_activation_date", "description": "The date the subscription was activated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The unique identifier for the sold-to contact associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_end_date": {"name": "subscription_end_date", "description": "The end date of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_start_date": {"name": "subscription_start_date", "description": "The start date of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_end_date": {"name": "term_end_date", "description": "The end date of the subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_start_date": {"name": "term_start_date", "description": "The start date of the subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_type": {"name": "term_type", "description": "The type of subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date the subscription was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "version": {"name": "version", "description": "The version number of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.528356, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__subscription\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__subscription_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__subscription_tmp')),\n                staging_columns=get_subscription_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as subscription_id,\n        account_id,\n        auto_renew,\n        bill_to_contact_id,\n        cancel_reason,\n        cancelled_date,\n        contract_acceptance_date,\n        contract_effective_date,\n        created_by_id,\n        created_date,\n        current_term,\n        current_term_period_type, \n        default_payment_method_id,\n        externally_managed_by,\n        initial_term,\n        initial_term_period_type,\n        invoice_owner_id,\n        is_invoice_separate,\n        is_latest_version,\n        last_booking_date,\n        name,\n        notes,\n        original_created_date,\n        original_id,\n        parent_account_id,\n        payment_term,\n        previous_subscription_id,\n        renewal_term,\n        renewal_term_period_type,\n        revision,\n        service_activation_date,\n        sold_to_contact_id,\n        status,\n        subscription_end_date,\n        subscription_start_date,\n        term_end_date,\n        term_start_date,\n        term_type, \n        updated_by_id,\n        updated_date,\n        version,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        {{ fivetran_utils.fill_pass_through_columns('zuora_subscription_pass_through_columns') }}\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__subscription_tmp", "package": null, "version": null}, {"name": "stg_zuora__subscription_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_subscription_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.zuora_source.stg_zuora__subscription_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__subscription.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__subscription_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    auto_renew\n    \n as \n    \n    auto_renew\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    cancel_reason\n    \n as \n    \n    cancel_reason\n    \n, \n    \n    \n    cancelled_date\n    \n as \n    \n    cancelled_date\n    \n, \n    \n    \n    contract_acceptance_date\n    \n as \n    \n    contract_acceptance_date\n    \n, \n    \n    \n    contract_effective_date\n    \n as \n    \n    contract_effective_date\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    current_term\n    \n as \n    \n    current_term\n    \n, \n    \n    \n    current_term_period_type\n    \n as \n    \n    current_term_period_type\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    externally_managed_by\n    \n as \n    \n    externally_managed_by\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    initial_term\n    \n as \n    \n    initial_term\n    \n, \n    \n    \n    initial_term_period_type\n    \n as \n    \n    initial_term_period_type\n    \n, \n    \n    \n    invoice_owner_id\n    \n as \n    \n    invoice_owner_id\n    \n, \n    \n    \n    is_invoice_separate\n    \n as \n    \n    is_invoice_separate\n    \n, \n    \n    \n    is_latest_version\n    \n as \n    \n    is_latest_version\n    \n, \n    \n    \n    last_booking_date\n    \n as \n    \n    last_booking_date\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    original_created_date\n    \n as \n    \n    original_created_date\n    \n, \n    \n    \n    original_id\n    \n as \n    \n    original_id\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_term\n    \n as \n    \n    payment_term\n    \n, \n    \n    \n    previous_subscription_id\n    \n as \n    \n    previous_subscription_id\n    \n, \n    \n    \n    renewal_term\n    \n as \n    \n    renewal_term\n    \n, \n    \n    \n    renewal_term_period_type\n    \n as \n    \n    renewal_term_period_type\n    \n, \n    \n    \n    revision\n    \n as \n    \n    revision\n    \n, \n    \n    \n    service_activation_date\n    \n as \n    \n    service_activation_date\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subscription_end_date\n    \n as \n    \n    subscription_end_date\n    \n, \n    \n    \n    subscription_start_date\n    \n as \n    \n    subscription_start_date\n    \n, \n    \n    \n    term_end_date\n    \n as \n    \n    term_end_date\n    \n, \n    \n    \n    term_start_date\n    \n as \n    \n    term_start_date\n    \n, \n    \n    \n    term_type\n    \n as \n    \n    term_type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    version\n    \n as \n    \n    version\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as subscription_id,\n        account_id,\n        auto_renew,\n        bill_to_contact_id,\n        cancel_reason,\n        cancelled_date,\n        contract_acceptance_date,\n        contract_effective_date,\n        created_by_id,\n        created_date,\n        current_term,\n        current_term_period_type, \n        default_payment_method_id,\n        externally_managed_by,\n        initial_term,\n        initial_term_period_type,\n        invoice_owner_id,\n        is_invoice_separate,\n        is_latest_version,\n        last_booking_date,\n        name,\n        notes,\n        original_created_date,\n        original_id,\n        parent_account_id,\n        payment_term,\n        previous_subscription_id,\n        renewal_term,\n        renewal_term_period_type,\n        revision,\n        service_activation_date,\n        sold_to_contact_id,\n        status,\n        subscription_end_date,\n        subscription_start_date,\n        term_end_date,\n        term_start_date,\n        term_type, \n        updated_by_id,\n        updated_date,\n        version,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__refund_invoice_payment": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__refund_invoice_payment", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__refund_invoice_payment.sql", "original_file_path": "models/stg_zuora__refund_invoice_payment.sql", "unique_id": "model.zuora_source.stg_zuora__refund_invoice_payment", "fqn": ["zuora_source", "stg_zuora__refund_invoice_payment"], "alias": "stg_zuora__refund_invoice_payment", "checksum": {"name": "sha256", "checksum": "c5bb12ca977896531c671e61f3f31ab6a793b40bfdd2e04f6dda7c7fe7d29ccf"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This table exports information on refunds attributed to invoice payments.", "columns": {"refund_invoice_payment_id": {"name": "refund_invoice_payment_id", "description": "The unique identifier of the refund invoice payment in Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the refund invoice payment in Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the refund invoice payment was created in Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "The amount of the refund invoice payment in the currency of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the refund invoice payment in Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the refund invoice payment was last updated in Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the refund invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1723501432.524705, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__refund_invoice_payment\"", "raw_code": "{{ config(enabled=var('zuora__using_refund_invoice_payment', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zuora__refund_invoice_payment_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__refund_invoice_payment_tmp')),\n                staging_columns=get_refund_invoice_payment_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_invoice_payment_id, \n        created_by_id,\n        created_date,\n        refund_amount,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__refund_invoice_payment_tmp", "package": null, "version": null}, {"name": "stg_zuora__refund_invoice_payment_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_refund_invoice_payment_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__refund_invoice_payment_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__refund_invoice_payment.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__refund_invoice_payment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    refund_amount\n    \n as \n    \n    refund_amount\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_invoice_payment_id, \n        created_by_id,\n        created_date,\n        refund_amount,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__payment_method": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__payment_method", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__payment_method.sql", "original_file_path": "models/stg_zuora__payment_method.sql", "unique_id": "model.zuora_source.stg_zuora__payment_method", "fqn": ["zuora_source", "stg_zuora__payment_method"], "alias": "stg_zuora__payment_method", "checksum": {"name": "sha256", "checksum": "16cd869688848ca4050bff9d08017a8c91729b362e002d5c4c9f99a72dbe9938"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Payment methods are the ways in which customers pay for their subscriptions. Your customers can choose a payment method from your company's list of preferred payment methods.", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "The unique identifier of the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier of the account associated with this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ach_account_type": {"name": "ach_account_type", "description": "The account type for ACH payment methods.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "A Boolean value indicating whether this payment method is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bank_transfer_account_type": {"name": "bank_transfer_account_type", "description": "The account type for bank transfer payment methods.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier of the user who created this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when this payment method was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_card_type": {"name": "credit_card_type", "description": "The credit card type for credit card payment methods.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_failed_sale_transaction_date": {"name": "last_failed_sale_transaction_date", "description": "The date and time when the last sale transaction failed for this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_transaction_date_time": {"name": "last_transaction_date_time", "description": "The date and time of the last transaction for this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_transaction_status": {"name": "last_transaction_status", "description": "The status of the last transaction for this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_consecutive_payment_failures": {"name": "max_consecutive_payment_failures", "description": "The maximum number of consecutive payment failures allowed for this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_consecutive_failures": {"name": "num_consecutive_failures", "description": "The number of consecutive payment failures for this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_status": {"name": "payment_method_status", "description": "The status of the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paypal_type": {"name": "paypal_type", "description": "The PayPal account type for PayPal payment methods.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sub_type": {"name": "sub_type", "description": "The sub-type of the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_number_of_error_payments": {"name": "total_number_of_error_payments", "description": "The total number of error payments for this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_number_of_processed_payments": {"name": "total_number_of_processed_payments", "description": "The total number of processed payments for this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when this payment method was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.512467, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__payment_method\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__payment_method_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__payment_method_tmp')),\n                staging_columns=get_payment_method_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        account_id,\n        ach_account_type,\n        active,\n        bank_transfer_account_type,\n        created_by_id,\n        created_date,\n        credit_card_type,\n        last_failed_sale_transaction_date,\n        last_transaction_date_time,\n        last_transaction_status,\n        max_consecutive_payment_failures,\n        name,\n        num_consecutive_failures,\n        payment_method_status,\n        paypal_type,\n        sub_type,\n        total_number_of_error_payments,\n        total_number_of_processed_payments,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__payment_method_tmp", "package": null, "version": null}, {"name": "stg_zuora__payment_method_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_payment_method_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__payment_method_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__payment_method.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__payment_method_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    ach_account_type\n    \n as \n    \n    ach_account_type\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    bank_transfer_account_type\n    \n as \n    \n    bank_transfer_account_type\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_failed_sale_transaction_date\n    \n as \n    \n    last_failed_sale_transaction_date\n    \n, \n    \n    \n    last_transaction_date_time\n    \n as \n    \n    last_transaction_date_time\n    \n, \n    \n    \n    last_transaction_status\n    \n as \n    \n    last_transaction_status\n    \n, \n    \n    \n    max_consecutive_payment_failures\n    \n as \n    \n    max_consecutive_payment_failures\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    num_consecutive_failures\n    \n as \n    \n    num_consecutive_failures\n    \n, \n    \n    \n    payment_method_status\n    \n as \n    \n    payment_method_status\n    \n, \n    \n    \n    paypal_type\n    \n as \n    \n    paypal_type\n    \n, \n    \n    \n    sub_type\n    \n as \n    \n    sub_type\n    \n, \n    \n    \n    total_number_of_error_payments\n    \n as \n    \n    total_number_of_error_payments\n    \n, \n    \n    \n    total_number_of_processed_payments\n    \n as \n    \n    total_number_of_processed_payments\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        account_id,\n        ach_account_type,\n        active,\n        bank_transfer_account_type,\n        created_by_id,\n        created_date,\n        credit_card_type,\n        last_failed_sale_transaction_date,\n        last_transaction_date_time,\n        last_transaction_status,\n        max_consecutive_payment_failures,\n        name,\n        num_consecutive_failures,\n        payment_method_status,\n        paypal_type,\n        sub_type,\n        total_number_of_error_payments,\n        total_number_of_processed_payments,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__credit_balance_adjustment": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__credit_balance_adjustment", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__credit_balance_adjustment.sql", "original_file_path": "models/stg_zuora__credit_balance_adjustment.sql", "unique_id": "model.zuora_source.stg_zuora__credit_balance_adjustment", "fqn": ["zuora_source", "stg_zuora__credit_balance_adjustment"], "alias": "stg_zuora__credit_balance_adjustment", "checksum": {"name": "sha256", "checksum": "3f7fb3f4ae1b59a31c75dc13a9f85002aa71a566f6a5ef727755205e60a45a12"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "An adjustment to change a customer's credit balance.  Applies adjustments to credit balances on billing accounts. This includes applying credit balance to invoices and transferring an invoice to a credit balance.", "columns": {"credit_balance_adjustment_id": {"name": "credit_balance_adjustment_id", "description": "The unique identifier of the credit balance adjustment table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account id of the credit balance's account. Zuora generates this value from the source transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The accounting code ID for the account receivable account to which the adjustment was made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code for the credit balance adjustment, maps to a bank account in the accounting system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adjustment_date": {"name": "adjustment_date", "description": "The date when the credit balance adjustment is applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The amount of the adjustment in the home currency of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "Person that you would like to bill or send the invoice to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancelled_on": {"name": "cancelled_on", "description": "Date when the credit balance adjustment was canceled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "Comments about the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "Identifier of the default payment method for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used for the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date of the exchange rate used for the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Home currency the customer is billed in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "The id of the journal entry associated with the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique identifier for the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The id of the parent account associated with the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reason_code": {"name": "reason_code", "description": "The reason code for the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reference_id": {"name": "reference_id", "description": "The reference id for the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "Person that you have sold your product or services to; can be the same as the bill to contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_transaction_id": {"name": "source_transaction_id", "description": "The id of the object that the credit balance adjustment is applied to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_transaction_number": {"name": "source_transaction_number", "description": "The number of the object that the credit balance adjustment is applied to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_transaction_type": {"name": "source_transaction_type", "description": "The source of the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "Transaction currency the customer is billed in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "Indicates the status of the credit balance adjustment's transfer to an external accounting system, such as Netsuite.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Specifies if the credit balance adjustment increases or decrease the amount of the credit balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": true}, "created_at": 1723501432.4978628, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__credit_balance_adjustment\"", "raw_code": "{{ config(enabled=var('zuora__using_credit_balance_adjustment', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zuora__credit_balance_adjustment_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__credit_balance_adjustment_tmp')),\n                staging_columns=get_credit_balance_adjustment_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_balance_adjustment_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        adjustment_date,\n        amount, \n        amount_home_currency,\n        bill_to_contact_id,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        invoice_id,\n        journal_entry_id, \n        number,\n        parent_account_id, \n        reason_code,\n        reference_id,\n        sold_to_contact_id,\n        source_transaction_id,\n        source_transaction_number,\n        source_transaction_type,\n        status,\n        transaction_currency,\n        transferred_to_accounting,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__credit_balance_adjustment_tmp", "package": null, "version": null}, {"name": "stg_zuora__credit_balance_adjustment_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_credit_balance_adjustment_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__credit_balance_adjustment_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__credit_balance_adjustment.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__credit_balance_adjustment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    adjustment_date\n    \n as \n    \n    adjustment_date\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_home_currency\n    \n as \n    \n    amount_home_currency\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    cancelled_on\n    \n as \n    \n    cancelled_on\n    \n, \n    \n    \n    comment\n    \n as \n    \n    comment\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    reason_code\n    \n as \n    \n    reason_code\n    \n, \n    \n    \n    reference_id\n    \n as \n    \n    reference_id\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    source_transaction_id\n    \n as \n    \n    source_transaction_id\n    \n, \n    \n    \n    source_transaction_number\n    \n as \n    \n    source_transaction_number\n    \n, \n    \n    \n    source_transaction_type\n    \n as \n    \n    source_transaction_type\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    transferred_to_accounting\n    \n as \n    \n    transferred_to_accounting\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_balance_adjustment_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        adjustment_date,\n        amount, \n        amount_home_currency,\n        bill_to_contact_id,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        invoice_id,\n        journal_entry_id, \n        number,\n        parent_account_id, \n        reason_code,\n        reference_id,\n        sold_to_contact_id,\n        source_transaction_id,\n        source_transaction_number,\n        source_transaction_type,\n        status,\n        transaction_currency,\n        transferred_to_accounting,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__invoice_payment": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__invoice_payment", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__invoice_payment.sql", "original_file_path": "models/stg_zuora__invoice_payment.sql", "unique_id": "model.zuora_source.stg_zuora__invoice_payment", "fqn": ["zuora_source", "stg_zuora__invoice_payment"], "alias": "stg_zuora__invoice_payment", "checksum": {"name": "sha256", "checksum": "5032ead78a0fe813dbecb2d8f749c12c2bc34a2c8bdf0a0ad2fdf347c0329ad1"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "invoice payment details", "columns": {"invoice_payment_id": {"name": "invoice_payment_id", "description": "The unique identifier of the invoice item table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the customer account that the invoice payment is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The id of the accounting code for the account receivable account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The id of the accounting period associated with the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_currency_rounding": {"name": "amount_currency_rounding", "description": "The amount of the invoice payment after rounding to the nearest currency unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The amount of the invoice payment in the home currency of the customer account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact associated with the billing address for the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cash_accounting_code_id": {"name": "cash_accounting_code_id", "description": "The id of the accounting code for the cash account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the invoice payment was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The id of the default payment method for the customer account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used to convert the transaction currency of the invoice payment to the home currency of the customer account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date of the exchange rate used to convert the transaction currency of the invoice payment to the home currency of the customer account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "The home currency of the customer account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "The id of the journal entry created for the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "journal_run_id": {"name": "journal_run_id", "description": "The id of the journal run associated with the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The id of the parent account for the customer account associated with the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_id": {"name": "payment_id", "description": "The id of the payment associated with the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "The id of the payment method used for the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_exchange_rate_date": {"name": "provider_exchange_rate_date", "description": "The date of the exchange rate used by the payment provider to convert the transaction currency of the invoice payment to the currency of the payment provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "The amount of the refund applied to the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact associated with the shipping address for the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency of the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the invoice payment was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.505973, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice_payment\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__invoice_payment_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__invoice_payment_tmp')),\n                staging_columns=get_invoice_payment_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_payment_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_period_id,\n        amount,\n        amount_currency_rounding,\n        amount_home_currency,\n        bill_to_contact_id,\n        cash_accounting_code_id,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency, \n        invoice_id,\n        journal_entry_id,\n        journal_run_id,\n        parent_account_id,\n        payment_id,\n        payment_method_id,\n        provider_exchange_rate_date,\n        refund_amount,\n        sold_to_contact_id,\n        transaction_currency,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__invoice_payment_tmp", "package": null, "version": null}, {"name": "stg_zuora__invoice_payment_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_invoice_payment_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__invoice_payment_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__invoice_payment.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice_payment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_currency_rounding\n    \n as \n    \n    amount_currency_rounding\n    \n, \n    \n    \n    amount_home_currency\n    \n as \n    \n    amount_home_currency\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    cash_accounting_code_id\n    \n as \n    \n    cash_accounting_code_id\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    journal_run_id\n    \n as \n    \n    journal_run_id\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    provider_exchange_rate_date\n    \n as \n    \n    provider_exchange_rate_date\n    \n, \n    \n    \n    refund_amount\n    \n as \n    \n    refund_amount\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_payment_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_period_id,\n        amount,\n        amount_currency_rounding,\n        amount_home_currency,\n        bill_to_contact_id,\n        cash_accounting_code_id,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency, \n        invoice_id,\n        journal_entry_id,\n        journal_run_id,\n        parent_account_id,\n        payment_id,\n        payment_method_id,\n        provider_exchange_rate_date,\n        refund_amount,\n        sold_to_contact_id,\n        transaction_currency,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__product_rate_plan": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__product_rate_plan", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__product_rate_plan.sql", "original_file_path": "models/stg_zuora__product_rate_plan.sql", "unique_id": "model.zuora_source.stg_zuora__product_rate_plan", "fqn": ["zuora_source", "stg_zuora__product_rate_plan"], "alias": "stg_zuora__product_rate_plan", "checksum": {"name": "sha256", "checksum": "52e312050aae3b179f396a9be02d44b9867927ea5f154a0eea07cd1e9641a4f0"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A product rate plan is the part of a product that your customers subscribe to. Each product can have multiple product rate plans, and each product rate plan can have multiple product rate plan charges, which are fees for products and their product rate plans.", "columns": {"product_rate_plan_id": {"name": "product_rate_plan_id", "description": "Unique identifier of the product rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the Zuora user who created the product rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the product rate plan was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A brief description of the product rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_end_date": {"name": "effective_end_date", "description": "The date when the product rate plan will no longer be effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_start_date": {"name": "effective_start_date", "description": "The date when the product rate plan becomes effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The id of the product that this rate plan belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the Zuora user who last updated the product rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the product rate plan was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the product rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table"}, "created_at": 1723501432.513817, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product_rate_plan\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__product_rate_plan_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__product_rate_plan_tmp')),\n                staging_columns=get_product_rate_plan_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_rate_plan_id,\n        created_by_id,\n        created_date,\n        description,\n        effective_end_date,\n        effective_start_date, \n        name,\n        product_id, \n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__product_rate_plan_tmp", "package": null, "version": null}, {"name": "stg_zuora__product_rate_plan_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_product_rate_plan_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__product_rate_plan_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__product_rate_plan.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product_rate_plan_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    effective_end_date\n    \n as \n    \n    effective_end_date\n    \n, \n    \n    \n    effective_start_date\n    \n as \n    \n    effective_start_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_rate_plan_id,\n        created_by_id,\n        created_date,\n        description,\n        effective_end_date,\n        effective_start_date, \n        name,\n        product_id, \n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__payment_method_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__payment_method_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__payment_method_tmp.sql", "original_file_path": "models/tmp/stg_zuora__payment_method_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__payment_method_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__payment_method_tmp"], "alias": "stg_zuora__payment_method_tmp", "checksum": {"name": "sha256", "checksum": "68b288ed5f0f4637ec1d4f8ed98a281f9b89235bc43b0878d14e27abf51e1f64"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.228514, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__payment_method_tmp\"", "raw_code": "select * \nfrom {{ var('payment_method') }}", "language": "sql", "refs": [], "sources": [["zuora", "payment_method"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.payment_method"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__payment_method_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_payment_method_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__invoice_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__invoice_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__invoice_tmp.sql", "original_file_path": "models/tmp/stg_zuora__invoice_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__invoice_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__invoice_tmp"], "alias": "stg_zuora__invoice_tmp", "checksum": {"name": "sha256", "checksum": "72e6a3b1adb1c1933cf183a367f778f8a42c1027a920ca45baef3fb82a167f9f"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.2319858, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice_tmp\"", "raw_code": "select * \nfrom {{ var('invoice') }}", "language": "sql", "refs": [], "sources": [["zuora", "invoice"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.invoice"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__invoice_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_invoice_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__rate_plan_charge_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__rate_plan_charge_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__rate_plan_charge_tmp.sql", "original_file_path": "models/tmp/stg_zuora__rate_plan_charge_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__rate_plan_charge_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__rate_plan_charge_tmp"], "alias": "stg_zuora__rate_plan_charge_tmp", "checksum": {"name": "sha256", "checksum": "1e3fc34bf5e1dfefb4baa39b1cb35a4e32a267216ae5ee6e9d9c79ef274568ec"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.235296, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__rate_plan_charge_tmp\"", "raw_code": "select * \nfrom {{ var('rate_plan_charge') }}", "language": "sql", "refs": [], "sources": [["zuora", "rate_plan_charge"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.rate_plan_charge"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__rate_plan_charge_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_rate_plan_charge_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__invoice_item_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__invoice_item_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__invoice_item_tmp.sql", "original_file_path": "models/tmp/stg_zuora__invoice_item_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__invoice_item_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__invoice_item_tmp"], "alias": "stg_zuora__invoice_item_tmp", "checksum": {"name": "sha256", "checksum": "ab22b8d57c8bcce72c522ec9bf48381061995eed58eb228055156073f2db6685"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.2390258, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice_item_tmp\"", "raw_code": "select * \nfrom {{ var('invoice_item') }}", "language": "sql", "refs": [], "sources": [["zuora", "invoice_item"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.invoice_item"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__invoice_item_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_invoice_item_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__contact_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__contact_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__contact_tmp.sql", "original_file_path": "models/tmp/stg_zuora__contact_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__contact_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__contact_tmp"], "alias": "stg_zuora__contact_tmp", "checksum": {"name": "sha256", "checksum": "23a7c91d467af81d2bcc708f944822927779d53c70a2b6479d2922ac8de21c71"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.2422872, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__contact_tmp\"", "raw_code": "select * \nfrom {{ var('contact') }}", "language": "sql", "refs": [], "sources": [["zuora", "contact"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.contact"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__contact_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_contact_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__rate_plan_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__rate_plan_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__rate_plan_tmp.sql", "original_file_path": "models/tmp/stg_zuora__rate_plan_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__rate_plan_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__rate_plan_tmp"], "alias": "stg_zuora__rate_plan_tmp", "checksum": {"name": "sha256", "checksum": "bde9b5a2d5401c67e80db344f9ad0fbbceaf9972ab0069f6d0cfdaa0568ad87d"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.2455528, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__rate_plan_tmp\"", "raw_code": "select * \nfrom {{ var('rate_plan') }}", "language": "sql", "refs": [], "sources": [["zuora", "rate_plan"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.rate_plan"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__rate_plan_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_rate_plan_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__refund_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__refund_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__refund_tmp.sql", "original_file_path": "models/tmp/stg_zuora__refund_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__refund_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__refund_tmp"], "alias": "stg_zuora__refund_tmp", "checksum": {"name": "sha256", "checksum": "d70890064c60dfb335f2d90042bb8dd47bc44e8e2b474ef57467d578aaebeca5"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1723501432.248783, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__refund_tmp\"", "raw_code": "{{ config(enabled=var('zuora__using_refund', true)) }}\n\nselect * \nfrom {{ var('refund') }}", "language": "sql", "refs": [], "sources": [["zuora", "refund"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.refund"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__refund_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"zz_zuora\".\"zuora_refund_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__account_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__account_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__account_tmp.sql", "original_file_path": "models/tmp/stg_zuora__account_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__account_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__account_tmp"], "alias": "stg_zuora__account_tmp", "checksum": {"name": "sha256", "checksum": "74cd071a154e73fde029b4a337f61cf0862bf982ae99586a1195559cb20b2025"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.252352, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__account_tmp\"", "raw_code": "select * \nfrom {{ var('account') }}", "language": "sql", "refs": [], "sources": [["zuora", "account"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.account"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__account_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_account_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__product_rate_plan_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__product_rate_plan_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__product_rate_plan_tmp.sql", "original_file_path": "models/tmp/stg_zuora__product_rate_plan_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__product_rate_plan_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__product_rate_plan_tmp"], "alias": "stg_zuora__product_rate_plan_tmp", "checksum": {"name": "sha256", "checksum": "02c30ebb68b9f207b42abd576794a7b4a65115e0f422b4dc23e620d458fa1753"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.256255, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product_rate_plan_tmp\"", "raw_code": "select * \nfrom {{ var('product_rate_plan') }}", "language": "sql", "refs": [], "sources": [["zuora", "product_rate_plan"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.product_rate_plan"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__product_rate_plan_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_product_rate_plan_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__credit_balance_adjustment_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__credit_balance_adjustment_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__credit_balance_adjustment_tmp.sql", "original_file_path": "models/tmp/stg_zuora__credit_balance_adjustment_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__credit_balance_adjustment_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__credit_balance_adjustment_tmp"], "alias": "stg_zuora__credit_balance_adjustment_tmp", "checksum": {"name": "sha256", "checksum": "01df7d264ceb0ab3913fbdd4a95e854e32e4c0622562b9bdb34a7cfd34b5827f"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1723501432.259607, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__credit_balance_adjustment_tmp\"", "raw_code": "{{ config(enabled=var('zuora__using_credit_balance_adjustment', true)) }}\n\nselect * \nfrom {{ var('credit_balance_adjustment') }}", "language": "sql", "refs": [], "sources": [["zuora", "credit_balance_adjustment"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.credit_balance_adjustment"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__credit_balance_adjustment_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"zz_zuora\".\"zuora_credit_balance_adjustment_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__taxation_item_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__taxation_item_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__taxation_item_tmp.sql", "original_file_path": "models/tmp/stg_zuora__taxation_item_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__taxation_item_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__taxation_item_tmp"], "alias": "stg_zuora__taxation_item_tmp", "checksum": {"name": "sha256", "checksum": "0ef306a7370cd5ae73aa2d883b22679a6448710185f94985817f667b0b6a3346"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1723501432.2631512, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__taxation_item_tmp\"", "raw_code": "{{ config(enabled=var('zuora__using_taxation_item', true)) }}\n\nselect * \nfrom {{ var('taxation_item') }}", "language": "sql", "refs": [], "sources": [["zuora", "taxation_item"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.taxation_item"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__taxation_item_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"zz_zuora\".\"zuora_taxation_item_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__subscription_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__subscription_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__subscription_tmp.sql", "original_file_path": "models/tmp/stg_zuora__subscription_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__subscription_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__subscription_tmp"], "alias": "stg_zuora__subscription_tmp", "checksum": {"name": "sha256", "checksum": "fcbb5209755e4ebff162e548c9707aa7967e26a553c6ccd0e6eb51581d7879fe"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.266644, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__subscription_tmp\"", "raw_code": "select * \nfrom {{ var('subscription') }}", "language": "sql", "refs": [], "sources": [["zuora", "subscription"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.subscription"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__subscription_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_subscription_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__product_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__product_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__product_tmp.sql", "original_file_path": "models/tmp/stg_zuora__product_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__product_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__product_tmp"], "alias": "stg_zuora__product_tmp", "checksum": {"name": "sha256", "checksum": "7cff5127a8a0233d6cbcaa4424747fa78996279a87bd9cd9bf475ace08905ab3"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.269972, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product_tmp\"", "raw_code": "select * \nfrom {{ var('product') }}", "language": "sql", "refs": [], "sources": [["zuora", "product"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.product"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__product_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_product_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__order_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__order_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__order_tmp.sql", "original_file_path": "models/tmp/stg_zuora__order_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__order_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__order_tmp"], "alias": "stg_zuora__order_tmp", "checksum": {"name": "sha256", "checksum": "12fd0a65c3cb84842af0d5daaeae4c33ce21b375263b861d472f0fc3b5dc75a5"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.2738938, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__order_tmp\"", "raw_code": "select * \nfrom {{ var('order') }}", "language": "sql", "refs": [], "sources": [["zuora", "order"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.order"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__order_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_order_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__amendment_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__amendment_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__amendment_tmp.sql", "original_file_path": "models/tmp/stg_zuora__amendment_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__amendment_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__amendment_tmp"], "alias": "stg_zuora__amendment_tmp", "checksum": {"name": "sha256", "checksum": "e48902ac963280bd34004132c59bcce773c20614ab3ad4139e36767c3a0809bd"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.277167, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__amendment_tmp\"", "raw_code": "select * \nfrom {{ var('amendment') }}", "language": "sql", "refs": [], "sources": [["zuora", "amendment"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.amendment"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__amendment_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_amendment_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__invoice_payment_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__invoice_payment_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__invoice_payment_tmp.sql", "original_file_path": "models/tmp/stg_zuora__invoice_payment_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__invoice_payment_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__invoice_payment_tmp"], "alias": "stg_zuora__invoice_payment_tmp", "checksum": {"name": "sha256", "checksum": "91bbd91070ded55f7e0caea6550674ae60154bdbbc5e5ced60670d26ff8f7f37"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.2803478, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice_payment_tmp\"", "raw_code": "select * \nfrom {{ var('invoice_payment') }}", "language": "sql", "refs": [], "sources": [["zuora", "invoice_payment"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.invoice_payment"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__invoice_payment_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_invoice_payment_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__product_rate_plan_charge_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__product_rate_plan_charge_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__product_rate_plan_charge_tmp.sql", "original_file_path": "models/tmp/stg_zuora__product_rate_plan_charge_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__product_rate_plan_charge_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__product_rate_plan_charge_tmp"], "alias": "stg_zuora__product_rate_plan_charge_tmp", "checksum": {"name": "sha256", "checksum": "22faf2057367732435d3d392de3341b389683366f89353f78807fbe5945f5fd1"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.283606, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product_rate_plan_charge_tmp\"", "raw_code": "select * \nfrom {{ var('product_rate_plan_charge') }}", "language": "sql", "refs": [], "sources": [["zuora", "product_rate_plan_charge"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.product_rate_plan_charge"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__product_rate_plan_charge_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_product_rate_plan_charge_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__refund_invoice_payment_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__refund_invoice_payment_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__refund_invoice_payment_tmp.sql", "original_file_path": "models/tmp/stg_zuora__refund_invoice_payment_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__refund_invoice_payment_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__refund_invoice_payment_tmp"], "alias": "stg_zuora__refund_invoice_payment_tmp", "checksum": {"name": "sha256", "checksum": "aab08780a8c714fee7a50a8bc97a0d0cd304492bb7d2a160a1ddba191c8ddcab"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view", "enabled": true}, "created_at": 1723501432.28684, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__refund_invoice_payment_tmp\"", "raw_code": "{{ config(enabled=var('zuora__using_refund_invoice_payment', true)) }}\n\nselect * \nfrom {{ var('refund_invoice_payment') }}", "language": "sql", "refs": [], "sources": [["zuora", "refund_invoice_payment"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.refund_invoice_payment"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__refund_invoice_payment_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"zz_zuora\".\"zuora_refund_invoice_payment_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.zuora_source.stg_zuora__payment_tmp": {"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "stg_zuora__payment_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__payment_tmp.sql", "original_file_path": "models/tmp/stg_zuora__payment_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__payment_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__payment_tmp"], "alias": "stg_zuora__payment_tmp", "checksum": {"name": "sha256", "checksum": "16de28dd52bb6b98efd206bc59de93ffc7c10cf3fcb6dd61db11c13602bcaef4"}, "config": {"enabled": true, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "view"}, "created_at": 1723501432.2910259, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__payment_tmp\"", "raw_code": "select * \nfrom {{ var('payment') }}", "language": "sql", "refs": [], "sources": [["zuora", "payment"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.payment"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__payment_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zz_zuora\".\"zuora_payment_data\"", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.zuora.unique_zuora__account_daily_overview_account_daily_id.2f527d4683": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_zuora__account_daily_overview_account_daily_id", "resource_type": "test", "package_name": "zuora", "path": "unique_zuora__account_daily_overview_account_daily_id.sql", "original_file_path": "models/zuora.yml", "unique_id": "test.zuora.unique_zuora__account_daily_overview_account_daily_id.2f527d4683", "fqn": ["zuora", "unique_zuora__account_daily_overview_account_daily_id"], "alias": "unique_zuora__account_daily_overview_account_daily_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.417608, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zuora__account_daily_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora.zuora__account_daily_overview"]}, "compiled_path": "target/compiled/zuora/models/zuora.yml/unique_zuora__account_daily_overview_account_daily_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_daily_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__account_daily_overview\"\nwhere account_daily_id is not null\ngroup by account_daily_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_daily_id", "file_key_name": "models.zuora__account_daily_overview", "attached_node": "model.zuora.zuora__account_daily_overview", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_daily_id", "model": "{{ get_where_subquery(ref('zuora__account_daily_overview')) }}"}, "namespace": null}}, "test.zuora.not_null_zuora__account_daily_overview_account_daily_id.5873836d5a": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_zuora__account_daily_overview_account_daily_id", "resource_type": "test", "package_name": "zuora", "path": "not_null_zuora__account_daily_overview_account_daily_id.sql", "original_file_path": "models/zuora.yml", "unique_id": "test.zuora.not_null_zuora__account_daily_overview_account_daily_id.5873836d5a", "fqn": ["zuora", "not_null_zuora__account_daily_overview_account_daily_id"], "alias": "not_null_zuora__account_daily_overview_account_daily_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.418804, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zuora__account_daily_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora.zuora__account_daily_overview"]}, "compiled_path": "target/compiled/zuora/models/zuora.yml/not_null_zuora__account_daily_overview_account_daily_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_daily_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__account_daily_overview\"\nwhere account_daily_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_daily_id", "file_key_name": "models.zuora__account_daily_overview", "attached_node": "model.zuora.zuora__account_daily_overview", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_daily_id", "model": "{{ get_where_subquery(ref('zuora__account_daily_overview')) }}"}, "namespace": null}}, "test.zuora.unique_zuora__account_overview_account_id.abf0280fca": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_zuora__account_overview_account_id", "resource_type": "test", "package_name": "zuora", "path": "unique_zuora__account_overview_account_id.sql", "original_file_path": "models/zuora.yml", "unique_id": "test.zuora.unique_zuora__account_overview_account_id.abf0280fca", "fqn": ["zuora", "unique_zuora__account_overview_account_id"], "alias": "unique_zuora__account_overview_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.4198122, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zuora__account_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora.zuora__account_overview"]}, "compiled_path": "target/compiled/zuora/models/zuora.yml/unique_zuora__account_overview_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__account_overview\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.zuora__account_overview", "attached_node": "model.zuora.zuora__account_overview", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('zuora__account_overview')) }}"}, "namespace": null}}, "test.zuora.unique_zuora__billing_history_invoice_id.9daecb68de": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_zuora__billing_history_invoice_id", "resource_type": "test", "package_name": "zuora", "path": "unique_zuora__billing_history_invoice_id.sql", "original_file_path": "models/zuora.yml", "unique_id": "test.zuora.unique_zuora__billing_history_invoice_id.9daecb68de", "fqn": ["zuora", "unique_zuora__billing_history_invoice_id"], "alias": "unique_zuora__billing_history_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.420827, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zuora__billing_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora.zuora__billing_history"]}, "compiled_path": "target/compiled/zuora/models/zuora.yml/unique_zuora__billing_history_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__billing_history\"\nwhere invoice_id is not null\ngroup by invoice_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.zuora__billing_history", "attached_node": "model.zuora.zuora__billing_history", "test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('zuora__billing_history')) }}"}, "namespace": null}}, "test.zuora.not_null_zuora__billing_history_invoice_id.46e1219d2e": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_zuora__billing_history_invoice_id", "resource_type": "test", "package_name": "zuora", "path": "not_null_zuora__billing_history_invoice_id.sql", "original_file_path": "models/zuora.yml", "unique_id": "test.zuora.not_null_zuora__billing_history_invoice_id.46e1219d2e", "fqn": ["zuora", "not_null_zuora__billing_history_invoice_id"], "alias": "not_null_zuora__billing_history_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.421897, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zuora__billing_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora.zuora__billing_history"]}, "compiled_path": "target/compiled/zuora/models/zuora.yml/not_null_zuora__billing_history_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__billing_history\"\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.zuora__billing_history", "attached_node": "model.zuora.zuora__billing_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('zuora__billing_history')) }}"}, "namespace": null}}, "test.zuora.unique_zuora__line_item_history_invoice_item_id.006d565076": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_zuora__line_item_history_invoice_item_id", "resource_type": "test", "package_name": "zuora", "path": "unique_zuora__line_item_history_invoice_item_id.sql", "original_file_path": "models/zuora.yml", "unique_id": "test.zuora.unique_zuora__line_item_history_invoice_item_id.006d565076", "fqn": ["zuora", "unique_zuora__line_item_history_invoice_item_id"], "alias": "unique_zuora__line_item_history_invoice_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.4229, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zuora__line_item_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora.zuora__line_item_history"]}, "compiled_path": "target/compiled/zuora/models/zuora.yml/unique_zuora__line_item_history_invoice_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__line_item_history\"\nwhere invoice_item_id is not null\ngroup by invoice_item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_item_id", "file_key_name": "models.zuora__line_item_history", "attached_node": "model.zuora.zuora__line_item_history", "test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_item_id", "model": "{{ get_where_subquery(ref('zuora__line_item_history')) }}"}, "namespace": null}}, "test.zuora.not_null_zuora__line_item_history_invoice_item_id.7b9dc1931d": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_zuora__line_item_history_invoice_item_id", "resource_type": "test", "package_name": "zuora", "path": "not_null_zuora__line_item_history_invoice_item_id.sql", "original_file_path": "models/zuora.yml", "unique_id": "test.zuora.not_null_zuora__line_item_history_invoice_item_id.7b9dc1931d", "fqn": ["zuora", "not_null_zuora__line_item_history_invoice_item_id"], "alias": "not_null_zuora__line_item_history_invoice_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.423902, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zuora__line_item_history", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora.zuora__line_item_history"]}, "compiled_path": "target/compiled/zuora/models/zuora.yml/not_null_zuora__line_item_history_invoice_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_item_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__line_item_history\"\nwhere invoice_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_item_id", "file_key_name": "models.zuora__line_item_history", "attached_node": "model.zuora.zuora__line_item_history", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_item_id", "model": "{{ get_where_subquery(ref('zuora__line_item_history')) }}"}, "namespace": null}}, "test.zuora.unique_zuora__monthly_recurring_revenue_account_monthly_id.a7bf72a906": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_zuora__monthly_recurring_revenue_account_monthly_id", "resource_type": "test", "package_name": "zuora", "path": "unique_zuora__monthly_recurring_revenue_account_monthly_id.sql", "original_file_path": "models/zuora.yml", "unique_id": "test.zuora.unique_zuora__monthly_recurring_revenue_account_monthly_id.a7bf72a906", "fqn": ["zuora", "unique_zuora__monthly_recurring_revenue_account_monthly_id"], "alias": "unique_zuora__monthly_recurring_revenue_account_monthly_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.424874, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zuora__monthly_recurring_revenue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora.zuora__monthly_recurring_revenue"]}, "compiled_path": "target/compiled/zuora/models/zuora.yml/unique_zuora__monthly_recurring_revenue_account_monthly_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_monthly_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__monthly_recurring_revenue\"\nwhere account_monthly_id is not null\ngroup by account_monthly_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_monthly_id", "file_key_name": "models.zuora__monthly_recurring_revenue", "attached_node": "model.zuora.zuora__monthly_recurring_revenue", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_monthly_id", "model": "{{ get_where_subquery(ref('zuora__monthly_recurring_revenue')) }}"}, "namespace": null}}, "test.zuora.not_null_zuora__monthly_recurring_revenue_account_monthly_id.652f06f421": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_zuora__monthly_recurring_revenue_account_monthly_id", "resource_type": "test", "package_name": "zuora", "path": "not_null_zuora__monthly_recurring_revenue_account_monthly_id.sql", "original_file_path": "models/zuora.yml", "unique_id": "test.zuora.not_null_zuora__monthly_recurring_revenue_account_monthly_id.652f06f421", "fqn": ["zuora", "not_null_zuora__monthly_recurring_revenue_account_monthly_id"], "alias": "not_null_zuora__monthly_recurring_revenue_account_monthly_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.4258308, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zuora__monthly_recurring_revenue", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora.zuora__monthly_recurring_revenue"]}, "compiled_path": "target/compiled/zuora/models/zuora.yml/not_null_zuora__monthly_recurring_revenue_account_monthly_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_monthly_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__monthly_recurring_revenue\"\nwhere account_monthly_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_monthly_id", "file_key_name": "models.zuora__monthly_recurring_revenue", "attached_node": "model.zuora.zuora__monthly_recurring_revenue", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_monthly_id", "model": "{{ get_where_subquery(ref('zuora__monthly_recurring_revenue')) }}"}, "namespace": null}}, "test.zuora.unique_zuora__subscription_overview_subscription_key.75505ca1b9": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_zuora__subscription_overview_subscription_key", "resource_type": "test", "package_name": "zuora", "path": "unique_zuora__subscription_overview_subscription_key.sql", "original_file_path": "models/zuora.yml", "unique_id": "test.zuora.unique_zuora__subscription_overview_subscription_key.75505ca1b9", "fqn": ["zuora", "unique_zuora__subscription_overview_subscription_key"], "alias": "unique_zuora__subscription_overview_subscription_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.427201, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zuora__subscription_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora.zuora__subscription_overview"]}, "compiled_path": "target/compiled/zuora/models/zuora.yml/unique_zuora__subscription_overview_subscription_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_key as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__subscription_overview\"\nwhere subscription_key is not null\ngroup by subscription_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subscription_key", "file_key_name": "models.zuora__subscription_overview", "attached_node": "model.zuora.zuora__subscription_overview", "test_metadata": {"name": "unique", "kwargs": {"column_name": "subscription_key", "model": "{{ get_where_subquery(ref('zuora__subscription_overview')) }}"}, "namespace": null}}, "test.zuora.not_null_zuora__subscription_overview_subscription_key.cf236f775f": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_zuora__subscription_overview_subscription_key", "resource_type": "test", "package_name": "zuora", "path": "not_null_zuora__subscription_overview_subscription_key.sql", "original_file_path": "models/zuora.yml", "unique_id": "test.zuora.not_null_zuora__subscription_overview_subscription_key.cf236f775f", "fqn": ["zuora", "not_null_zuora__subscription_overview_subscription_key"], "alias": "not_null_zuora__subscription_overview_subscription_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.4281678, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "zuora__subscription_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora.zuora__subscription_overview"]}, "compiled_path": "target/compiled/zuora/models/zuora.yml/not_null_zuora__subscription_overview_subscription_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_key\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"zuora__subscription_overview\"\nwhere subscription_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subscription_key", "file_key_name": "models.zuora__subscription_overview", "attached_node": "model.zuora.zuora__subscription_overview", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_key", "model": "{{ get_where_subquery(ref('zuora__subscription_overview')) }}"}, "namespace": null}}, "test.zuora.dbt_utils_unique_combination_of_columns_zuora__line_item_enhanced_header_id__line_item_id.8348c40ed1": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_zuora__line_item_enhanced_header_id__line_item_id", "resource_type": "test", "package_name": "zuora", "path": "dbt_utils_unique_combination_o_7b7c9632761c6155a51c368ac6a88198.sql", "original_file_path": "models/standardized_models/zuora__standardized_models.yml", "unique_id": "test.zuora.dbt_utils_unique_combination_of_columns_zuora__line_item_enhanced_header_id__line_item_id.8348c40ed1", "fqn": ["zuora", "standardized_models", "dbt_utils_unique_combination_of_columns_zuora__line_item_enhanced_header_id__line_item_id"], "alias": "dbt_utils_unique_combination_o_7b7c9632761c6155a51c368ac6a88198", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_7b7c9632761c6155a51c368ac6a88198", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7b7c9632761c6155a51c368ac6a88198"}, "created_at": 1723501432.434643, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7b7c9632761c6155a51c368ac6a88198\") }}", "language": "sql", "refs": [{"name": "zuora__line_item_enhanced", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.zuora__line_item_enhanced", "attached_node": "model.zuora.zuora__line_item_enhanced", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["header_id", "line_item_id"], "model": "{{ get_where_subquery(ref('zuora__line_item_enhanced')) }}"}, "namespace": "dbt_utils"}}, "test.zuora_source.unique_stg_zuora__account_account_id.48b1eab20d": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__account_account_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__account_account_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__account_account_id.48b1eab20d", "fqn": ["zuora_source", "unique_stg_zuora__account_account_id"], "alias": "unique_stg_zuora__account_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.5315342, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__account"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__account_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__account\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.stg_zuora__account", "attached_node": "model.zuora_source.stg_zuora__account", "test_metadata": {"name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_zuora__account')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__account_account_id.fbbdb7cb1f": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__account_account_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__account_account_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__account_account_id.fbbdb7cb1f", "fqn": ["zuora_source", "not_null_stg_zuora__account_account_id"], "alias": "not_null_stg_zuora__account_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.5325959, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__account"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__account_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__account\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.stg_zuora__account", "attached_node": "model.zuora_source.stg_zuora__account", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_zuora__account')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__amendment_amendment_id.1adf35b9b3": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__amendment_amendment_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__amendment_amendment_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__amendment_amendment_id.1adf35b9b3", "fqn": ["zuora_source", "unique_stg_zuora__amendment_amendment_id"], "alias": "unique_stg_zuora__amendment_amendment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.53358, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__amendment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__amendment"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__amendment_amendment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    amendment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__amendment\"\nwhere amendment_id is not null\ngroup by amendment_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "amendment_id", "file_key_name": "models.stg_zuora__amendment", "attached_node": "model.zuora_source.stg_zuora__amendment", "test_metadata": {"name": "unique", "kwargs": {"column_name": "amendment_id", "model": "{{ get_where_subquery(ref('stg_zuora__amendment')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__amendment_amendment_id.d5dfc9f72e": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__amendment_amendment_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__amendment_amendment_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__amendment_amendment_id.d5dfc9f72e", "fqn": ["zuora_source", "not_null_stg_zuora__amendment_amendment_id"], "alias": "not_null_stg_zuora__amendment_amendment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.534553, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__amendment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__amendment"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__amendment_amendment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amendment_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__amendment\"\nwhere amendment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "amendment_id", "file_key_name": "models.stg_zuora__amendment", "attached_node": "model.zuora_source.stg_zuora__amendment", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "amendment_id", "model": "{{ get_where_subquery(ref('stg_zuora__amendment')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__contact_contact_id.55e4bbceda": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__contact_contact_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__contact_contact_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__contact_contact_id.55e4bbceda", "fqn": ["zuora_source", "unique_stg_zuora__contact_contact_id"], "alias": "unique_stg_zuora__contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.5355651, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__contact"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__contact_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    contact_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__contact\"\nwhere contact_id is not null\ngroup by contact_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "contact_id", "file_key_name": "models.stg_zuora__contact", "attached_node": "model.zuora_source.stg_zuora__contact", "test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('stg_zuora__contact')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__contact_contact_id.825f7a5ab6": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__contact_contact_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__contact_contact_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__contact_contact_id.825f7a5ab6", "fqn": ["zuora_source", "not_null_stg_zuora__contact_contact_id"], "alias": "not_null_stg_zuora__contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.536531, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__contact", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__contact"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__contact_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__contact\"\nwhere contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "contact_id", "file_key_name": "models.stg_zuora__contact", "attached_node": "model.zuora_source.stg_zuora__contact", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('stg_zuora__contact')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.48dcd90757": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__credit_balan_300f0e417893c7cb38f76d8c8a4c89a6.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.48dcd90757", "fqn": ["zuora_source", "unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id"], "alias": "unique_stg_zuora__credit_balan_300f0e417893c7cb38f76d8c8a4c89a6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_stg_zuora__credit_balan_300f0e417893c7cb38f76d8c8a4c89a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "unique_stg_zuora__credit_balan_300f0e417893c7cb38f76d8c8a4c89a6"}, "created_at": 1723501432.5375092, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_zuora__credit_balan_300f0e417893c7cb38f76d8c8a4c89a6\") }}", "language": "sql", "refs": [{"name": "stg_zuora__credit_balance_adjustment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__credit_balance_adjustment"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__credit_balan_300f0e417893c7cb38f76d8c8a4c89a6.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    credit_balance_adjustment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__credit_balance_adjustment\"\nwhere credit_balance_adjustment_id is not null\ngroup by credit_balance_adjustment_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "credit_balance_adjustment_id", "file_key_name": "models.stg_zuora__credit_balance_adjustment", "attached_node": "model.zuora_source.stg_zuora__credit_balance_adjustment", "test_metadata": {"name": "unique", "kwargs": {"column_name": "credit_balance_adjustment_id", "model": "{{ get_where_subquery(ref('stg_zuora__credit_balance_adjustment')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.b7d154ddd5": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__credit_bal_d92ee4a3d9478d91301432c8d7d61856.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.b7d154ddd5", "fqn": ["zuora_source", "not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id"], "alias": "not_null_stg_zuora__credit_bal_d92ee4a3d9478d91301432c8d7d61856", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_zuora__credit_bal_d92ee4a3d9478d91301432c8d7d61856", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_zuora__credit_bal_d92ee4a3d9478d91301432c8d7d61856"}, "created_at": 1723501432.538476, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_zuora__credit_bal_d92ee4a3d9478d91301432c8d7d61856\") }}", "language": "sql", "refs": [{"name": "stg_zuora__credit_balance_adjustment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__credit_balance_adjustment"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__credit_bal_d92ee4a3d9478d91301432c8d7d61856.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_balance_adjustment_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__credit_balance_adjustment\"\nwhere credit_balance_adjustment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "credit_balance_adjustment_id", "file_key_name": "models.stg_zuora__credit_balance_adjustment", "attached_node": "model.zuora_source.stg_zuora__credit_balance_adjustment", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_balance_adjustment_id", "model": "{{ get_where_subquery(ref('stg_zuora__credit_balance_adjustment')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__invoice_invoice_id.bce76b88e8": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__invoice_invoice_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__invoice_invoice_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__invoice_invoice_id.bce76b88e8", "fqn": ["zuora_source", "unique_stg_zuora__invoice_invoice_id"], "alias": "unique_stg_zuora__invoice_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.539437, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__invoice"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__invoice_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice\"\nwhere invoice_id is not null\ngroup by invoice_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_zuora__invoice", "attached_node": "model.zuora_source.stg_zuora__invoice", "test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_zuora__invoice')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__invoice_invoice_id.2461bd7df7": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__invoice_invoice_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__invoice_invoice_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__invoice_invoice_id.2461bd7df7", "fqn": ["zuora_source", "not_null_stg_zuora__invoice_invoice_id"], "alias": "not_null_stg_zuora__invoice_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.540436, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__invoice"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__invoice_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice\"\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_zuora__invoice", "attached_node": "model.zuora_source.stg_zuora__invoice", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_zuora__invoice')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__invoice_item_invoice_item_id.c04fd09b46": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__invoice_item_invoice_item_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__invoice_item_invoice_item_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__invoice_item_invoice_item_id.c04fd09b46", "fqn": ["zuora_source", "unique_stg_zuora__invoice_item_invoice_item_id"], "alias": "unique_stg_zuora__invoice_item_invoice_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.541406, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__invoice_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__invoice_item"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__invoice_item_invoice_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice_item\"\nwhere invoice_item_id is not null\ngroup by invoice_item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_item_id", "file_key_name": "models.stg_zuora__invoice_item", "attached_node": "model.zuora_source.stg_zuora__invoice_item", "test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_item_id", "model": "{{ get_where_subquery(ref('stg_zuora__invoice_item')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__invoice_item_invoice_item_id.c9ce75552a": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__invoice_item_invoice_item_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__invoice_item_invoice_item_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__invoice_item_invoice_item_id.c9ce75552a", "fqn": ["zuora_source", "not_null_stg_zuora__invoice_item_invoice_item_id"], "alias": "not_null_stg_zuora__invoice_item_invoice_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.5423648, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__invoice_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__invoice_item"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__invoice_item_invoice_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_item_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__invoice_item\"\nwhere invoice_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_item_id", "file_key_name": "models.stg_zuora__invoice_item", "attached_node": "model.zuora_source.stg_zuora__invoice_item", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_item_id", "model": "{{ get_where_subquery(ref('stg_zuora__invoice_item')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__order_order_id.2506b4224d": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__order_order_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__order_order_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__order_order_id.2506b4224d", "fqn": ["zuora_source", "unique_stg_zuora__order_order_id"], "alias": "unique_stg_zuora__order_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.543325, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__order", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__order"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__order_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__order\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_zuora__order", "attached_node": "model.zuora_source.stg_zuora__order", "test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_zuora__order')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__order_order_id.3e57f63e6b": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__order_order_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__order_order_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__order_order_id.3e57f63e6b", "fqn": ["zuora_source", "not_null_stg_zuora__order_order_id"], "alias": "not_null_stg_zuora__order_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.5443358, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__order", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__order"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__order_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__order\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "order_id", "file_key_name": "models.stg_zuora__order", "attached_node": "model.zuora_source.stg_zuora__order", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_zuora__order')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__payment_payment_id.104a07cd8c": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__payment_payment_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__payment_payment_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__payment_payment_id.104a07cd8c", "fqn": ["zuora_source", "unique_stg_zuora__payment_payment_id"], "alias": "unique_stg_zuora__payment_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.5452979, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__payment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__payment"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__payment_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    payment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__payment\"\nwhere payment_id is not null\ngroup by payment_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.stg_zuora__payment", "attached_node": "model.zuora_source.stg_zuora__payment", "test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_zuora__payment')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__payment_payment_id.21d5bbc205": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__payment_payment_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__payment_payment_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__payment_payment_id.21d5bbc205", "fqn": ["zuora_source", "not_null_stg_zuora__payment_payment_id"], "alias": "not_null_stg_zuora__payment_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.546255, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__payment", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__payment"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__payment_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__payment\"\nwhere payment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_id", "file_key_name": "models.stg_zuora__payment", "attached_node": "model.zuora_source.stg_zuora__payment", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_zuora__payment')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__payment_method_payment_method_id.f4d0192fe3": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__payment_method_payment_method_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__payment_method_payment_method_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__payment_method_payment_method_id.f4d0192fe3", "fqn": ["zuora_source", "unique_stg_zuora__payment_method_payment_method_id"], "alias": "unique_stg_zuora__payment_method_payment_method_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.547221, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__payment_method", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__payment_method"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__payment_method_payment_method_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    payment_method_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__payment_method\"\nwhere payment_method_id is not null\ngroup by payment_method_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method_id", "file_key_name": "models.stg_zuora__payment_method", "attached_node": "model.zuora_source.stg_zuora__payment_method", "test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_method_id", "model": "{{ get_where_subquery(ref('stg_zuora__payment_method')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__payment_method_payment_method_id.757f1baba1": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__payment_method_payment_method_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__payment_method_payment_method_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__payment_method_payment_method_id.757f1baba1", "fqn": ["zuora_source", "not_null_stg_zuora__payment_method_payment_method_id"], "alias": "not_null_stg_zuora__payment_method_payment_method_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.548179, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__payment_method", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__payment_method"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__payment_method_payment_method_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__payment_method\"\nwhere payment_method_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method_id", "file_key_name": "models.stg_zuora__payment_method", "attached_node": "model.zuora_source.stg_zuora__payment_method", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_method_id", "model": "{{ get_where_subquery(ref('stg_zuora__payment_method')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__product_product_id.aff0a8698c": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__product_product_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__product_product_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__product_product_id.aff0a8698c", "fqn": ["zuora_source", "unique_stg_zuora__product_product_id"], "alias": "unique_stg_zuora__product_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.549174, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__product"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__product_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product\"\nwhere product_id is not null\ngroup by product_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.stg_zuora__product", "attached_node": "model.zuora_source.stg_zuora__product", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_zuora__product')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__product_product_id.08d94a982a": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__product_product_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__product_product_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__product_product_id.08d94a982a", "fqn": ["zuora_source", "not_null_stg_zuora__product_product_id"], "alias": "not_null_stg_zuora__product_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.550157, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__product", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__product"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__product_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product\"\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_id", "file_key_name": "models.stg_zuora__product", "attached_node": "model.zuora_source.stg_zuora__product", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_zuora__product')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__product_rate_plan_product_rate_plan_id.5172fe6de3": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__product_rate_plan_product_rate_plan_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__product_rate_plan_product_rate_plan_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__product_rate_plan_product_rate_plan_id.5172fe6de3", "fqn": ["zuora_source", "unique_stg_zuora__product_rate_plan_product_rate_plan_id"], "alias": "unique_stg_zuora__product_rate_plan_product_rate_plan_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.551115, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__product_rate_plan", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__product_rate_plan"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__product_rate_plan_product_rate_plan_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_rate_plan_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product_rate_plan\"\nwhere product_rate_plan_id is not null\ngroup by product_rate_plan_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_rate_plan_id", "file_key_name": "models.stg_zuora__product_rate_plan", "attached_node": "model.zuora_source.stg_zuora__product_rate_plan", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_rate_plan_id", "model": "{{ get_where_subquery(ref('stg_zuora__product_rate_plan')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__product_rate_plan_product_rate_plan_id.17b42ef97f": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__product_rate_plan_product_rate_plan_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__product_rate_plan_product_rate_plan_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__product_rate_plan_product_rate_plan_id.17b42ef97f", "fqn": ["zuora_source", "not_null_stg_zuora__product_rate_plan_product_rate_plan_id"], "alias": "not_null_stg_zuora__product_rate_plan_product_rate_plan_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.552068, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__product_rate_plan", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__product_rate_plan"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__product_rate_plan_product_rate_plan_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_rate_plan_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product_rate_plan\"\nwhere product_rate_plan_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_rate_plan_id", "file_key_name": "models.stg_zuora__product_rate_plan", "attached_node": "model.zuora_source.stg_zuora__product_rate_plan", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_rate_plan_id", "model": "{{ get_where_subquery(ref('stg_zuora__product_rate_plan')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.3fba29feec": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__product_rate_08977e4ab9f51891d8da9997fadd65e5.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.3fba29feec", "fqn": ["zuora_source", "unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id"], "alias": "unique_stg_zuora__product_rate_08977e4ab9f51891d8da9997fadd65e5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_stg_zuora__product_rate_08977e4ab9f51891d8da9997fadd65e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "unique_stg_zuora__product_rate_08977e4ab9f51891d8da9997fadd65e5"}, "created_at": 1723501432.553067, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_zuora__product_rate_08977e4ab9f51891d8da9997fadd65e5\") }}", "language": "sql", "refs": [{"name": "stg_zuora__product_rate_plan_charge", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__product_rate_plan_charge"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__product_rate_08977e4ab9f51891d8da9997fadd65e5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_rate_plan_charge_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product_rate_plan_charge\"\nwhere product_rate_plan_charge_id is not null\ngroup by product_rate_plan_charge_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_rate_plan_charge_id", "file_key_name": "models.stg_zuora__product_rate_plan_charge", "attached_node": "model.zuora_source.stg_zuora__product_rate_plan_charge", "test_metadata": {"name": "unique", "kwargs": {"column_name": "product_rate_plan_charge_id", "model": "{{ get_where_subquery(ref('stg_zuora__product_rate_plan_charge')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.ee9a534d30": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__product_ra_1f899cc7faedf9a58a90dd9fe53fd0d8.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.ee9a534d30", "fqn": ["zuora_source", "not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id"], "alias": "not_null_stg_zuora__product_ra_1f899cc7faedf9a58a90dd9fe53fd0d8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_zuora__product_ra_1f899cc7faedf9a58a90dd9fe53fd0d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"alias": "not_null_stg_zuora__product_ra_1f899cc7faedf9a58a90dd9fe53fd0d8"}, "created_at": 1723501432.554018, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_zuora__product_ra_1f899cc7faedf9a58a90dd9fe53fd0d8\") }}", "language": "sql", "refs": [{"name": "stg_zuora__product_rate_plan_charge", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__product_rate_plan_charge"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__product_ra_1f899cc7faedf9a58a90dd9fe53fd0d8.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_rate_plan_charge_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__product_rate_plan_charge\"\nwhere product_rate_plan_charge_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "product_rate_plan_charge_id", "file_key_name": "models.stg_zuora__product_rate_plan_charge", "attached_node": "model.zuora_source.stg_zuora__product_rate_plan_charge", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_rate_plan_charge_id", "model": "{{ get_where_subquery(ref('stg_zuora__product_rate_plan_charge')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__rate_plan_rate_plan_id.09741de08d": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__rate_plan_rate_plan_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__rate_plan_rate_plan_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__rate_plan_rate_plan_id.09741de08d", "fqn": ["zuora_source", "unique_stg_zuora__rate_plan_rate_plan_id"], "alias": "unique_stg_zuora__rate_plan_rate_plan_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.5549781, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__rate_plan", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__rate_plan"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__rate_plan_rate_plan_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rate_plan_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__rate_plan\"\nwhere rate_plan_id is not null\ngroup by rate_plan_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rate_plan_id", "file_key_name": "models.stg_zuora__rate_plan", "attached_node": "model.zuora_source.stg_zuora__rate_plan", "test_metadata": {"name": "unique", "kwargs": {"column_name": "rate_plan_id", "model": "{{ get_where_subquery(ref('stg_zuora__rate_plan')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__rate_plan_rate_plan_id.0a3262a4ac": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__rate_plan_rate_plan_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__rate_plan_rate_plan_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__rate_plan_rate_plan_id.0a3262a4ac", "fqn": ["zuora_source", "not_null_stg_zuora__rate_plan_rate_plan_id"], "alias": "not_null_stg_zuora__rate_plan_rate_plan_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.5559292, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__rate_plan", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__rate_plan"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__rate_plan_rate_plan_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rate_plan_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__rate_plan\"\nwhere rate_plan_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rate_plan_id", "file_key_name": "models.stg_zuora__rate_plan", "attached_node": "model.zuora_source.stg_zuora__rate_plan", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "rate_plan_id", "model": "{{ get_where_subquery(ref('stg_zuora__rate_plan')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.968ebd8116": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__rate_plan_charge_rate_plan_charge_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.968ebd8116", "fqn": ["zuora_source", "unique_stg_zuora__rate_plan_charge_rate_plan_charge_id"], "alias": "unique_stg_zuora__rate_plan_charge_rate_plan_charge_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.556879, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__rate_plan_charge", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__rate_plan_charge"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rate_plan_charge_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__rate_plan_charge\"\nwhere rate_plan_charge_id is not null\ngroup by rate_plan_charge_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rate_plan_charge_id", "file_key_name": "models.stg_zuora__rate_plan_charge", "attached_node": "model.zuora_source.stg_zuora__rate_plan_charge", "test_metadata": {"name": "unique", "kwargs": {"column_name": "rate_plan_charge_id", "model": "{{ get_where_subquery(ref('stg_zuora__rate_plan_charge')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.4f37fe0feb": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.4f37fe0feb", "fqn": ["zuora_source", "not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id"], "alias": "not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.557905, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__rate_plan_charge", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__rate_plan_charge"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rate_plan_charge_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__rate_plan_charge\"\nwhere rate_plan_charge_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "rate_plan_charge_id", "file_key_name": "models.stg_zuora__rate_plan_charge", "attached_node": "model.zuora_source.stg_zuora__rate_plan_charge", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "rate_plan_charge_id", "model": "{{ get_where_subquery(ref('stg_zuora__rate_plan_charge')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__refund_refund_id.01e977f065": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__refund_refund_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__refund_refund_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__refund_refund_id.01e977f065", "fqn": ["zuora_source", "unique_stg_zuora__refund_refund_id"], "alias": "unique_stg_zuora__refund_refund_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.558895, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__refund", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__refund"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__refund_refund_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    refund_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__refund\"\nwhere refund_id is not null\ngroup by refund_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "refund_id", "file_key_name": "models.stg_zuora__refund", "attached_node": "model.zuora_source.stg_zuora__refund", "test_metadata": {"name": "unique", "kwargs": {"column_name": "refund_id", "model": "{{ get_where_subquery(ref('stg_zuora__refund')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__subscription_subscription_id.219bd2fe86": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__subscription_subscription_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__subscription_subscription_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__subscription_subscription_id.219bd2fe86", "fqn": ["zuora_source", "unique_stg_zuora__subscription_subscription_id"], "alias": "unique_stg_zuora__subscription_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.5598578, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__subscription", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__subscription"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__subscription_subscription_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__subscription\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.stg_zuora__subscription", "attached_node": "model.zuora_source.stg_zuora__subscription", "test_metadata": {"name": "unique", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('stg_zuora__subscription')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__subscription_subscription_id.be7f23f7d2": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__subscription_subscription_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__subscription_subscription_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__subscription_subscription_id.be7f23f7d2", "fqn": ["zuora_source", "not_null_stg_zuora__subscription_subscription_id"], "alias": "not_null_stg_zuora__subscription_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.560822, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__subscription", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__subscription"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__subscription_subscription_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__subscription\"\nwhere subscription_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.stg_zuora__subscription", "attached_node": "model.zuora_source.stg_zuora__subscription", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('stg_zuora__subscription')) }}"}, "namespace": null}}, "test.zuora_source.unique_stg_zuora__taxation_item_taxation_item_id.2762673f7d": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "unique_stg_zuora__taxation_item_taxation_item_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__taxation_item_taxation_item_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__taxation_item_taxation_item_id.2762673f7d", "fqn": ["zuora_source", "unique_stg_zuora__taxation_item_taxation_item_id"], "alias": "unique_stg_zuora__taxation_item_taxation_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.5618281, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__taxation_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__taxation_item"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__taxation_item_taxation_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    taxation_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__taxation_item\"\nwhere taxation_item_id is not null\ngroup by taxation_item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "taxation_item_id", "file_key_name": "models.stg_zuora__taxation_item", "attached_node": "model.zuora_source.stg_zuora__taxation_item", "test_metadata": {"name": "unique", "kwargs": {"column_name": "taxation_item_id", "model": "{{ get_where_subquery(ref('stg_zuora__taxation_item')) }}"}, "namespace": null}}, "test.zuora_source.not_null_stg_zuora__taxation_item_taxation_item_id.8f5f59eabf": {"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "not_null_stg_zuora__taxation_item_taxation_item_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__taxation_item_taxation_item_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__taxation_item_taxation_item_id.8f5f59eabf", "fqn": ["zuora_source", "not_null_stg_zuora__taxation_item_taxation_item_id"], "alias": "not_null_stg_zuora__taxation_item_taxation_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1723501432.562779, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_zuora__taxation_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__taxation_item"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__taxation_item_taxation_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect taxation_item_id\nfrom \"postgres\".\"zz_zuora_zuora_dev\".\"stg_zuora__taxation_item\"\nwhere taxation_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "taxation_item_id", "file_key_name": "models.stg_zuora__taxation_item", "attached_node": "model.zuora_source.stg_zuora__taxation_item", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "taxation_item_id", "model": "{{ get_where_subquery(ref('stg_zuora__taxation_item')) }}"}, "namespace": null}}}, "sources": {"source.zuora_source.zuora.account": {"database": "postgres", "schema": "zz_zuora", "name": "account", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.account", "fqn": ["zuora_source", "zuora", "account"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_account_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "An account is a customer account that collects all of the critical information about the customer, such as contact information, payment terms, and payment methods.", "columns": {"id": {"name": "id", "description": "The unique identifier of the account table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "Unique account number assigned to the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auto_pay": {"name": "auto_pay", "description": "Indicates if future payments are automatically collected when they're due during a Payment Run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Current outstanding balance for the account. Can be calculated by (Total Invoice Balance - Total Credit Balance)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "batch": {"name": "batch", "description": "Organizes your customer accounts into groups to optimize your billing and payment operations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_cycle_day": {"name": "bill_cycle_day", "description": "Day on which bill runs generate invoices for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "Person that you would like to bill or send the invoice to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_balance": {"name": "credit_balance", "description": "Total credit balance for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "crm_id": {"name": "crm_id", "description": "CRM account id, used in Salesforce integration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Currency the customer is billed in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "Identifier of the default payment method for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_invoice_date": {"name": "last_invoice_date", "description": "The date when the previous invoice was generated for the account. The field value is null if no invoice has ever been generated for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mrr": {"name": "mrr", "description": "The amount of predictable revenue expected to be received on a monthly basis.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Account name as displayed in Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Comments about the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "Identifier of the parent customer account for this account. Use this field if you have customer hierarchy enabled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_term": {"name": "payment_term", "description": "Indicates when the customer pays for subscriptions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "Person that you have sold your product or services to; can be the same as the bill to contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the account in the system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_exempt_effective_date": {"name": "tax_exempt_effective_date", "description": "Date when the customer's tax exemption starts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_exempt_expiration_date": {"name": "tax_exempt_expiration_date", "description": "Date when the customer's tax exemption certificate expires.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_exempt_status": {"name": "tax_exempt_status", "description": "Status of the account's tax exemption.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_debit_memo_balance": {"name": "total_debit_memo_balance", "description": "Total balance of the account's debit memos.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_invoice_balance": {"name": "total_invoice_balance", "description": "Total balance of the account's invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unapplied_balance": {"name": "unapplied_balance", "description": "Total of unapplied payments not applied to invoices or debit memos.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unapplied_credit_memo_amount": {"name": "unapplied_credit_memo_amount", "description": "Total of credit memos created that has been created, but not used to settle or offset an invoice balance or a debit memo balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "vatid": {"name": "vatid", "description": "EU Value Added Tax id.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_account_data\"", "created_at": 1723501432.628472}, "source.zuora_source.zuora.amendment": {"database": "postgres", "schema": "zz_zuora", "name": "amendment", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.amendment", "fqn": ["zuora_source", "zuora", "amendment"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_amendment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "When a customer needs to make a change to a subscription, you make that change through an amendment. Common subscription changes include 'Changing the terms and conditions of a contract; add a product or update an existing product to a subscription; renew, cancel, suspend or resume a subscription.'", "columns": {"id": {"name": "id", "description": "The unique identifier of the amendment table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auto_renew": {"name": "auto_renew", "description": "Determines whether the subscription is automatically renewed, or whether it expires at the end of the term and needs to be manually renewed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "booking_date": {"name": "booking_date", "description": "The date when the amendment is signed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "code": {"name": "code", "description": "A unique alphanumeric string that identifies the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_effective_date": {"name": "contract_effective_date", "description": "The date when the amendment's changes become effective for billing purposes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term": {"name": "current_term", "description": "The length of the period for the current subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term_period_type": {"name": "current_term_period_type", "description": "The period type for the current subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_acceptance_date": {"name": "customer_acceptance_date", "description": "The date when the customer accepts the amendment's changes to the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A description of the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "The date when the amendment's changes take effective. This field validates that the amendment's changes are within valid ranges of products and product rate plans.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "new_rate_plan_id": {"name": "new_rate_plan_id", "description": "The id of the rate plan that was added to the subscription by this amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "removed_rate_plan_id": {"name": "removed_rate_plan_id", "description": "The id of the rate plan that was removed from the subscription by this amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_setting": {"name": "renewal_setting", "description": "Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_term": {"name": "renewal_term", "description": "The term of renewal for the amended subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_term_period_type": {"name": "renewal_term_period_type", "description": "The period type for the subscription renewal term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "resume_date": {"name": "resume_date", "description": "The date when the subscription resumption takes effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_activation_date": {"name": "service_activation_date", "description": "The date when service is activated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specific_update_date": {"name": "specific_update_date", "description": "The date when the UpdateProduct amendment takes effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription that the amendment changes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "suspend_date": {"name": "suspend_date", "description": "The date when the subscription suspension takes effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_start_date": {"name": "term_start_date", "description": "The date when the new terms and conditions take effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_type": {"name": "term_type", "description": "Indicates if the subscription is TERMED (expiration date, must be manually renewed), EVERGREEN (doesn't have expiration date, must be manually ended).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_amendment_data\"", "created_at": 1723501432.629279}, "source.zuora_source.zuora.contact": {"database": "postgres", "schema": "zz_zuora", "name": "contact", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.contact", "fqn": ["zuora_source", "zuora", "contact"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_contact_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Customer who holds an account or who is otherwise a person to contact about an account.", "columns": {"id": {"name": "id", "description": "The unique identifier of the contact table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The Zuora account id associated with this contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_1": {"name": "address_1", "description": "The first line of the contact's address, which is often a street address or business name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_2": {"name": "address_2", "description": "The second line of the contact's address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "The city of the contact's address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "The country of the contact's address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A description for the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The contact's first name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The contact's last name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "postal_code": {"name": "postal_code", "description": "The zip code for the contact's address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The state for the contact's address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_email": {"name": "work_email", "description": "The contact's business email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "work_phone": {"name": "work_phone", "description": "The contact's business phone number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_contact_data\"", "created_at": 1723501432.6294029}, "source.zuora_source.zuora.credit_balance_adjustment": {"database": "postgres", "schema": "zz_zuora", "name": "credit_balance_adjustment", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.credit_balance_adjustment", "fqn": ["zuora_source", "zuora", "credit_balance_adjustment"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_credit_balance_adjustment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "An adjustment to change a customer's credit balance.  Applies adjustments to credit balances on billing accounts. This includes applying credit balance to invoices and transferring an invoice to a credit balance.", "columns": {"id": {"name": "id", "description": "The unique identifier of the credit balance adjustment table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account id of the credit balance's account. Zuora generates this value from the source transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The accounting code ID for the account receivable account to which the adjustment was made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code for the credit balance adjustment, maps to a bank account in the accounting system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adjustment_date": {"name": "adjustment_date", "description": "The date when the credit balance adjustment is applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The amount of the adjustment in the home currency of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "Person that you would like to bill or send the invoice to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancelled_on": {"name": "cancelled_on", "description": "Date when the credit balance adjustment was canceled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "Comments about the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "Identifier of the default payment method for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used for the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date of the exchange rate used for the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Home currency the customer is billed in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The ID of the invoice associated with the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "The ID of the journal entry associated with the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique identifier for the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The ID of the parent account associated with the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reason_code": {"name": "reason_code", "description": "The reason code for the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reference_id": {"name": "reference_id", "description": "The reference ID for the adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "Person that you have sold your product or services to; can be the same as the bill to contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_transaction_id": {"name": "source_transaction_id", "description": "The id of the object that the credit balance adjustment is applied to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_transaction_number": {"name": "source_transaction_number", "description": "The number of the object that the credit balance adjustment is applied to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_transaction_type": {"name": "source_transaction_type", "description": "The source of the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "Transaction currency the customer is billed in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "Indicates the status of the credit balance adjustment's transfer to an external accounting system, such as Netsuite.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Specifies if the credit balance adjustment increases or decrease the amount of the credit balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the credit balance adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_credit_balance_adjustment_data\"", "created_at": 1723501432.629538}, "source.zuora_source.zuora.invoice": {"database": "postgres", "schema": "zz_zuora", "name": "invoice", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.invoice", "fqn": ["zuora_source", "zuora", "invoice"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_invoice_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "An invoice represents a bill to a customer, providing information about customers' accounts for invoices, including dates, status, and amounts. It is created at the account level, and can include all of the charges for multiple subscriptions for an account.", "columns": {"id": {"name": "id", "description": "The unique identifier of the invoice table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account identifier associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "adjustment_amount": {"name": "adjustment_amount", "description": "The amount of the invoice adjustments associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The sum of all charges and taxes associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The total amount of the invoice in the home currency of the customer's billing account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_without_tax": {"name": "amount_without_tax", "description": "The sum of all charges associated with the invoice. Taxes are excluded from this value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_without_tax_home_currency": {"name": "amount_without_tax_home_currency", "description": "The amount of the invoice that is not subject to tax, in the home currency of the customer's billing account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auto_pay": {"name": "auto_pay", "description": "Whether invoices are automatically picked up for processing in the corresponding payment run.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The remaining balance of the invoice after all payments, adjustments, and refunds are applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "Person that you would like to bill or send the invoice to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comments": {"name": "comments", "description": "Additional comments about the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_balance_adjustment_amount": {"name": "credit_balance_adjustment_amount", "description": "The total amount of credit balance adjustments applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_memo_amount": {"name": "credit_memo_amount", "description": "The total amount of credit memos applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "Identifier of the default payment method for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The due date of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used to convert the invoice amount into the customer's billing account currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date the exchange rate was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Home currency the customer is billed in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "includes_one_time": {"name": "includes_one_time", "description": "Specifies whether the invoice includes one-time charges.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "includes_recurring": {"name": "includes_recurring", "description": "Specifies whether the invoice includes recurring charges.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "includes_usage": {"name": "includes_usage", "description": "Specifies whether the invoice includes usage charges.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_date": {"name": "invoice_date", "description": "Specifies the date on which to generate the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "The unique identification number for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_email_sent_date": {"name": "last_email_sent_date", "description": "The date when the invoice was last emailed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The id of the parent account, if the invoice is associated with a parent-child account relationship.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_amount": {"name": "payment_amount", "description": "The amount of payments applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_term": {"name": "payment_term", "description": "The name of the payment term associated with the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "posted_by": {"name": "posted_by", "description": "The user id of the person who moved the invoice to Posted status.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "posted_date": {"name": "posted_date", "description": "The date when the invoice was posted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "Specifies the amount of a refund that was applied against an earlier payment on the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "Person that you have sold your product or services to; can be the same as the bill to contact.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The identifier of the value in the source field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The type of the invoice source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "target_date": {"name": "target_date", "description": "The date the invoice is generated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The total amount of the taxes applied to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_status": {"name": "tax_status", "description": "The status of tax calculation related to the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency in which the invoice is billed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "Indicates whether the invoice has been transferred to the accounting system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_invoice_data\"", "created_at": 1723501432.629745}, "source.zuora_source.zuora.invoice_item": {"database": "postgres", "schema": "zz_zuora", "name": "invoice_item", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.invoice_item", "fqn": ["zuora_source", "zuora", "invoice_item"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_invoice_item_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "An invoice item is an individual line item in an invoice. Invoice items are charges, such as a monthly recurring charge.", "columns": {"id": {"name": "id", "description": "The unique identifier of the invoice item table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "id of the account associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "id of the accounting code for the account receivable account for this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "Accounting code for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "id of the amendment associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "applied_to_invoice_item_id": {"name": "applied_to_invoice_item_id", "description": "id of the invoice item that this invoice item is applied to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Balance of the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "id of the contact to whom the invoice item is billed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "Amount charged for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_amount_home_currency": {"name": "charge_amount_home_currency", "description": "Amount charged for the invoice item in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_date": {"name": "charge_date", "description": "Date on which the charge for the invoice item was made.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_name": {"name": "charge_name", "description": "Name of the charge associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "id of the user who created this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Date on which the invoice item was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deferred_revenue_accounting_code_id": {"name": "deferred_revenue_accounting_code_id", "description": "id of the accounting code for the deferred revenue account for this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "Exchange rate for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "Date of the exchange rate for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Currency used for the invoice item in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "id of the invoice associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "id of the journal entry associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "id of the parent account associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "processing_type": {"name": "processing_type", "description": "Type of processing for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "id of the product associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "id of the product rate plan charge associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "id of the product rate plan associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate_plan_charge_id": {"name": "rate_plan_charge_id", "description": "id of the rate plan charge associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate_plan_id": {"name": "rate_plan_id", "description": "id of the rate plan associated with this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recognized_revenue_accounting_code_id": {"name": "recognized_revenue_accounting_code_id", "description": "id of the accounting code for the recognized revenue account for this invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rev_rec_start_date": {"name": "rev_rec_start_date", "description": "Date on which revenue recognition starts for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_end_date": {"name": "service_end_date", "description": "End date of the service associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_start_date": {"name": "service_start_date", "description": "Start date of the service associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sku": {"name": "sku", "description": "SKU of the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact to whom the product or service was sold.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_item_type": {"name": "source_item_type", "description": "The type of the source item that created the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The tax amount for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_mode": {"name": "tax_mode", "description": "The tax mode for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The transaction currency for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "The unit price for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uom": {"name": "uom", "description": "The unit of measure for the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the invoice item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the invoice item was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_invoice_item_data\"", "created_at": 1723501432.629892}, "source.zuora_source.zuora.invoice_payment": {"database": "postgres", "schema": "zz_zuora", "name": "invoice_payment", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.invoice_payment", "fqn": ["zuora_source", "zuora", "invoice_payment"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_invoice_payment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "invoice payment details", "columns": {"id": {"name": "id", "description": "The unique identifier of the invoice item table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the customer account that the invoice payment is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The id of the accounting code for the account receivable account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The id of the accounting period associated with the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_currency_rounding": {"name": "amount_currency_rounding", "description": "The amount of the invoice payment after rounding to the nearest currency unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The amount of the invoice payment in the home currency of the customer account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact associated with the billing address for the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cash_accounting_code_id": {"name": "cash_accounting_code_id", "description": "The id of the accounting code for the cash account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the invoice payment was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The id of the default payment method for the customer account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used to convert the transaction currency of the invoice payment to the home currency of the customer account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date of the exchange rate used to convert the transaction currency of the invoice payment to the home currency of the customer account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "The home currency of the customer account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "The id of the journal entry created for the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "journal_run_id": {"name": "journal_run_id", "description": "The id of the journal run associated with the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The id of the parent account for the customer account associated with the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_id": {"name": "payment_id", "description": "The id of the payment associated with the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "The id of the payment method used for the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "provider_exchange_rate_date": {"name": "provider_exchange_rate_date", "description": "The date of the exchange rate used by the payment provider to convert the transaction currency of the invoice payment to the currency of the payment provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "The amount of the refund applied to the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact associated with the shipping address for the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency of the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the invoice payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the invoice payment was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_invoice_payment_data\"", "created_at": 1723501432.630018}, "source.zuora_source.zuora.order": {"database": "postgres", "schema": "zz_zuora", "name": "order", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.order", "fqn": ["zuora_source", "zuora", "order"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_order_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Orders are contractual agreements between merchants and customers. You can create multiple subscriptions and subscription amendments at once in a single order. All the operations on subscriptions in orders are done by order actions.", "columns": {"id": {"name": "id", "description": "The unique identifier of the order table.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the account associated with this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact associated with the billing address for this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the order, such as NewSubscription or Amendment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when this order was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The id of the default payment method used for this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A brief description of this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "error_code": {"name": "error_code", "description": "The error code associated with this order, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "error_message": {"name": "error_message", "description": "The error message associated with this order, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "The date and time when this order was placed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "order_number": {"name": "order_number", "description": "The unique identifier for this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "response": {"name": "response", "description": "The response associated with this order, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "scheduled_date": {"name": "scheduled_date", "description": "The date and time when this order is scheduled to be processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact associated with the shipping address for this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state": {"name": "state", "description": "The state of this order, such as Draft or Processing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of this order, such as Pending or Completed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated this order.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when this order was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_order_data\"", "created_at": 1723501432.6301389}, "source.zuora_source.zuora.payment": {"database": "postgres", "schema": "zz_zuora", "name": "payment", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.payment", "fqn": ["zuora_source", "zuora", "payment"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_payment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A payment is the money that customers send to pay for invoices related to their subscriptions", "columns": {"id": {"name": "id", "description": "The unique identifier of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the Zuora account associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the payment in the transaction currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The amount of the payment in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "applied_amount": {"name": "applied_amount", "description": "The amount of the payment that has been applied to one or more invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "applied_credit_balance_amount": {"name": "applied_credit_balance_amount", "description": "The amount of the payment that has been applied to a credit balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact to which the payment should be billed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancelled_on": {"name": "cancelled_on", "description": "The date the payment was cancelled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "A comment associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date the payment was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "The date the payment will be effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used to convert the payment amount from the transaction currency to the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date the exchange rate was set.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "The home currency of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The id of the parent account associated with the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "The id of the payment method used for the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_number": {"name": "payment_number", "description": "The payment number assigned by Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "The amount of the payment that has been refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "settled_on": {"name": "settled_on", "description": "The date the payment was settled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact who made the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "submitted_on": {"name": "submitted_on", "description": "The date the payment was submitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The transaction currency of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "Whether the payment has been transferred to the accounting system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unapplied_amount": {"name": "unapplied_amount", "description": "The amount of the payment that has not yet been applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date the payment was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_payment_data\"", "created_at": 1723501432.630295}, "source.zuora_source.zuora.payment_method": {"database": "postgres", "schema": "zz_zuora", "name": "payment_method", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.payment_method", "fqn": ["zuora_source", "zuora", "payment_method"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_payment_method_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Payment methods are the ways in which customers pay for their subscriptions. Your customers can choose a payment method from your company's list of preferred payment methods.", "columns": {"id": {"name": "id", "description": "The unique identifier of the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier of the account associated with this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ach_account_type": {"name": "ach_account_type", "description": "The account type for ACH payment methods.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "A Boolean value indicating whether this payment method is active.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bank_transfer_account_type": {"name": "bank_transfer_account_type", "description": "The account type for bank transfer payment methods.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier of the user who created this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when this payment method was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_card_type": {"name": "credit_card_type", "description": "The credit card type for credit card payment methods.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_failed_sale_transaction_date": {"name": "last_failed_sale_transaction_date", "description": "The date and time when the last sale transaction failed for this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_transaction_date_time": {"name": "last_transaction_date_time", "description": "The date and time of the last transaction for this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_transaction_status": {"name": "last_transaction_status", "description": "The status of the last transaction for this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_consecutive_payment_failures": {"name": "max_consecutive_payment_failures", "description": "The maximum number of consecutive payment failures allowed for this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "num_consecutive_failures": {"name": "num_consecutive_failures", "description": "The number of consecutive payment failures for this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_status": {"name": "payment_method_status", "description": "The status of the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paypal_type": {"name": "paypal_type", "description": "The PayPal account type for PayPal payment methods.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sub_type": {"name": "sub_type", "description": "The sub-type of the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_number_of_error_payments": {"name": "total_number_of_error_payments", "description": "The total number of error payments for this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_number_of_processed_payments": {"name": "total_number_of_processed_payments", "description": "The total number of processed payments for this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated this payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when this payment method was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_payment_method_data\"", "created_at": 1723501432.630414}, "source.zuora_source.zuora.product": {"database": "postgres", "schema": "zz_zuora", "name": "product", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.product", "fqn": ["zuora_source", "zuora", "product"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_product_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A product is an item or service that your company sells. In the subscription economy, a product is generally a service that your customers subscribe to rather than a physical item that they purchase one time.", "columns": {"id": {"name": "id", "description": "The unique identifier for the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the product was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A description of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_end_date": {"name": "effective_end_date", "description": "The date when the product is no longer available for purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_start_date": {"name": "effective_start_date", "description": "The date when the product becomes available for purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sku": {"name": "sku", "description": "The SKU (stock keeping unit) of the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the product.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the product was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_product_data\"", "created_at": 1723501432.630518}, "source.zuora_source.zuora.product_rate_plan": {"database": "postgres", "schema": "zz_zuora", "name": "product_rate_plan", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.product_rate_plan", "fqn": ["zuora_source", "zuora", "product_rate_plan"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_product_rate_plan_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A product rate plan is the part of a product that your customers subscribe to. Each product can have multiple product rate plans, and each product rate plan can have multiple product rate plan charges, which are fees for products and their product rate plans.", "columns": {"id": {"name": "id", "description": "Unique identifier of the product rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the Zuora user who created the product rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the product rate plan was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A brief description of the product rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_end_date": {"name": "effective_end_date", "description": "The date when the product rate plan will no longer be effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_start_date": {"name": "effective_start_date", "description": "The date when the product rate plan becomes effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The id of the product that this rate plan belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the Zuora user who last updated the product rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the product rate plan was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_product_rate_plan_data\"", "created_at": 1723501432.63062}, "source.zuora_source.zuora.product_rate_plan_charge": {"database": "postgres", "schema": "zz_zuora", "name": "product_rate_plan_charge", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.product_rate_plan_charge", "fqn": ["zuora_source", "zuora", "product_rate_plan_charge"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_product_rate_plan_charge_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A product rate plan charge represents a charge model or a set of fees associated with a product rate plan, which is the part of a product that your customers subscribe to. Each product rate plan can have multiple product rate plan charges.", "columns": {"id": {"name": "id", "description": "Unique identifier of the product rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The id of the accounting code for the accounts receivable account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "apply_discount_to": {"name": "apply_discount_to", "description": "The type of charge to which discounts apply.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_cycle_day": {"name": "bill_cycle_day", "description": "The day of the bill cycle on which the charge should be billed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_cycle_type": {"name": "bill_cycle_type", "description": "The type of bill cycle for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_period": {"name": "billing_period", "description": "The billing period for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_model": {"name": "charge_model", "description": "The charge model for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_type": {"name": "charge_type", "description": "The type of charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date on which the charge was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_quantity": {"name": "default_quantity", "description": "The default quantity for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deferred_revenue_accounting_code_id": {"name": "deferred_revenue_accounting_code_id", "description": "The id of the accounting code for deferred revenue.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "A description of the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "The id of the discount class for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_level": {"name": "discount_level", "description": "The level at which the discount is applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_date_condition": {"name": "end_date_condition", "description": "The condition that determines when the charge ends.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclude_item_billing_from_revenue_accounting": {"name": "exclude_item_billing_from_revenue_accounting", "description": "Indicates whether the charge should be excluded from revenue accounting.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exclude_item_booking_from_revenue_accounting": {"name": "exclude_item_booking_from_revenue_accounting", "description": "Indicates whether the charge should be excluded from booking revenue accounting.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "included_units": {"name": "included_units", "description": "The number of units included in the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_stacked_discount": {"name": "is_stacked_discount", "description": "Indicates whether the discount is a stacked discount. Values are true or false.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "list_price_base": {"name": "list_price_base", "description": "The price used to calculate the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "max_quantity": {"name": "max_quantity", "description": "The maximum number of units allowed for this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "min_quantity": {"name": "min_quantity", "description": "The minimum number of units required for this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The unique identifier of the product associated with the product rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The unique identifier of the product rate plan associated with the product rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specific_billing_period": {"name": "specific_billing_period", "description": "The billing period for this product rate plan charge. Values are DAY, WEEK, MONTH, and YEAR.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_mode": {"name": "tax_mode", "description": "Indicates how the charge is taxed. Values are TAXABLE, NON-TAXABLE, and TAXED_INCLUSIVE.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Indicates whether the charge is taxable. Values are true or false.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trigger_event": {"name": "trigger_event", "description": "The event that triggers the charge. Values are SERVICE_ACTIVATION, CONTRACT_EFFECTIVE, CUSTOMER_ACCEPTANCE, or SERVICE_USAGE.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uom": {"name": "uom", "description": "The unit of measure for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "up_to_periods": {"name": "up_to_periods", "description": "The maximum number of billing periods allowed for this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "up_to_periods_type": {"name": "up_to_periods_type", "description": "The billing period type for the up to periods setting. Values are DAY, WEEK, MONTH, and YEAR.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated the product rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the product rate plan charge was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "use_discount_specific_accounting_code": {"name": "use_discount_specific_accounting_code", "description": "Indicates whether the discount uses a specific accounting code. Values are true or false.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "weekly_bill_cycle_day": {"name": "weekly_bill_cycle_day", "description": "The day of the week when the bill cycle starts for a weekly billing period. Values are MON, TUE, WED, THU, FRI, SAT, and SUN.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_product_rate_plan_charge_data\"", "created_at": 1723501432.6307552}, "source.zuora_source.zuora.rate_plan": {"database": "postgres", "schema": "zz_zuora", "name": "rate_plan", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.rate_plan", "fqn": ["zuora_source", "zuora", "rate_plan"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_rate_plan_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A rate plan is part of a subscription or an amendment to a subscription, and it comes from a product rate plan.  Rate plans represent a price or a collection of prices for a service you sell. An individual rate plan contains all charges specific to a particular subscription.", "columns": {"id": {"name": "id", "description": "The unique identifier of the rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier of the account that the rate plan belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "The unique identifier of the amendment that the rate plan belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The unique identifier of the contact that the rate plan is billed to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier of the user who created the rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the rate plan was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The unique identifier of the default payment method for the rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_rate_plan_id": {"name": "original_rate_plan_id", "description": "The unique identifier of the original rate plan that was used to create the rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The unique identifier of the product that the rate plan belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The unique identifier of the product rate plan that the rate plan belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The unique identifier of the contact that the rate plan is sold to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The unique identifier of the subscription that the rate plan belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated the rate plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the rate plan was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_rate_plan_data\"", "created_at": 1723501432.630867}, "source.zuora_source.zuora.rate_plan_charge": {"database": "postgres", "schema": "zz_zuora", "name": "rate_plan_charge", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.rate_plan_charge", "fqn": ["zuora_source", "zuora", "rate_plan_charge"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_rate_plan_charge_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A rate plan charge is part of a subscription or an amendment to a subscription, and it comes from a product rate plan charge. Rate plan charges represent the actual charges for the rate plans or services that you sell.", "columns": {"id": {"name": "id", "description": "The unique identifier for the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier of the account associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The unique identifier for the accounting code that represents the account receivable for this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amended_by_order_on": {"name": "amended_by_order_on", "description": "The date when the amendment order was created or processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "The unique identifier for the amendment associated with this rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "apply_discount_to": {"name": "apply_discount_to", "description": "The type of discount that is applied to the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_cycle_day": {"name": "bill_cycle_day", "description": "The day of the month when the billing cycle for the charge ends.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_cycle_type": {"name": "bill_cycle_type", "description": "The type of billing cycle that the charge uses.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The unique identifier of the contact associated with the account's billing information.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_snapshot_id": {"name": "bill_to_contact_snapshot_id", "description": "The unique identifier for the snapshot of the bill-to contact information that was used when the charge was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_period": {"name": "billing_period", "description": "The billing period for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_timing": {"name": "billing_timing", "description": "The timing of the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "booking_exchange_rate": {"name": "booking_exchange_rate", "description": "The exchange rate for the charge when it was booked.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "booking_exchange_rate_date": {"name": "booking_exchange_rate_date", "description": "The date on which the exchange rate for the charge when it was booked was determined.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_model": {"name": "charge_model", "description": "The model used to calculate the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_number": {"name": "charge_number", "description": "The number of the charge within the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_type": {"name": "charge_type", "description": "The type of charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charged_through_date": {"name": "charged_through_date", "description": "The date through which the charge has been charged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier of the user who created the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the rate plan charge was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_option": {"name": "credit_option", "description": "The option used to calculate the credit for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The unique identifier of the default payment method for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "deferred_revenue_accounting_code_id": {"name": "deferred_revenue_accounting_code_id", "description": "The unique identifier for the accounting code that represents the deferred revenue for this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "The description of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_level": {"name": "discount_level", "description": "The level of the discount applied to the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dmrc": {"name": "dmrc", "description": "The amount of the charge in the charge currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dmrchome_currency": {"name": "dmrchome_currency", "description": "The amount of the charge in the home currency of the company.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dtcv": {"name": "dtcv", "description": "The deferred tax calculated value of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dtcvhome_currency": {"name": "dtcvhome_currency", "description": "The deferred tax calculated value of the rate plan charge in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_end_date": {"name": "effective_end_date", "description": "The date on which the rate plan charge is no longer in effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_start_date": {"name": "effective_start_date", "description": "The date on which the rate plan charge goes into effect.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "end_date_condition": {"name": "end_date_condition", "description": "The condition that triggers the end date of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used for the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date on which the exchange rate was determined.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Home currency the customer is billed in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_prepaid": {"name": "is_prepaid", "description": "A boolean value indicating whether the rate plan charge is prepaid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_processed": {"name": "is_processed", "description": "A boolean value indicating whether the rate plan charge has been processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mrr": {"name": "mrr", "description": "The monthly recurring revenue of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "mrrhome_currency": {"name": "mrrhome_currency", "description": "The monthly recurring revenue of the rate plan charge in the home currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_periods": {"name": "number_of_periods", "description": "The number of billing periods for the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_id": {"name": "original_id", "description": "The original id of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_order_date": {"name": "original_order_date", "description": "The date on which the original order was placed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "price_change_option": {"name": "price_change_option", "description": "The option selected for handling price changes for the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "price_increase_percentage": {"name": "price_increase_percentage", "description": "The percentage increase applied to the rate plan charge price.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "processed_through_date": {"name": "processed_through_date", "description": "The date through which the rate plan charge has been processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The unique identifier of the product associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "The unique identifier of the product rate plan charge associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The unique identifier of the product rate plan associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate_plan_id": {"name": "rate_plan_id", "description": "The unique identifier of the rate plan associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recognized_revenue_accounting_code_id": {"name": "recognized_revenue_accounting_code_id", "description": "The unique identifier of the accounting code associated with recognized revenue for the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "segment": {"name": "segment", "description": "The segment associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The unique identifier of the contact associated with the sold-to account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specific_billing_period": {"name": "specific_billing_period", "description": "The specific billing period associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specific_end_date": {"name": "specific_end_date", "description": "The specific end date associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "specific_list_price_base": {"name": "specific_list_price_base", "description": "The list price base for the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tcv": {"name": "tcv", "description": "The total contract value for the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tcvhome_currency": {"name": "tcvhome_currency", "description": "The home currency value of the Total Contract Value.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency in which the transaction occurs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trigger_date": {"name": "trigger_date", "description": "The date on which the trigger event occurs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "trigger_event": {"name": "trigger_event", "description": "The type of trigger event that is associated with the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uom": {"name": "uom", "description": "The unit of measure for the quantity of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "up_to_periods": {"name": "up_to_periods", "description": "The maximum number of billing periods for which the charge is applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "up_to_periods_type": {"name": "up_to_periods_type", "description": "The time unit that is used to calculate the maximum number of billing periods for which the charge is applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the rate plan charge was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "version": {"name": "version", "description": "The version number of the rate plan charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "weekly_bill_cycle_day": {"name": "weekly_bill_cycle_day", "description": "The day of the week on which the bill cycle starts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_rate_plan_charge_data\"", "created_at": 1723501432.631062}, "source.zuora_source.zuora.refund": {"database": "postgres", "schema": "zz_zuora", "name": "refund", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.refund", "fqn": ["zuora_source", "zuora", "refund"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_refund_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A refund returns money to a customer - as opposed to a credit, which creates a customer credit balance that may be applied to reduce the amount owed to you. Electronic refunds are processed by Zuora via a payment gateway.\nExternal refunds indicate that the refund was processed outside of Zuora, say by a check, and the transaction must be recorded.", "columns": {"id": {"name": "id", "description": "The unique identifier of the refund object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancelled_on": {"name": "cancelled_on", "description": "The date and time when the refund was cancelled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "comment": {"name": "comment", "description": "A comment about the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the refund was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "method_type": {"name": "method_type", "description": "The type of the refund method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "The id of the payment method used for the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_date": {"name": "refund_date", "description": "The date when the refund was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_number": {"name": "refund_number", "description": "The refund number associated with the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_transaction_time": {"name": "refund_transaction_time", "description": "The date and time when the refund transaction was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "settled_on": {"name": "settled_on", "description": "The date and time when the refund was settled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The type of the refund source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "submitted_on": {"name": "submitted_on", "description": "The date and time when the refund was submitted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "A flag that indicates whether the refund was transferred to the accounting system.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the refund was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_refund_data\"", "created_at": 1723501432.631176}, "source.zuora_source.zuora.refund_invoice_payment": {"database": "postgres", "schema": "zz_zuora", "name": "refund_invoice_payment", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.refund_invoice_payment", "fqn": ["zuora_source", "zuora", "refund_invoice_payment"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_refund_invoice_payment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "refund invoice payment details", "columns": {"id": {"name": "id", "description": "The id of the refund invoice payment in Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the refund invoice payment in Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the refund invoice payment was created in Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "The amount of the refund invoice payment in the currency of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the refund invoice payment in Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the refund invoice payment was last updated in Zuora.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_refund_invoice_payment_data\"", "created_at": 1723501432.6312718}, "source.zuora_source.zuora.subscription": {"database": "postgres", "schema": "zz_zuora", "name": "subscription", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.subscription", "fqn": ["zuora_source", "zuora", "subscription"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_subscription_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A subscription is a product or service that has recurring charges, such as a monthly flat fee or charges based on usage. Subscriptions can also include one-time charges, such as activation fees. Every subscription must be associated with an account. At least one active account must exist before any subscriptions can be created.", "columns": {"id": {"name": "id", "description": "The unique identifier for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier for the account associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auto_renew": {"name": "auto_renew", "description": "Indicates whether the subscription is set to automatically renew at the end of the term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The unique identifier for the contact that will be billed for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancel_reason": {"name": "cancel_reason", "description": "The reason for cancelling the subscription, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancelled_date": {"name": "cancelled_date", "description": "The date on which the subscription was cancelled, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_acceptance_date": {"name": "contract_acceptance_date", "description": "The date on which the contract was accepted by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "contract_effective_date": {"name": "contract_effective_date", "description": "The date on which the contract became effective.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier for the user who created the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date on which the subscription was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term": {"name": "current_term", "description": "The length of the current subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_term_period_type": {"name": "current_term_period_type", "description": "The unit of time for the current subscription term (e.g. \"Month\", \"Year\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The unique identifier for the default payment method associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "externally_managed_by": {"name": "externally_managed_by", "description": "Indicates whether the subscription is externally managed by another system or platform.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "initial_term": {"name": "initial_term", "description": "The length of the initial subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "initial_term_period_type": {"name": "initial_term_period_type", "description": "The unit of time for the initial subscription term (e.g. \"Month\", \"Year\").", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_owner_id": {"name": "invoice_owner_id", "description": "The unique identifier for the user who will receive invoice notifications for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_invoice_separate": {"name": "is_invoice_separate", "description": "Indicates whether the subscription is invoiced separately from other subscriptions on the same account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Indicates whether the subscription is the latest version of the subscription on the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_booking_date": {"name": "last_booking_date", "description": "The date on which the most recent booking was created for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Additional notes or comments about the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_created_date": {"name": "original_created_date", "description": "The date on which the original subscription was created, if the current subscription is a renewal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "original_id": {"name": "original_id", "description": "The unique identifier for the original subscription, if the current subscription is a renewal.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The unique identifier for the parent account associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_term": {"name": "payment_term", "description": "The payment term associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "previous_subscription_id": {"name": "previous_subscription_id", "description": "The unique identifier for the previous subscription associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_term": {"name": "renewal_term", "description": "The length of the renewal subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "renewal_term_period_type": {"name": "renewal_term_period_type", "description": "The type of the renewal term for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "revision": {"name": "revision", "description": "The revision number for the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "service_activation_date": {"name": "service_activation_date", "description": "The date the subscription was activated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The unique identifier for the sold-to contact associated with the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_end_date": {"name": "subscription_end_date", "description": "The end date of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_start_date": {"name": "subscription_start_date", "description": "The start date of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_end_date": {"name": "term_end_date", "description": "The end date of the subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_start_date": {"name": "term_start_date", "description": "The start date of the subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_type": {"name": "term_type", "description": "The type of subscription term.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date the subscription was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "version": {"name": "version", "description": "The version number of the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_subscription_data\"", "created_at": 1723501432.6314108}, "source.zuora_source.zuora.taxation_item": {"database": "postgres", "schema": "zz_zuora", "name": "taxation_item", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.taxation_item", "fqn": ["zuora_source", "zuora", "taxation_item"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_taxation_item_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Used to add a tax amount to an invoice item. Changes that you make with this object affect the product charges in your product catalog, but not the charges in existing subscriptions. To change taxes in existing subscriptions, you need to amend the subscription - remove the existing charge and replace it with the modified charge.", "columns": {"id": {"name": "id", "description": "The unique identifier of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean identifiying whether the record was deleted in the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the account associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The id of the accounting code for the account receivable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "The id of the amendment associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact associated with the billing of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date when the taxation item was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_amount": {"name": "credit_amount", "description": "The credit amount of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date of the exchange rate of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exempt_amount": {"name": "exempt_amount", "description": "The exempt amount of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exempt_amount_home_currency": {"name": "exempt_amount_home_currency", "description": "The exempt amount in home currency of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "The home currency of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_item_id": {"name": "invoice_item_id", "description": "The id of the invoice item associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "The id of the journal entry associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_amount": {"name": "payment_amount", "description": "The payment amount of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The id of the product associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "The id of the product rate plan charge associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The id of the product rate plan associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate_plan_charge_id": {"name": "rate_plan_charge_id", "description": "The id of the rate plan charge associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rate_plan_id": {"name": "rate_plan_id", "description": "The id of the rate plan associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_tax_payable_accounting_code_id": {"name": "sales_tax_payable_accounting_code_id", "description": "The id of the accounting code for the sales tax payable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact associated with the sale of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The tax amount of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount_home_currency": {"name": "tax_amount_home_currency", "description": "The tax amount in home currency of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_date": {"name": "tax_date", "description": "The date of the tax of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_description": {"name": "tax_description", "description": "The description of the tax of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_mode": {"name": "tax_mode", "description": "The tax mode of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "The tax rate of the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_rate_type": {"name": "tax_rate_type", "description": "The type of tax rate that applies to the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency in which the transaction was processed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the taxation item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time the taxation item was last updated.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zz_zuora\".\"zuora_taxation_item_data\"", "created_at": 1723501432.631545}}, "macros": {"macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.6813178, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.681591, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.681716, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.681834, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.681941, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.6834948, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.683858, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.684522, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.684654, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.693728, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.694201, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.694505, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.6948109, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.6952598, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.695755, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.695925, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.6962528, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.6966138, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.697387, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.69758, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.697881, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.698173, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.698637, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.6988711, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.699436, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.699636, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.6997492, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.699924, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.700062, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7004318, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7011359, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.701282, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.701563, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.701694, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7018602, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.702794, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }}\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\t{{ ';' if not loop.last else \"\" }}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7032928, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.703572, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}{{ ';' if not loop.last else \"\" }}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.703989, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.704125, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.704781, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.70495, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.705081, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7056131, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.705782, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7059891, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7066722, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7098691, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.710028, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.710504, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7108889, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.711924, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.71211, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7122471, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.712385, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.712522, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7128801, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.713163, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.713446, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7138739, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.714132, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.71783, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7180061, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.718226, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.718909, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.719071, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.719234, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7205539, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.721878, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.726114, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7263842, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7265458, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7266319, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.726769, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.726879, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.727072, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.727901, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7280772, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.728318, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.728718, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.734635, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7372391, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.738365, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.738652, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.73885, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.739415, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7398, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7402, "supported_languages": null}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %} %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, tested_expected_column_names) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7418728, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.746719, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7470899, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.747326, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.748689, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.748914, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.749535, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7522671, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.754993, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.756618, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7571342, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.757754, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.757982, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.758652, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7650402, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.766613, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.766871, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.767812, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7680728, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.768686, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7692869, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7701461, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.77037, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7705479, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.770828, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7710059, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7712839, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.771465, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.771714, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.771889, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.772036, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.772297, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.777097, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.782699, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.783849, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.78496, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7857568, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.785988, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.786101, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.786381, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7865112, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.79008, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7931468, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.798183, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7990432, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.7992718, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.799722, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.799907, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.800033, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8001668, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.80028, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.800433, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.800543, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.800986, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.801161, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.802351, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8027651, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8031209, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8036249, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.803871, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.804137, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.804517, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.804759, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.805446, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.805793, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.805963, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.806157, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.806347, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.807165, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8083808, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.808754, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.808993, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.809252, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.809459, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8097658, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8099651, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8106492, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8110569, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.811254, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.811517, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.811848, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.812107, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8125598, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8129761, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.813287, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8134851, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.813726, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.813828, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.814092, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.814296, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.814591, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.814721, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.81503, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8151722, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.815765, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.815941, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.816213, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.816354, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.816618, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8167522, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.81773, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.817846, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.81834, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.818499, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.81863, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.819883, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.820251, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.820568, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.820809, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.820909, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.821166, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.821305, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.821561, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.821701, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8225222, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.822724, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.823222, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8238752, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.824353, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8245409, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8247218, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.824971, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.825077, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.825925, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.826078, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8272362, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.827425, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.827631, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.82789, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.828029, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.828421, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.828574, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.828743, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.829133, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8294752, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8297548, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.829993, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.830534, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.832014, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.832572, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8328571, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.834676, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8358579, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.836555, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8367739, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.836993, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8370712, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.837804, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.838367, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.838584, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8389308, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.839251, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.839518, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.839865, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.840035, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8402932, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.840445, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.841276, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.841681, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.841862, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.842347, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.842596, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8427022, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8430321, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.843434, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.843648, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8437219, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.843969, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.844102, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.84438, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.844508, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.845118, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.845498, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.845817, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.845974, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8462431, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.846376, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.846619, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8467698, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.847002, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.847151, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.847411, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8475342, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.847767, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.871008, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.871349, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8714921, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.871734, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.871837, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.87276, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.872907, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.873076, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.873311, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8735201, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.873686, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.873846, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.874016, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8741739, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.874316, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.874471, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.874677, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8748338, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8749719, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.875242, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8753731, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.875608, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.87571, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.876039, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.876294, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.876439, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8769548, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8771122, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.877326, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.87759, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.87772, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.878078, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.878313, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.878582, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.87871, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.879072, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8793159, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.879473, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.879647, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.88012, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.880264, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.880405, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.880508, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.880668, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.880743, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8808992, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8810592, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.881971, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.882112, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.882275, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.882667, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8828459, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.882976, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8831291, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.883251, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.885212, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.885442, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.885654, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8859332, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.886163, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.886467, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.88664, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.886793, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.887031, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.887554, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.887773, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.887908, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.88831, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.888695, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8889658, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.889187, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.890931, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8910441, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.891204, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.891315, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.891718, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.891901, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.892, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.892214, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.892395, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.892611, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.892791, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.893012, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.89364, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.893823, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.8940532, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.89427, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.89533, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.895842, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.896023, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.896152, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.896801, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.89696, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.897151, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.897307, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.897635, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.898098, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.900955, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.901206, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.901397, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.90164, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.901818, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.901969, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.902143, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.902373, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9025679, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9028559, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.903033, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9031832, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.90334, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.903483, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9036748, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.903834, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.906037, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.906189, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.906583, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.90683, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9070349, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.907213, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.908322, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.908652, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.908839, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.909169, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.90939, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.909951, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.910197, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.910922, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   for column in columns_in_relation -%}\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.914073, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9146008, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.915732, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.91738, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9175282, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.91829, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9186718, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.919214, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9196649, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.919735, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.920234, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.920469, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.920767, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9210439, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9213839, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.921831, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.922294, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9229052, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.923255, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.92357, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.924635, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9256709, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.926526, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.92754, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9281878, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.928514, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.929216, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.929996, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.930429, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.930856, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.931474, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.931953, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.932491, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.932856, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.933505, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.934241, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.934849, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.935513, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.936058, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.936385, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9367669, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9371, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.937727, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9384902, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.939372, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.940279, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns, exclude_columns, precision)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.942181, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None, exclude_columns=None, precision = None) %}\n\n{%- if compare_columns and exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\"Both a compare and an ignore list were provided to the `equality` macro. Only one is allowed\") }}\n{%- endif -%}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{# Ensure there are no extra columns in the compare_model vs model #}\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- do dbt_utils._is_ephemeral(compare_model, 'test_equality') -%}\n\n    {%- set model_columns = adapter.get_columns_in_relation(model) -%}\n    {%- set compare_model_columns = adapter.get_columns_in_relation(compare_model) -%}\n\n\n    {%- if exclude_columns -%}\n        {#-- Lower case ignore columns for easier comparison --#}\n        {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n        {# Filter out the excluded columns #}\n        {%- set include_columns = [] %}\n        {%- set include_model_columns = [] %}\n        {%- for column in model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n        {%- for column in compare_model_columns -%}\n            {%- if column.name | lower not in exclude_columns -%}\n                {% do include_model_columns.append(column) %}\n            {%- endif %}\n        {%- endfor %}\n\n        {%- set compare_columns_set = set(include_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(include_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- else -%}\n        {%- set compare_columns_set = set(model_columns | map(attribute='quoted') | map(\"lower\")) %}\n        {%- set compare_model_columns_set = set(compare_model_columns | map(attribute='quoted') | map(\"lower\")) %}\n    {%- endif -%}\n\n    {% if compare_columns_set != compare_model_columns_set %}\n        {{ exceptions.raise_compiler_error(compare_model ~\" has less columns than \" ~ model ~ \", please ensure they have the same columns or use the `compare_columns` or `exclude_columns` arguments to subset them.\") }}\n    {% endif %}\n\n\n{% endif %}\n\n{%- if not precision -%}\n    {%- if not compare_columns -%}\n        {# \n            You cannot get the columns in an ephemeral model (due to not existing in the information schema),\n            so if the user does not provide an explicit list of columns we must error in the case it is ephemeral\n        #}\n        {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n        {%- set compare_columns = adapter.get_columns_in_relation(model)-%}\n\n        {%- if exclude_columns -%}\n            {#-- Lower case ignore columns for easier comparison --#}\n            {%- set exclude_columns = exclude_columns | map(\"lower\") | list %}\n\n            {# Filter out the excluded columns #}\n            {%- set include_columns = [] %}\n            {%- for column in compare_columns -%}\n                {%- if column.name | lower not in exclude_columns -%}\n                    {% do include_columns.append(column) %}\n                {%- endif %}\n            {%- endfor %}\n\n            {%- set compare_columns = include_columns | map(attribute='quoted') %}\n        {%- else -%} {# Compare columns provided #}\n            {%- set compare_columns = compare_columns | map(attribute='quoted') %}\n        {%- endif -%}\n    {%- endif -%}\n\n    {% set compare_cols_csv = compare_columns | join(', ') %}\n\n{% else %} {# Precision required #}\n    {#-\n        If rounding is required, we need to get the types, so it cannot be ephemeral even if they provide column names\n    -#}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set columns = adapter.get_columns_in_relation(model) -%}\n\n    {% set columns_list = [] %}\n    {%- for col in columns -%}\n        {%- if (\n                (col.name|lower in compare_columns|map('lower') or not compare_columns) and\n                (col.name|lower not in exclude_columns|map('lower') or not exclude_columns)\n                ) -%}\n            {# Databricks double type is not picked up by any number type checks in dbt #}\n            {%- if col.is_float() or col.is_numeric() or col.data_type == 'double' -%}\n                {# Cast is required due to postgres not having round for a double precision number #}\n                {%- do columns_list.append('round(cast(' ~ col.quoted ~ ' as ' ~ dbt.type_numeric() ~ '),' ~ precision ~ ') as ' ~ col.quoted) -%}\n            {%- else -%} {# Non-numeric type #}\n                {%- do columns_list.append(col.quoted) -%}\n            {%- endif -%}\n        {% endif %}\n    {%- endfor -%}\n\n    {% set compare_cols_csv = columns_list | join(', ') %}\n\n{% endif %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_numeric", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9459121, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.946432, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.946718, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.950331, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.951756, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9520159, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9521742, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.95259, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.952852, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.953044, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.953286, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.953449, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.954022, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.954805, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.955492, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.956049, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.956267, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.956671, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.95704, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.957623, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9579232, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9582431, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9589078, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.959709, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.960532, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.960922, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.961104, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.961588, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.962247, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9630458, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.963434, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.963706, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.96501, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9665852, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.967911, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.969397, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.969682, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.969811, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9729989, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.97629, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9765918, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.976827, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.977706, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.977921, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }} as tt\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.978081, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.978264, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.978422, "supported_languages": null}, "macro.dbt_utils.databricks__deduplicate": {"name": "databricks__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.databricks__deduplicate", "macro_sql": "\n{%- macro databricks__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.978583, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9787462, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.979116, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9793391, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.979701, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9802089, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.980536, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9808488, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.984139, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9844859, "supported_languages": null}, "macro.dbt_utils.redshift__get_tables_by_pattern_sql": {"name": "redshift__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.redshift__get_tables_by_pattern_sql", "macro_sql": "{% macro redshift__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% set sql %}\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from \"{{ database }}\".\"information_schema\".\"tables\"\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n        union all\n        select distinct\n            schemaname as {{ adapter.quote('table_schema') }},\n            tablename as {{ adapter.quote('table_name') }},\n            'external' as {{ adapter.quote('table_type') }}\n        from svv_external_tables\n        where redshift_database_name = '{{ database }}'\n        and schemaname ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n    {% endset %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.985193, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.985868, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.986343, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.987447, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.98886, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9899242, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.990762, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9912179, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9919062, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.992666, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.993102, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9932811, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.993649, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9942, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9946408, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9952278, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.995754, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.99589, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9960241, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.996158, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.996654, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9974132, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.998542, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.998809, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501430.9993348, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.000088, "supported_languages": null}, "macro.spark_utils.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0052521, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"name": "get_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.005912, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"name": "get_statistic_columns", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0068219, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"name": "spark_optimize_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.007516, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"name": "spark_vacuum_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0081978, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"name": "spark_analyze_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.009103, "supported_languages": null}, "macro.spark_utils.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "unique_id": "macro.spark_utils.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.009278, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"name": "spark__type_numeric", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "unique_id": "macro.spark_utils.spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.009384, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "unique_id": "macro.spark_utils.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.01215, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "unique_id": "macro.spark_utils.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.019667, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.019808, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"name": "spark__current_timestamp_in_utc", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.019885, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "unique_id": "macro.spark_utils.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.020433, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"name": "spark__get_relations_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0219672, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"name": "spark__get_relations_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.022285, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"name": "spark__get_tables_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.022547, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"name": "spark__get_tables_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.022805, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.02315, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"name": "default__assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.023361, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "unique_id": "macro.spark_utils.spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.023592, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.023969, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.024904, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.025064, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.025221, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.025378, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.025517, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0256698, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.026496, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.027101, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.028447, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0286899, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.028924, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.029154, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.029383, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.029632, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.02988, "supported_languages": null}, "macro.fivetran_utils.sqlserver__json_parse": {"name": "sqlserver__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.sqlserver__json_parse", "macro_sql": "{% macro sqlserver__json_parse(string, string_path) %}\n\n  json_value({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.030105, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.030417, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.030516, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.030611, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.030709, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.031054, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0317829, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.032848, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.033407, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.034154, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0346189, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.03476, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0348852, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.035011, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0351439, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0381062, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.038265, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0384178, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0385668, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.040267, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.041196, "supported_languages": null}, "macro.fivetran_utils.default__try_cast": {"name": "default__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__try_cast", "macro_sql": "{% macro default__try_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.041333, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.041597, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.041866, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.041992, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.042112, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0422301, "supported_languages": null}, "macro.fivetran_utils.sqlserver__try_cast": {"name": "sqlserver__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.sqlserver__try_cast", "macro_sql": "{% macro sqlserver__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.042358, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.042835, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.043371, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.043851, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.044044, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.04426, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.044511, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.045603, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0494232, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.049772, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.050123, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0516422, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.05217, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.052724, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.052872, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.053041, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.053206, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.053349, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0534909, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0542998, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n\n  {% if dbt_version.split('.') | map('int') | list >= [1, 5, 0]  %}\n    {{ return(load_result('collect_freshness')) }}\n  {% else %}\n    {{ return(load_result('collect_freshness').table) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.055478, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.056177, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.056341, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0565178, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0566778, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.056832, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0569978, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.05724, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.057338, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0574348, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0580292, "supported_languages": null}, "macro.fivetran_utils.fivetran_date_spine": {"name": "fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.fivetran_date_spine", "macro_sql": "{% macro fivetran_date_spine(datepart, start_date, end_date) -%}\n\n{{ return(adapter.dispatch('fivetran_date_spine', 'fivetran_utils') (datepart, start_date, end_date)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__fivetran_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.059382, "supported_languages": null}, "macro.fivetran_utils.default__fivetran_date_spine": {"name": "default__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.default__fivetran_date_spine", "macro_sql": "{% macro default__fivetran_date_spine(datepart, start_date, end_date) %}\n\n    {{ dbt_utils.date_spine(datepart, start_date, end_date) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.05955, "supported_languages": null}, "macro.fivetran_utils.sqlserver__fivetran_date_spine": {"name": "sqlserver__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.sqlserver__fivetran_date_spine", "macro_sql": "{% macro sqlserver__fivetran_date_spine(datepart, start_date, end_date) -%}\n\n    {% set date_spine_query %}\n        with\n\n        l0 as (\n\n            select c\n            from (select 1 union all select 1) as d(c)\n\n        ),\n        l1 as (\n\n            select\n                1 as c\n            from l0 as a\n            cross join l0 as b\n\n        ),\n\n        l2 as (\n\n            select 1 as c\n            from l1 as a\n            cross join l1 as b\n        ),\n\n        l3 as (\n\n            select 1 as c\n            from l2 as a\n            cross join l2 as b\n        ),\n\n        l4 as (\n\n            select 1 as c\n            from l3 as a\n            cross join l3 as b\n        ),\n\n        l5 as (\n\n            select 1 as c\n            from l4 as a\n            cross join l4 as b\n        ),\n\n        nums as (\n\n            select row_number() over (order by (select null)) as rownum\n            from l5\n        ),\n\n        rawdata as (\n\n            select top ({{dbt.datediff(start_date, end_date, datepart)}}) rownum -1 as n\n            from nums\n            order by rownum\n        ),\n\n        all_periods as (\n\n            select (\n                {{\n                    dbt.dateadd(\n                        datepart,\n                        'n',\n                        start_date\n                    )\n                }}\n            ) as date_{{datepart}}\n            from rawdata\n        ),\n\n        filtered as (\n\n            select *\n            from all_periods\n            where date_{{datepart}} <= {{ end_date }}\n\n        )\n\n        select * from filtered\n        order by 1\n\n    {% endset %}\n\n    {% set results = run_query(date_spine_query) %}\n\n    {% if execute %}\n\n        {% set results_list = results.columns[0].values() %}\n    \n    {% else %}\n\n        {% set results_list = [] %}\n\n    {% endif %}\n\n    {%- for date_field in results_list %}\n        select cast('{{ date_field }}' as date) as date_{{datepart}} {{ 'union all ' if not loop.last else '' }}\n    {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.dateadd", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.060332, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.06385, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.068373, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0697012, "supported_languages": null}, "macro.fivetran_utils.extract_url_parameter": {"name": "extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.extract_url_parameter", "macro_sql": "{% macro extract_url_parameter(field, url_parameter) -%}\n\n{{ adapter.dispatch('extract_url_parameter', 'fivetran_utils') (field, url_parameter) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__extract_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.07003, "supported_languages": null}, "macro.fivetran_utils.default__extract_url_parameter": {"name": "default__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.default__extract_url_parameter", "macro_sql": "{% macro default__extract_url_parameter(field, url_parameter) -%}\n\n{{ dbt_utils.get_url_parameter(field, url_parameter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.070173, "supported_languages": null}, "macro.fivetran_utils.spark__extract_url_parameter": {"name": "spark__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.spark__extract_url_parameter", "macro_sql": "{% macro spark__extract_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"=([^&]+)'\" -%}\nnullif(regexp_extract({{ field }}, {{ formatted_url_parameter }}, 1), '')\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0703611, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.postgres__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.070684, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.070792, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0708969, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.070994, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0710888, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.071339, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.071435, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.071531, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.071908, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.072277, "supported_languages": null}, "macro.zuora_source.get_contact_columns": {"name": "get_contact_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_contact_columns.sql", "original_file_path": "macros/get_contact_columns.sql", "unique_id": "macro.zuora_source.get_contact_columns", "macro_sql": "{% macro get_contact_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_name\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"work_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"work_phone\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0742981, "supported_languages": null}, "macro.zuora_source.get_account_columns": {"name": "get_account_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_account_columns.sql", "original_file_path": "macros/get_account_columns.sql", "unique_id": "macro.zuora_source.get_account_columns", "macro_sql": "{% macro get_account_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"auto_pay\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"batch\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_cycle_day\", \"datatype\": dbt.type_int()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"crm_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_invoice_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"mrr\", \"datatype\": dbt.type_float()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_term\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"tax_exempt_effective_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"tax_exempt_expiration_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"tax_exempt_status\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"total_debit_memo_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_invoice_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"vatid\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('zuora_account_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0776021, "supported_languages": null}, "macro.zuora_source.get_refund_invoice_payment_columns": {"name": "get_refund_invoice_payment_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_refund_invoice_payment_columns.sql", "original_file_path": "macros/get_refund_invoice_payment_columns.sql", "unique_id": "macro.zuora_source.get_refund_invoice_payment_columns", "macro_sql": "{% macro get_refund_invoice_payment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refund_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.078523, "supported_languages": null}, "macro.zuora_source.get_amendment_columns": {"name": "get_amendment_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_amendment_columns.sql", "original_file_path": "macros/get_amendment_columns.sql", "unique_id": "macro.zuora_source.get_amendment_columns", "macro_sql": "{% macro get_amendment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"auto_renew\", \"datatype\": \"boolean\"},\n    {\"name\": \"booking_date\", \"datatype\": \"date\"},\n    {\"name\": \"code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"contract_effective_date\", \"datatype\": \"date\"},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"current_term\", \"datatype\": dbt.type_int()},\n    {\"name\": \"current_term_period_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_acceptance_date\", \"datatype\": \"date\"},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"effective_date\", \"datatype\": \"date\"}, \n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"new_rate_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"removed_rate_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"renewal_setting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"renewal_term\", \"datatype\": dbt.type_int()},\n    {\"name\": \"renewal_term_period_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"resume_date\", \"datatype\": \"date\"},\n    {\"name\": \"service_activation_date\", \"datatype\": \"date\"},\n    {\"name\": \"specific_update_date\", \"datatype\": \"date\"},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"suspend_date\", \"datatype\": \"date\"},\n    {\"name\": \"term_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"term_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.081651, "supported_languages": null}, "macro.zuora_source.get_credit_balance_adjustment_columns": {"name": "get_credit_balance_adjustment_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_credit_balance_adjustment_columns.sql", "original_file_path": "macros/get_credit_balance_adjustment_columns.sql", "unique_id": "macro.zuora_source.get_credit_balance_adjustment_columns", "macro_sql": "{% macro get_credit_balance_adjustment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_receivable_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"adjustment_date\", \"datatype\": \"date\"},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"amount_home_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cancelled_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"comment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchange_rate_date\", \"datatype\": \"date\"},\n    {\"name\": \"home_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reason_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reference_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_transaction_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_transaction_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_transaction_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transferred_to_accounting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.085241, "supported_languages": null}, "macro.zuora_source.get_rate_plan_columns": {"name": "get_rate_plan_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_rate_plan_columns.sql", "original_file_path": "macros/get_rate_plan_columns.sql", "unique_id": "macro.zuora_source.get_rate_plan_columns", "macro_sql": "{% macro get_rate_plan_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amendment_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"original_rate_plan_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('zuora_rate_plan_pass_through_columns')) }} \n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.087158, "supported_languages": null}, "macro.zuora_source.get_refund_columns": {"name": "get_refund_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_refund_columns.sql", "original_file_path": "macros/get_refund_columns.sql", "unique_id": "macro.zuora_source.get_refund_columns", "macro_sql": "{% macro get_refund_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"cancelled_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"comment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"method_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"refund_date\", \"datatype\": \"date\"},\n    {\"name\": \"refund_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refund_transaction_time\", \"datatype\": dbt.type_timestamp()}, \n    {\"name\": \"settled_on\", \"datatype\": dbt.type_timestamp()}, \n    {\"name\": \"source_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"submitted_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"transferred_to_accounting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0894132, "supported_languages": null}, "macro.zuora_source.get_payment_method_columns": {"name": "get_payment_method_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_payment_method_columns.sql", "original_file_path": "macros/get_payment_method_columns.sql", "unique_id": "macro.zuora_source.get_payment_method_columns", "macro_sql": "{% macro get_payment_method_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ach_account_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"bank_transfer_account_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_card_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_failed_sale_transaction_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"last_transaction_date_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"last_transaction_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"max_consecutive_payment_failures\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"num_consecutive_failures\", \"datatype\": dbt.type_int()},\n    {\"name\": \"payment_method_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"paypal_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sub_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_number_of_error_payments\", \"datatype\": dbt.type_int()},\n    {\"name\": \"total_number_of_processed_payments\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()},\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0919092, "supported_languages": null}, "macro.zuora_source.get_invoice_payment_columns": {"name": "get_invoice_payment_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_invoice_payment_columns.sql", "original_file_path": "macros/get_invoice_payment_columns.sql", "unique_id": "macro.zuora_source.get_invoice_payment_columns", "macro_sql": "{% macro get_invoice_payment_columns() %}\n\n{% set columns = [ \n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_receivable_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_period_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amount_currency_rounding\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amount_home_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cash_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchange_rate_date\", \"datatype\": \"date\"},\n    {\"name\": \"home_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_run_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"provider_exchange_rate_date\", \"datatype\": \"date\"},\n    {\"name\": \"refund_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.094889, "supported_languages": null}, "macro.zuora_source.get_product_columns": {"name": "get_product_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_product_columns.sql", "original_file_path": "macros/get_product_columns.sql", "unique_id": "macro.zuora_source.get_product_columns", "macro_sql": "{% macro get_product_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"effective_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"effective_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sku\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.096235, "supported_languages": null}, "macro.zuora_source.get_payment_columns": {"name": "get_payment_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_payment_columns.sql", "original_file_path": "macros/get_payment_columns.sql", "unique_id": "macro.zuora_source.get_payment_columns", "macro_sql": "{% macro get_payment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"amount_home_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"applied_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"applied_credit_balance_amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cancelled_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"comment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"effective_date\", \"datatype\": \"date\"},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchange_rate_date\", \"datatype\": \"date\"}, \n    {\"name\": \"home_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refund_amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"settled_on\", \"datatype\": dbt.type_timestamp()}, \n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"submitted_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"transaction_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transferred_to_accounting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unapplied_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.0996969, "supported_languages": null}, "macro.zuora_source.get_order_columns": {"name": "get_order_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_order_columns.sql", "original_file_path": "macros/get_order_columns.sql", "unique_id": "macro.zuora_source.get_order_columns", "macro_sql": "{% macro get_order_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"error_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"error_message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_date\", \"datatype\": \"date\"},\n    {\"name\": \"order_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"response\", \"datatype\": dbt.type_string()},\n    {\"name\": \"scheduled_date\", \"datatype\": \"date\"}, \n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.1018639, "supported_languages": null}, "macro.zuora_source.get_product_rate_plan_charge_columns": {"name": "get_product_rate_plan_charge_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_product_rate_plan_charge_columns.sql", "original_file_path": "macros/get_product_rate_plan_charge_columns.sql", "unique_id": "macro.zuora_source.get_product_rate_plan_charge_columns", "macro_sql": "{% macro get_product_rate_plan_charge_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_receivable_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"apply_discount_to\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_cycle_day\", \"datatype\": dbt.type_int()},\n    {\"name\": \"bill_cycle_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_period\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"charge_model\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charge_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_quantity\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"deferred_revenue_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"end_date_condition\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exclude_item_billing_from_revenue_accounting\", \"datatype\": \"boolean\"},\n    {\"name\": \"exclude_item_booking_from_revenue_accounting\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"included_units\", \"datatype\": dbt.type_float()},\n    {\"name\": \"is_stacked_discount\", \"datatype\": \"boolean\"}, \n    {\"name\": \"list_price_base\", \"datatype\": dbt.type_string()},\n    {\"name\": \"max_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"min_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},  \n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"specific_billing_period\", \"datatype\": dbt.type_int()},  \n    {\"name\": \"tax_mode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\"},\n    {\"name\": \"trigger_event\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uom\", \"datatype\": dbt.type_string()},\n    {\"name\": \"up_to_periods\", \"datatype\": dbt.type_int()},\n    {\"name\": \"up_to_periods_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}, \n    {\"name\": \"use_discount_specific_accounting_code\", \"datatype\": \"boolean\"}, \n    {\"name\": \"weekly_bill_cycle_day\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.106389, "supported_languages": null}, "macro.zuora_source.get_invoice_item_columns": {"name": "get_invoice_item_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_invoice_item_columns.sql", "original_file_path": "macros/get_invoice_item_columns.sql", "unique_id": "macro.zuora_source.get_invoice_item_columns", "macro_sql": "{% macro get_invoice_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_receivable_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"amendment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"applied_to_invoice_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"charge_amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"charge_amount_home_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"charge_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"charge_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"deferred_revenue_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchange_rate_date\", \"datatype\": \"date\"},\n    {\"name\": \"home_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"processing_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"rate_plan_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rate_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"recognized_revenue_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rev_rec_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"service_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"service_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"sku\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_item_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"tax_mode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unit_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"uom\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.1112761, "supported_languages": null}, "macro.zuora_source.get_invoice_columns": {"name": "get_invoice_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_invoice_columns.sql", "original_file_path": "macros/get_invoice_columns.sql", "unique_id": "macro.zuora_source.get_invoice_columns", "macro_sql": "{% macro get_invoice_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"adjustment_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"amount_home_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amount_without_tax\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"amount_without_tax_home_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"auto_pay\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"comments\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_balance_adjustment_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"credit_memo_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"due_date\", \"datatype\": \"date\"},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchange_rate_date\", \"datatype\": \"date\"},\n    {\"name\": \"home_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"includes_one_time\", \"datatype\": \"boolean\"},\n    {\"name\": \"includes_recurring\", \"datatype\": \"boolean\"},\n    {\"name\": \"includes_usage\", \"datatype\": \"boolean\"},\n    {\"name\": \"invoice_date\", \"datatype\": \"date\"},\n    {\"name\": \"invoice_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_email_sent_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"payment_term\", \"datatype\": dbt.type_string()},\n    {\"name\": \"posted_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"posted_date\", \"datatype\": dbt.type_timestamp()}, \n    {\"name\": \"refund_amount\", \"datatype\": dbt.type_float()},  \n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"target_date\", \"datatype\": \"date\"},\n    {\"name\": \"tax_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"tax_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transferred_to_accounting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.1162271, "supported_languages": null}, "macro.zuora_source.get_rate_plan_charge_columns": {"name": "get_rate_plan_charge_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_rate_plan_charge_columns.sql", "original_file_path": "macros/get_rate_plan_charge_columns.sql", "unique_id": "macro.zuora_source.get_rate_plan_charge_columns", "macro_sql": "{% macro get_rate_plan_charge_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_receivable_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amended_by_order_on\", \"datatype\": \"date\"},\n    {\"name\": \"amendment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"apply_discount_to\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_cycle_day\", \"datatype\": dbt.type_int()},\n    {\"name\": \"bill_cycle_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_to_contact_snapshot_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_period\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"billing_timing\", \"datatype\": dbt.type_string()},\n    {\"name\": \"booking_exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"booking_exchange_rate_date\", \"datatype\": \"date\"}, \n    {\"name\": \"charge_model\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charge_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charge_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charged_through_date\", \"datatype\": \"date\"},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_option\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deferred_revenue_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dmrc\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"dmrchome_currency\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"dtcv\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"dtcvhome_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"effective_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"effective_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"end_date_condition\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchange_rate_date\", \"datatype\": \"date\"},\n    {\"name\": \"home_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_owner_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"is_prepaid\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_processed\", \"datatype\": \"boolean\"}, \n    {\"name\": \"mrr\", \"datatype\": dbt.type_float()},\n    {\"name\": \"mrrhome_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"number_of_periods\", \"datatype\": dbt.type_int()},\n    {\"name\": \"original_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"original_order_date\", \"datatype\": \"date\"},\n    {\"name\": \"price_change_option\", \"datatype\": dbt.type_string()},\n    {\"name\": \"price_increase_percentage\", \"datatype\": dbt.type_float()},\n    {\"name\": \"processed_through_date\", \"datatype\": \"date\"},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"rate_plan_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"recognized_revenue_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"segment\", \"datatype\": dbt.type_int()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"specific_billing_period\", \"datatype\": dbt.type_int()},\n    {\"name\": \"specific_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"specific_list_price_base\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tcv\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"tcvhome_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"trigger_date\", \"datatype\": \"date\"},\n    {\"name\": \"trigger_event\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uom\", \"datatype\": dbt.type_string()},\n    {\"name\": \"up_to_periods\", \"datatype\": dbt.type_int()},\n    {\"name\": \"up_to_periods_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}, \n    {\"name\": \"version\", \"datatype\": dbt.type_int()},\n    {\"name\": \"weekly_bill_cycle_day\", \"datatype\": dbt.type_string()}\n] %}\n\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('zuora_rate_plan_charge_pass_through_columns')) }}  \n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.124971, "supported_languages": null}, "macro.zuora_source.get_subscription_columns": {"name": "get_subscription_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_subscription_columns.sql", "original_file_path": "macros/get_subscription_columns.sql", "unique_id": "macro.zuora_source.get_subscription_columns", "macro_sql": "{% macro get_subscription_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"auto_renew\", \"datatype\": \"boolean\"},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cancel_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cancelled_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"contract_acceptance_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"contract_effective_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"current_term\", \"datatype\": dbt.type_int()},\n    {\"name\": \"current_term_period_type\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"externally_managed_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"initial_term\", \"datatype\": dbt.type_int()},\n    {\"name\": \"initial_term_period_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_owner_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_invoice_separate\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_latest_version\", \"datatype\": \"boolean\"},\n    {\"name\": \"last_booking_date\", \"datatype\": \"date\"},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"original_created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"original_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_term\", \"datatype\": dbt.type_string()},\n    {\"name\": \"previous_subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"renewal_term\", \"datatype\": dbt.type_int()},\n    {\"name\": \"renewal_term_period_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"revision\", \"datatype\": dbt.type_string()},\n    {\"name\": \"service_activation_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscription_end_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"subscription_start_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"term_end_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"term_start_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"term_type\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"version\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('zuora_subscription_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.129684, "supported_languages": null}, "macro.zuora_source.get_product_rate_plan_columns": {"name": "get_product_rate_plan_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_product_rate_plan_columns.sql", "original_file_path": "macros/get_product_rate_plan_columns.sql", "unique_id": "macro.zuora_source.get_product_rate_plan_columns", "macro_sql": "{% macro get_product_rate_plan_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"effective_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"effective_start_date\", \"datatype\": \"date\"}, \n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.1309462, "supported_languages": null}, "macro.zuora_source.get_taxation_item_columns": {"name": "get_taxation_item_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_taxation_item_columns.sql", "original_file_path": "macros/get_taxation_item_columns.sql", "unique_id": "macro.zuora_source.get_taxation_item_columns", "macro_sql": "{% macro get_taxation_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_receivable_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"amendment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchange_rate_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"exempt_amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"exempt_amount_home_currency\", \"datatype\": dbt.type_int()}, \n    {\"name\": \"home_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_run_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"rate_plan_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rate_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_tax_payable_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"tax_amount_home_currency\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"tax_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"tax_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_mode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"tax_rate_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1723501431.135347, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.zuora.billing_type": {"name": "billing_type", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.billing_type", "block_contents": "The source type of the invoice."}, "doc.zuora.created_at": {"name": "created_at", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.created_at", "block_contents": "The date the line item was created."}, "doc.zuora.currency": {"name": "currency", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.currency", "block_contents": "The currency of the line item."}, "doc.zuora.customer_city": {"name": "customer_city", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.customer_city", "block_contents": "City in which the customer associated to the invoice is located."}, "doc.zuora.customer_company": {"name": "customer_company", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.customer_company", "block_contents": "Company name of the customer associated to the invoice."}, "doc.zuora.customer_country": {"name": "customer_country", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.customer_country", "block_contents": "Country in which the customer associated to the invoice is located."}, "doc.zuora.customer_email": {"name": "customer_email", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.customer_email", "block_contents": "Email of the customer associated to the invoice."}, "doc.zuora.customer_id": {"name": "customer_id", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.customer_id", "block_contents": "Unique identifier of the customer associated with the invoice."}, "doc.zuora.customer_created_at": {"name": "customer_created_at", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.customer_created_at", "block_contents": "Date the customer was created in Zuora."}, "doc.zuora.customer_level": {"name": "customer_level", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.customer_level", "block_contents": "Will either be 'account' (company level) or 'customer' (individual level). For Recurly, the level is 'customer'."}, "doc.zuora.customer_name": {"name": "customer_name", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.customer_name", "block_contents": "Name of the customer associated with the invoice."}, "doc.zuora.discount_amount": {"name": "discount_amount", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.discount_amount", "block_contents": "Total discount amount of the invoice."}, "doc.zuora.header_id": {"name": "header_id", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.header_id", "block_contents": "The invoice_id."}, "doc.zuora.header_status": {"name": "header_status", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.header_status", "block_contents": "Status of the invoice"}, "doc.zuora.line_item_id": {"name": "line_item_id", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.line_item_id", "block_contents": "The invoice_item_id."}, "doc.zuora.line_item_index": {"name": "line_item_index", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.line_item_index", "block_contents": "Generated index which numbers the invoice items."}, "doc.zuora.payment_at": {"name": "payment_at", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.payment_at", "block_contents": "The effective date of the payment."}, "doc.zuora.fee_amount": {"name": "fee_amount", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.fee_amount", "block_contents": "There are no fees in Zuora. Therefore, this will always be null."}, "doc.zuora.payment_id": {"name": "payment_id", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.payment_id", "block_contents": "The invoice_payments payment_id."}, "doc.zuora.payment_method": {"name": "payment_method", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.payment_method", "block_contents": "Name of the payment method."}, "doc.zuora.payment_method_id": {"name": "payment_method_id", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.payment_method_id", "block_contents": "Unique identifier of the payment method."}, "doc.zuora.product_id": {"name": "product_id", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.product_id", "block_contents": "Unique identifier of the product."}, "doc.zuora.product_name": {"name": "product_name", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.product_name", "block_contents": "Name of the product."}, "doc.zuora.product_type": {"name": "product_type", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.product_type", "block_contents": "Product type attributed to the product."}, "doc.zuora.quantity": {"name": "quantity", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.quantity", "block_contents": "Number of items listed on the line item."}, "doc.zuora.record_type": {"name": "record_type", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.record_type", "block_contents": "Header or line_item. Means invoice or line item record respectively."}, "doc.zuora.refund_amount": {"name": "refund_amount", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.refund_amount", "block_contents": "Total refund amount."}, "doc.zuora.subscription_id": {"name": "subscription_id", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.subscription_id", "block_contents": "Unique identifier of the subscription."}, "doc.zuora.subscription_plan": {"name": "subscription_plan", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.subscription_plan", "block_contents": "Rate plan name of the subscription."}, "doc.zuora.subscription_period_ended_at": {"name": "subscription_period_ended_at", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.subscription_period_ended_at", "block_contents": "Subscription's current period end"}, "doc.zuora.subscription_period_started_at": {"name": "subscription_period_started_at", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.subscription_period_started_at", "block_contents": "Subscription's current period start"}, "doc.zuora.subscription_status": {"name": "subscription_status", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.subscription_status", "block_contents": "Status of the subscription."}, "doc.zuora.tax_amount": {"name": "tax_amount", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.tax_amount", "block_contents": "Amount of tax attributed to the invoice."}, "doc.zuora.total_amount": {"name": "total_amount", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.total_amount", "block_contents": "Total amount attributed to the line item."}, "doc.zuora.transaction_type": {"name": "transaction_type", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.transaction_type", "block_contents": "The type of transaction. Either charge, discount, prepayment, or tax."}, "doc.zuora.unit_amount": {"name": "unit_amount", "resource_type": "doc", "package_name": "zuora", "path": "standardized_models/docs.md", "original_file_path": "models/standardized_models/docs.md", "unique_id": "doc.zuora.unit_amount", "block_contents": "Amount attributed to each quantity item on the invoice."}, "doc.zuora_source.account_table": {"name": "account_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.account_table", "block_contents": "An account is a customer account that collects all of the critical information about the customer, such as contact information, payment terms, and payment methods."}, "doc.zuora_source.accounting_code_table": {"name": "accounting_code_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.accounting_code_table", "block_contents": "Grabs accounting values to help aggregate Zuora transaction data."}, "doc.zuora_source.amendment_table": {"name": "amendment_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.amendment_table", "block_contents": "When a customer needs to make a change to a subscription, you make that change through an amendment. Common subscription changes include 'Changing the terms and conditions of a contract; add a product or update an existing product to a subscription; renew, cancel, suspend or resume a subscription.'"}, "doc.zuora_source.contact_table": {"name": "contact_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.contact_table", "block_contents": "Customer who holds an account or who is otherwise a person to contact about an account."}, "doc.zuora_source.credit_balance_adjustment_table": {"name": "credit_balance_adjustment_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.credit_balance_adjustment_table", "block_contents": "An adjustment to change a customer's credit balance.  Applies adjustments to credit balances on billing accounts. This includes applying credit balance to invoices and transferring an invoice to a credit balance."}, "doc.zuora_source.invoice_table": {"name": "invoice_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.invoice_table", "block_contents": "An invoice represents a bill to a customer, providing information about customers' accounts for invoices, including dates, status, and amounts. It is created at the account level, and can include all of the charges for multiple subscriptions for an account."}, "doc.zuora_source.invoice_item_table": {"name": "invoice_item_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.invoice_item_table", "block_contents": "An invoice item is an individual line item in an invoice. Invoice items are charges, such as a monthly recurring charge."}, "doc.zuora_source.journal_entry_table": {"name": "journal_entry_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.journal_entry_table", "block_contents": "A journal entry in Zuora is a summary of all Zuora transactions, such as account receivables, credit balance adjustment, and revenue."}, "doc.zuora_source.journal_entry_item_table": {"name": "journal_entry_item_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.journal_entry_item_table", "block_contents": "Table containing individual line items of a transaction associated with a journal entry."}, "doc.zuora_source.order_table": {"name": "order_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.order_table", "block_contents": "Orders are contractual agreements between merchants and customers. You can create multiple subscriptions and subscription amendments at once in a single order. All the operations on subscriptions in orders are done by order actions."}, "doc.zuora_source.order_item_table": {"name": "order_item_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.order_item_table", "block_contents": "An order item is a sales item within an order in the context of the recurring subscription business model. It can be a unit of products or service, but defined by both quantity and term (the start and end dates)."}, "doc.zuora_source.payment_table": {"name": "payment_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.payment_table", "block_contents": "A payment is the money that customers send to pay for invoices related to their subscriptions"}, "doc.zuora_source.payment_method_table": {"name": "payment_method_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.payment_method_table", "block_contents": "Payment methods are the ways in which customers pay for their subscriptions. Your customers can choose a payment method from your company's list of preferred payment methods."}, "doc.zuora_source.product_table": {"name": "product_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.product_table", "block_contents": "A product is an item or service that your company sells. In the subscription economy, a product is generally a service that your customers subscribe to rather than a physical item that they purchase one time."}, "doc.zuora_source.product_rate_plan_table": {"name": "product_rate_plan_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.product_rate_plan_table", "block_contents": "A product rate plan is the part of a product that your customers subscribe to. Each product can have multiple product rate plans, and each product rate plan can have multiple product rate plan charges, which are fees for products and their product rate plans."}, "doc.zuora_source.product_rate_plan_charge_table": {"name": "product_rate_plan_charge_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.product_rate_plan_charge_table", "block_contents": "A product rate plan charge represents a charge model or a set of fees associated with a product rate plan, which is the part of a product that your customers subscribe to. Each product rate plan can have multiple product rate plan charges."}, "doc.zuora_source.rate_plan_table": {"name": "rate_plan_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.rate_plan_table", "block_contents": "A rate plan is part of a subscription or an amendment to a subscription, and it comes from a product rate plan.  Rate plans represent a price or a collection of prices for a service you sell. An individual rate plan contains all charges specific to a particular subscription."}, "doc.zuora_source.rate_plan_charge_table": {"name": "rate_plan_charge_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.rate_plan_charge_table", "block_contents": "A rate plan charge is part of a subscription or an amendment to a subscription, and it comes from a product rate plan charge. Rate plan charges represent the actual charges for the rate plans or services that you sell."}, "doc.zuora_source.refund_table": {"name": "refund_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.refund_table", "block_contents": "A refund returns money to a customer - as opposed to a credit, which creates a customer credit balance that may be applied to reduce the amount owed to you. Electronic refunds are processed by Zuora via a payment gateway.\nExternal refunds indicate that the refund was processed outside of Zuora, say by a check, and the transaction must be recorded."}, "doc.zuora_source.refund_invoice_payment_table": {"name": "refund_invoice_payment_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.refund_invoice_payment_table", "block_contents": "This table exports information on refunds attributed to invoice payments."}, "doc.zuora_source.subscription_table": {"name": "subscription_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.subscription_table", "block_contents": "A subscription is a product or service that has recurring charges, such as a monthly flat fee or charges based on usage. Subscriptions can also include one-time charges, such as activation fees. Every subscription must be associated with an account. At least one active account must exist before any subscriptions can be created."}, "doc.zuora_source.taxation_item_table": {"name": "taxation_item_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.taxation_item_table", "block_contents": "Used to add a tax amount to an invoice item. Changes that you make with this object affect the product charges in your product catalog, but not the charges in existing subscriptions. To change taxes in existing subscriptions, you need to amend the subscription - remove the existing charge and replace it with the modified charge."}, "doc.zuora_source.account_id": {"name": "account_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.account_id", "block_contents": ""}, "doc.zuora_source.bill_to_contact_id": {"name": "bill_to_contact_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.bill_to_contact_id", "block_contents": "Person that you would like to bill or send the invoice to."}, "doc.zuora_source.contact_id": {"name": "contact_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.contact_id", "block_contents": ""}, "doc.zuora_source.currency": {"name": "currency", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.currency", "block_contents": "Currency the customer is billed in."}, "doc.zuora_source.created_date": {"name": "created_date", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.created_date", "block_contents": "Creation date for"}, "doc.zuora_source.created_by_id": {"name": "created_by_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.created_by_id", "block_contents": "Identifier of the user who created"}, "doc.zuora_source.default_payment_method_id": {"name": "default_payment_method_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.default_payment_method_id", "block_contents": "Identifier of the default payment method for the account."}, "doc.zuora_source._fivetran_synced": {"name": "_fivetran_synced", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source._fivetran_synced", "block_contents": "Timestamp of when a record was last synced."}, "doc.zuora_source._fivetran_deleted": {"name": "_fivetran_deleted", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source._fivetran_deleted", "block_contents": "Boolean identifiying whether the record was deleted in the source."}, "doc.zuora_source.home_currency": {"name": "home_currency", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.home_currency", "block_contents": "Home currency the customer is billed in."}, "doc.zuora_source.id": {"name": "id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.id", "block_contents": "The unique identifier of the"}, "doc.zuora_source.is_most_recent_record": {"name": "is_most_recent_record", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.is_most_recent_record", "block_contents": "Is this the most recent record of"}, "doc.zuora_source.product_id": {"name": "product_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.product_id", "block_contents": ""}, "doc.zuora_source.sold_to_contact_id": {"name": "sold_to_contact_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.sold_to_contact_id", "block_contents": "Person that you have sold your product or services to; can be the same as the bill to contact."}, "doc.zuora_source.transaction_currency": {"name": "transaction_currency", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.transaction_currency", "block_contents": "Transaction currency the customer is billed in."}, "doc.zuora_source.updated_by_id": {"name": "updated_by_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.updated_by_id", "block_contents": "Identifier of the user who last updated"}, "doc.zuora_source.updated_date": {"name": "updated_date", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.updated_date", "block_contents": "Last updated date for"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"test.zuora_integration_tests.consistency_line_item_enhanced": [{"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "consistency_line_item_enhanced", "resource_type": "test", "package_name": "zuora_integration_tests", "path": "consistency/consistency_line_item_enhanced.sql", "original_file_path": "tests/consistency/consistency_line_item_enhanced.sql", "unique_id": "test.zuora_integration_tests.consistency_line_item_enhanced", "fqn": ["zuora_integration_tests", "consistency", "consistency_line_item_enhanced"], "alias": "consistency_line_item_enhanced", "checksum": {"name": "sha256", "checksum": "dc58d9ce3157ae0ece708ce2d113991fa23bd2a79509a0101db699bf52067a10"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1723501431.506346, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\nwith prod as (\n    select *\n    from {{ target.schema }}_zuora_prod.zuora__line_item_enhanced\n),\n\ndev as (\n    select *\n    from {{ target.schema }}_zuora_dev.zuora__line_item_enhanced\n), \n\nfinal as (\n    -- test will fail if any rows from prod are not found in dev\n    (select * from prod\n    except distinct\n    select * from dev)\n\n    union all -- union since we only care if rows are produced\n\n    -- test will fail if any rows from dev are not found in prod\n    (select * from dev\n    except distinct\n    select * from prod)\n    )\n\nselect *\nfrom final", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "test.zuora_integration_tests.consistency_line_item_enhanced_count": [{"database": "postgres", "schema": "zz_zuora_dbt_test__audit", "name": "consistency_line_item_enhanced_count", "resource_type": "test", "package_name": "zuora_integration_tests", "path": "consistency/consistency_line_item_enhanced_count.sql", "original_file_path": "tests/consistency/consistency_line_item_enhanced_count.sql", "unique_id": "test.zuora_integration_tests.consistency_line_item_enhanced_count", "fqn": ["zuora_integration_tests", "consistency", "consistency_line_item_enhanced_count"], "alias": "consistency_line_item_enhanced_count", "checksum": {"name": "sha256", "checksum": "46ae8333bb5fd7932e47eb7525336453db629986be606c0bfec396f4da58d67f"}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["fivetran_validations"], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["fivetran_validations"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"tags": ["fivetran_validations"], "enabled": false}, "created_at": 1723501431.521936, "relation_name": null, "raw_code": "{{ config(\n    tags=\"fivetran_validations\",\n    enabled=var('fivetran_validation_tests_enabled', false)\n) }}\n\n-- this test is to make sure the rows counts are the same between versions\nwith prod as (\n    select count(*) as prod_rows\n    from {{ target.schema }}_zuora_prod.zuora__line_item_enhanced\n),\n\ndev as (\n    select count(*) as dev_rows\n    from {{ target.schema }}_zuora_dev.zuora__line_item_enhanced\n)\n\n-- test will return values and fail if the row counts don't match\nselect *\nfrom prod\njoin dev\n    on prod.prod_rows != dev.dev_rows", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}}], "model.zuora.zuora__line_item_enhanced": [{"database": "postgres", "schema": "zz_zuora_zuora_dev", "name": "zuora__line_item_enhanced", "resource_type": "model", "package_name": "zuora", "path": "standardized_models/zuora__line_item_enhanced.sql", "original_file_path": "models/standardized_models/zuora__line_item_enhanced.sql", "unique_id": "model.zuora.zuora__line_item_enhanced", "fqn": ["zuora", "standardized_models", "zuora__line_item_enhanced"], "alias": "zuora__line_item_enhanced", "checksum": {"name": "sha256", "checksum": "858b61f1baab58341feb4f67b1103f7b33adffbea647caf3cb833ed2ed655508"}, "config": {"enabled": false, "alias": null, "schema": "zuora_dev", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model constructs a comprehensive, denormalized analytical table that enables reporting on key revenue, subscription, customer, and product metrics from your billing platform. It\u2019s designed to align with the schema of the `*__line_item_enhanced` model found in Zuora, Recharge, Stripe, Shopify, and Recurly, offering standardized reporting across various billing platforms. To see the kinds of insights this model can generate, explore example visualizations in the [Fivetran Billing Model Streamlit App](https://fivetran-billing-model.streamlit.app/). Visit the app for more details.", "columns": {"header_id": {"name": "header_id", "description": "{{ doc('header_id') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "line_item_id": {"name": "line_item_id", "description": "{{ doc('line_item_id') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "line_item_index": {"name": "line_item_index", "description": "{{ doc('line_item_index') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "record_type": {"name": "record_type", "description": "{{ doc('record_type') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "{{ doc('created_at') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "header_status": {"name": "header_status", "description": "{{ doc('header_status') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_type": {"name": "billing_type", "description": "{{ doc('billing_type') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "{{ doc('currency') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "{{ doc('product_id') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_name": {"name": "product_name", "description": "{{ doc('product_name') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_type": {"name": "product_type", "description": "{{ doc('product_type') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transaction_type": {"name": "transaction_type", "description": "{{ doc('transaction_type') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "{{ doc('quantity') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "{{ doc('unit_amount') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_amount": {"name": "discount_amount", "description": "{{ doc('discount_amount') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "{{ doc('tax_amount') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount": {"name": "total_amount", "description": "{{ doc('total_amount') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_id": {"name": "payment_id", "description": "{{ doc('payment_id') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method": {"name": "payment_method", "description": "{{ doc('payment_method') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "{{ doc('payment_method_id') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_at": {"name": "payment_at", "description": "{{ doc('payment_at') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fee_amount": {"name": "fee_amount", "description": "{{ doc('fee_amount') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "{{ doc('refund_amount') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "{{ doc('subscription_id') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_plan": {"name": "subscription_plan", "description": "{{ doc('subscription_plan') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_period_started_at": {"name": "subscription_period_started_at", "description": "{{ doc('subscription_period_started_at') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_period_ended_at": {"name": "subscription_period_ended_at", "description": "{{ doc('subscription_period_ended_at') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_status": {"name": "subscription_status", "description": "{{ doc('subscription_status') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "{{ doc('customer_id') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_created_at": {"name": "customer_created_at", "description": "{{ doc('customer_created_at') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_level": {"name": "customer_level", "description": "{{ doc('customer_level') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_name": {"name": "customer_name", "description": "{{ doc('customer_name') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_company": {"name": "customer_company", "description": "{{ doc('customer_company') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "{{ doc('customer_email') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_city": {"name": "customer_city", "description": "{{ doc('customer_city') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_country": {"name": "customer_country", "description": "{{ doc('customer_country') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "zuora://models/standardized_models/zuora__standardized_models.yml", "build_path": null, "unrendered_config": {"schema": "zuora_{{ var('directed_schema','dev') }}", "materialized": "table", "enabled": false}, "created_at": 1723501432.43413, "relation_name": "\"postgres\".\"zz_zuora_zuora_dev\".\"zuora__line_item_enhanced\"", "raw_code": "{{ config(enabled= var('zuora__standardized_billing_model_enabled', False)) }}\n\nwith line_items as (\n\n    select * \n    from {{ var('invoice_item')}}\n    where is_most_recent_record \n\n), accounts as (\n\n    select * \n    from {{ var('account') }}\n    where is_most_recent_record \n\n), contacts as (\n\n    select * \n    from {{ var('contact') }}\n    where is_most_recent_record \n\n), invoices as (\n\n    select * \n    from {{ var('invoice') }}\n    where is_most_recent_record \n\n), invoice_payments as (\n\n    select * \n    from {{ var('invoice_payment') }}\n    where is_most_recent_record \n\n), payments as (\n\n    select * \n    from {{ var('payment') }}\n    where is_most_recent_record\n\n), payment_methods as (\n\n    select * \n    from {{ var('payment_method') }}\n    where is_most_recent_record\n\n), products as (\n\n    select * \n    from {{ var('product') }}\n    where is_most_recent_record\n\n), subscriptions as (\n\n    select *\n    from {{ var('subscription') }} \n    where is_most_recent_record\n\n), rate_plan as (\n\n    select * \n    from {{ var('rate_plan') }}\n    where is_most_recent_record \n\n), enhanced as (\nselect\n    line_items.invoice_id as header_id,\n    line_items.invoice_item_id as line_item_id,\n    row_number() over (partition by line_items.invoice_id\n        order by line_items.invoice_item_id) as line_item_index,\n    line_items.created_date as line_item_created_at,\n    invoices.created_date as invoice_created_at,\n    invoices.status as header_status,\n    invoices.source_type as billing_type,\n    line_items.transaction_currency as currency,\n    line_items.product_id,\n    products.name as product_name,\n    products.category as product_type,\n    case \n        when cast(line_items.processing_type as {{ dbt.type_string() }}) = '0' then 'charge'\n        when cast(line_items.processing_type as {{ dbt.type_string() }}) = '1' then 'discount'\n        when cast(line_items.processing_type as {{ dbt.type_string() }}) = '2' then 'prepayment'\n        when cast(line_items.processing_type as {{ dbt.type_string() }}) = '3' then 'tax'\n        end as transaction_type,\n    line_items.quantity,\n    line_items.unit_price as unit_amount,\n    case when cast(line_items.processing_type as {{ dbt.type_string() }}) = '1' \n        then line_items.charge_amount else 0 end as discount_amount,\n    line_items.tax_amount,\n    line_items.charge_amount as total_amount,\n    invoice_payments.payment_id as payment_id,\n    invoice_payments.payment_method_id,\n    payment_methods.name as payment_method,\n    payments.effective_date as payment_at,\n    invoices.refund_amount,\n    line_items.subscription_id,\n    rate_plan.name as subscription_plan,\n    subscriptions.subscription_start_date as subscription_period_started_at,\n    subscriptions.subscription_end_date as subscription_period_ended_at,\n    subscriptions.status as subscription_status,\n    line_items.account_id as customer_id,\n    'customer' as customer_level,\n    accounts.created_date as customer_created_at,\n    accounts.name as customer_company,\n    {{ dbt.concat([\"contacts.first_name\", \"' '\", \"contacts.last_name\"]) }} as customer_name,\n    contacts.work_email as customer_email,\n    contacts.city as customer_city,\n    contacts.country as customer_country\n\nfrom line_items\n\nleft join invoices\n    on invoices.invoice_id = line_items.invoice_id\n\nleft join invoice_payments\n    on invoice_payments.invoice_id = invoices.invoice_id\n\nleft join payments\n    on payments.payment_id = invoice_payments.payment_id\n\nleft join payment_methods\n    on payment_methods.payment_method_id = payments.payment_method_id\n\nleft join accounts\n    on accounts.account_id = line_items.account_id\n\nleft join contacts\n    on contacts.contact_id = line_items.bill_to_contact_id\n\nleft join products\n    on products.product_id = line_items.product_id\n\nleft join subscriptions\n    on subscriptions.subscription_id = line_items.subscription_id\n\nleft join rate_plan\n    on rate_plan.subscription_id = subscriptions.subscription_id\n\n\n), final as (\n\n    select \n        header_id,\n        line_item_id,\n        line_item_index,\n        'line_item' as record_type,\n        line_item_created_at as created_at,\n        currency,\n        header_status,\n        product_id,\n        product_name,\n        transaction_type,\n        billing_type,\n        product_type,\n        quantity,\n        unit_amount,\n        discount_amount,\n        tax_amount,\n        total_amount,\n        payment_id,\n        payment_method_id,\n        payment_method,\n        payment_at,\n        cast(null as {{ dbt.type_float() }}) as fee_amount,\n        cast(null as {{ dbt.type_float() }}) as refund_amount,\n        subscription_id,\n        subscription_plan,\n        subscription_period_started_at,\n        subscription_period_ended_at,\n        subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country\n    from enhanced\n\n    union all\n\n    -- Refund information is only reliable at the invoice header. Therefore the below operation creates a new line to track the refund values.\n    select\n        header_id,\n        cast(null as {{ dbt.type_string() }}) as line_item_id,\n        cast(0 as {{ dbt.type_int() }}) as line_item_index,\n        'header' as record_type,\n        invoice_created_at as created_at,\n        currency,\n        header_status,\n        cast(null as {{ dbt.type_string() }}) as product_id,\n        cast(null as {{ dbt.type_string() }}) as product_name,\n        cast(null as {{ dbt.type_string() }}) as transaction_type,\n        billing_type,\n        cast(null as {{ dbt.type_string() }}) as product_type,\n        cast(null as {{ dbt.type_float() }}) as quantity,\n        cast(null as {{ dbt.type_float() }}) as unit_amount,\n        cast(null as {{ dbt.type_float() }}) as discount_amount,\n        cast(null as {{ dbt.type_float() }}) as tax_amount,\n        cast(null as {{ dbt.type_float() }}) as total_amount,\n        payment_id,\n        payment_method_id,\n        payment_method,\n        payment_at,\n        cast(null as {{ dbt.type_float() }}) as fee_amount,\n        refund_amount,\n        cast(null as {{ dbt.type_string() }}) as subscription_id,\n        cast(null as {{ dbt.type_string() }}) as subscription_plan,\n        cast(null as {{ dbt.type_timestamp() }}) as subscription_period_started_at,\n        cast(null as {{ dbt.type_timestamp() }}) as subscription_period_ended_at,\n        cast(null as {{ dbt.type_string() }}) as subscription_status,\n        customer_id,\n        customer_created_at,\n        customer_level,\n        customer_name,\n        customer_company,\n        customer_email,\n        customer_city,\n        customer_country\n    from enhanced\n    where line_item_index = 1\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_zuora__invoice_item", "package": null, "version": null}, {"name": "stg_zuora__account", "package": null, "version": null}, {"name": "stg_zuora__contact", "package": null, "version": null}, {"name": "stg_zuora__invoice", "package": null, "version": null}, {"name": "stg_zuora__invoice_payment", "package": null, "version": null}, {"name": "stg_zuora__payment", "package": null, "version": null}, {"name": "stg_zuora__payment_method", "package": null, "version": null}, {"name": "stg_zuora__product", "package": null, "version": null}, {"name": "stg_zuora__subscription", "package": null, "version": null}, {"name": "stg_zuora__rate_plan", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.concat", "macro.dbt.type_float", "macro.dbt.type_int", "macro.dbt.type_timestamp"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}]}, "parent_map": {"seed.zuora_integration_tests.zuora_invoice_item_data": [], "seed.zuora_integration_tests.zuora_contact_data": [], "seed.zuora_integration_tests.zuora_rate_plan_charge_data": [], "seed.zuora_integration_tests.zuora_product_rate_plan_data": [], "seed.zuora_integration_tests.zuora_refund_data": [], "seed.zuora_integration_tests.zuora_rate_plan_data": [], "seed.zuora_integration_tests.zuora_product_data": [], "seed.zuora_integration_tests.zuora_account_data": [], "seed.zuora_integration_tests.zuora_amendment_data": [], "seed.zuora_integration_tests.zuora_taxation_item_data": [], "seed.zuora_integration_tests.zuora_payment_method_data": [], "seed.zuora_integration_tests.zuora_product_rate_plan_charge_data": [], "seed.zuora_integration_tests.zuora_refund_invoice_payment_data": [], "seed.zuora_integration_tests.zuora_invoice_payment_data": [], "seed.zuora_integration_tests.zuora_subscription_data": [], "seed.zuora_integration_tests.zuora_order_data": [], "seed.zuora_integration_tests.zuora_payment_data": [], "seed.zuora_integration_tests.zuora_invoice_data": [], "seed.zuora_integration_tests.zuora_credit_balance_adjustment_data": [], "model.zuora.zuora__billing_history": ["model.zuora.int_zuora__billing_enriched", "model.zuora_source.stg_zuora__invoice"], "model.zuora.zuora__account_daily_overview": ["model.zuora.int_zuora__account_running_totals", "model.zuora.zuora__account_overview"], "model.zuora.zuora__line_item_history": ["model.zuora.zuora__account_daily_overview", "model.zuora_source.stg_zuora__amendment", "model.zuora_source.stg_zuora__invoice", "model.zuora_source.stg_zuora__invoice_item", "model.zuora_source.stg_zuora__product", "model.zuora_source.stg_zuora__product_rate_plan", "model.zuora_source.stg_zuora__product_rate_plan_charge", "model.zuora_source.stg_zuora__rate_plan_charge", "model.zuora_source.stg_zuora__subscription", "model.zuora_source.stg_zuora__taxation_item"], "model.zuora.zuora__subscription_overview": ["model.zuora.zuora__account_overview", "model.zuora_source.stg_zuora__amendment", "model.zuora_source.stg_zuora__rate_plan_charge", "model.zuora_source.stg_zuora__subscription"], "model.zuora.zuora__monthly_recurring_revenue": ["model.zuora.int_zuora__mrr_date_spine", "model.zuora.zuora__line_item_history"], "model.zuora.zuora__account_overview": ["model.zuora.int_zuora__account_enriched", "model.zuora_source.stg_zuora__contact"], "model.zuora.int_zuora__mrr_date_spine": ["model.zuora.zuora__line_item_history"], "model.zuora.int_zuora__account_running_totals": ["model.zuora.int_zuora__account_partitions"], "model.zuora.int_zuora__account_enriched": ["model.zuora.zuora__billing_history", "model.zuora_source.stg_zuora__account", "model.zuora_source.stg_zuora__invoice_item", "model.zuora_source.stg_zuora__payment", "model.zuora_source.stg_zuora__subscription"], "model.zuora.int_zuora__account_rolling_totals": ["model.zuora.int_zuora__transaction_date_spine", "model.zuora.int_zuora__transactions_grouped"], "model.zuora.int_zuora__account_partitions": ["model.zuora.int_zuora__account_rolling_totals"], "model.zuora.int_zuora__transactions_grouped": ["model.zuora.zuora__billing_history"], "model.zuora.int_zuora__billing_enriched": ["model.zuora_source.stg_zuora__credit_balance_adjustment", "model.zuora_source.stg_zuora__invoice_item", "model.zuora_source.stg_zuora__invoice_payment", "model.zuora_source.stg_zuora__payment", "model.zuora_source.stg_zuora__payment_method", "model.zuora_source.stg_zuora__taxation_item"], "model.zuora.int_zuora__transaction_date_spine": ["model.zuora.zuora__billing_history"], "model.zuora_source.stg_zuora__product": ["model.zuora_source.stg_zuora__product_tmp"], "model.zuora_source.stg_zuora__product_rate_plan_charge": ["model.zuora_source.stg_zuora__product_rate_plan_charge_tmp"], "model.zuora_source.stg_zuora__invoice_item": ["model.zuora_source.stg_zuora__invoice_item_tmp"], "model.zuora_source.stg_zuora__payment": ["model.zuora_source.stg_zuora__payment_tmp"], "model.zuora_source.stg_zuora__contact": ["model.zuora_source.stg_zuora__contact_tmp"], "model.zuora_source.stg_zuora__refund": ["model.zuora_source.stg_zuora__refund_tmp"], "model.zuora_source.stg_zuora__account": ["model.zuora_source.stg_zuora__account_tmp"], "model.zuora_source.stg_zuora__taxation_item": ["model.zuora_source.stg_zuora__taxation_item_tmp"], "model.zuora_source.stg_zuora__rate_plan": ["model.zuora_source.stg_zuora__rate_plan_tmp"], "model.zuora_source.stg_zuora__rate_plan_charge": ["model.zuora_source.stg_zuora__rate_plan_charge_tmp"], "model.zuora_source.stg_zuora__invoice": ["model.zuora_source.stg_zuora__invoice_tmp"], "model.zuora_source.stg_zuora__amendment": ["model.zuora_source.stg_zuora__amendment_tmp"], "model.zuora_source.stg_zuora__order": ["model.zuora_source.stg_zuora__order_tmp"], "model.zuora_source.stg_zuora__subscription": ["model.zuora_source.stg_zuora__subscription_tmp"], "model.zuora_source.stg_zuora__refund_invoice_payment": ["model.zuora_source.stg_zuora__refund_invoice_payment_tmp"], "model.zuora_source.stg_zuora__payment_method": ["model.zuora_source.stg_zuora__payment_method_tmp"], "model.zuora_source.stg_zuora__credit_balance_adjustment": ["model.zuora_source.stg_zuora__credit_balance_adjustment_tmp"], "model.zuora_source.stg_zuora__invoice_payment": ["model.zuora_source.stg_zuora__invoice_payment_tmp"], "model.zuora_source.stg_zuora__product_rate_plan": ["model.zuora_source.stg_zuora__product_rate_plan_tmp"], "model.zuora_source.stg_zuora__payment_method_tmp": ["source.zuora_source.zuora.payment_method"], "model.zuora_source.stg_zuora__invoice_tmp": ["source.zuora_source.zuora.invoice"], "model.zuora_source.stg_zuora__rate_plan_charge_tmp": ["source.zuora_source.zuora.rate_plan_charge"], "model.zuora_source.stg_zuora__invoice_item_tmp": ["source.zuora_source.zuora.invoice_item"], "model.zuora_source.stg_zuora__contact_tmp": ["source.zuora_source.zuora.contact"], "model.zuora_source.stg_zuora__rate_plan_tmp": ["source.zuora_source.zuora.rate_plan"], "model.zuora_source.stg_zuora__refund_tmp": ["source.zuora_source.zuora.refund"], "model.zuora_source.stg_zuora__account_tmp": ["source.zuora_source.zuora.account"], "model.zuora_source.stg_zuora__product_rate_plan_tmp": ["source.zuora_source.zuora.product_rate_plan"], "model.zuora_source.stg_zuora__credit_balance_adjustment_tmp": ["source.zuora_source.zuora.credit_balance_adjustment"], "model.zuora_source.stg_zuora__taxation_item_tmp": ["source.zuora_source.zuora.taxation_item"], "model.zuora_source.stg_zuora__subscription_tmp": ["source.zuora_source.zuora.subscription"], "model.zuora_source.stg_zuora__product_tmp": ["source.zuora_source.zuora.product"], "model.zuora_source.stg_zuora__order_tmp": ["source.zuora_source.zuora.order"], "model.zuora_source.stg_zuora__amendment_tmp": ["source.zuora_source.zuora.amendment"], "model.zuora_source.stg_zuora__invoice_payment_tmp": ["source.zuora_source.zuora.invoice_payment"], "model.zuora_source.stg_zuora__product_rate_plan_charge_tmp": ["source.zuora_source.zuora.product_rate_plan_charge"], "model.zuora_source.stg_zuora__refund_invoice_payment_tmp": ["source.zuora_source.zuora.refund_invoice_payment"], "model.zuora_source.stg_zuora__payment_tmp": ["source.zuora_source.zuora.payment"], "test.zuora.unique_zuora__account_daily_overview_account_daily_id.2f527d4683": ["model.zuora.zuora__account_daily_overview"], "test.zuora.not_null_zuora__account_daily_overview_account_daily_id.5873836d5a": ["model.zuora.zuora__account_daily_overview"], "test.zuora.unique_zuora__account_overview_account_id.abf0280fca": ["model.zuora.zuora__account_overview"], "test.zuora.unique_zuora__billing_history_invoice_id.9daecb68de": ["model.zuora.zuora__billing_history"], "test.zuora.not_null_zuora__billing_history_invoice_id.46e1219d2e": ["model.zuora.zuora__billing_history"], "test.zuora.unique_zuora__line_item_history_invoice_item_id.006d565076": ["model.zuora.zuora__line_item_history"], "test.zuora.not_null_zuora__line_item_history_invoice_item_id.7b9dc1931d": ["model.zuora.zuora__line_item_history"], "test.zuora.unique_zuora__monthly_recurring_revenue_account_monthly_id.a7bf72a906": ["model.zuora.zuora__monthly_recurring_revenue"], "test.zuora.not_null_zuora__monthly_recurring_revenue_account_monthly_id.652f06f421": ["model.zuora.zuora__monthly_recurring_revenue"], "test.zuora.unique_zuora__subscription_overview_subscription_key.75505ca1b9": ["model.zuora.zuora__subscription_overview"], "test.zuora.not_null_zuora__subscription_overview_subscription_key.cf236f775f": ["model.zuora.zuora__subscription_overview"], "test.zuora.dbt_utils_unique_combination_of_columns_zuora__line_item_enhanced_header_id__line_item_id.8348c40ed1": [], "test.zuora_source.unique_stg_zuora__account_account_id.48b1eab20d": ["model.zuora_source.stg_zuora__account"], "test.zuora_source.not_null_stg_zuora__account_account_id.fbbdb7cb1f": ["model.zuora_source.stg_zuora__account"], "test.zuora_source.unique_stg_zuora__amendment_amendment_id.1adf35b9b3": ["model.zuora_source.stg_zuora__amendment"], "test.zuora_source.not_null_stg_zuora__amendment_amendment_id.d5dfc9f72e": ["model.zuora_source.stg_zuora__amendment"], "test.zuora_source.unique_stg_zuora__contact_contact_id.55e4bbceda": ["model.zuora_source.stg_zuora__contact"], "test.zuora_source.not_null_stg_zuora__contact_contact_id.825f7a5ab6": ["model.zuora_source.stg_zuora__contact"], "test.zuora_source.unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.48dcd90757": ["model.zuora_source.stg_zuora__credit_balance_adjustment"], "test.zuora_source.not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.b7d154ddd5": ["model.zuora_source.stg_zuora__credit_balance_adjustment"], "test.zuora_source.unique_stg_zuora__invoice_invoice_id.bce76b88e8": ["model.zuora_source.stg_zuora__invoice"], "test.zuora_source.not_null_stg_zuora__invoice_invoice_id.2461bd7df7": ["model.zuora_source.stg_zuora__invoice"], "test.zuora_source.unique_stg_zuora__invoice_item_invoice_item_id.c04fd09b46": ["model.zuora_source.stg_zuora__invoice_item"], "test.zuora_source.not_null_stg_zuora__invoice_item_invoice_item_id.c9ce75552a": ["model.zuora_source.stg_zuora__invoice_item"], "test.zuora_source.unique_stg_zuora__order_order_id.2506b4224d": ["model.zuora_source.stg_zuora__order"], "test.zuora_source.not_null_stg_zuora__order_order_id.3e57f63e6b": ["model.zuora_source.stg_zuora__order"], "test.zuora_source.unique_stg_zuora__payment_payment_id.104a07cd8c": ["model.zuora_source.stg_zuora__payment"], "test.zuora_source.not_null_stg_zuora__payment_payment_id.21d5bbc205": ["model.zuora_source.stg_zuora__payment"], "test.zuora_source.unique_stg_zuora__payment_method_payment_method_id.f4d0192fe3": ["model.zuora_source.stg_zuora__payment_method"], "test.zuora_source.not_null_stg_zuora__payment_method_payment_method_id.757f1baba1": ["model.zuora_source.stg_zuora__payment_method"], "test.zuora_source.unique_stg_zuora__product_product_id.aff0a8698c": ["model.zuora_source.stg_zuora__product"], "test.zuora_source.not_null_stg_zuora__product_product_id.08d94a982a": ["model.zuora_source.stg_zuora__product"], "test.zuora_source.unique_stg_zuora__product_rate_plan_product_rate_plan_id.5172fe6de3": ["model.zuora_source.stg_zuora__product_rate_plan"], "test.zuora_source.not_null_stg_zuora__product_rate_plan_product_rate_plan_id.17b42ef97f": ["model.zuora_source.stg_zuora__product_rate_plan"], "test.zuora_source.unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.3fba29feec": ["model.zuora_source.stg_zuora__product_rate_plan_charge"], "test.zuora_source.not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.ee9a534d30": ["model.zuora_source.stg_zuora__product_rate_plan_charge"], "test.zuora_source.unique_stg_zuora__rate_plan_rate_plan_id.09741de08d": ["model.zuora_source.stg_zuora__rate_plan"], "test.zuora_source.not_null_stg_zuora__rate_plan_rate_plan_id.0a3262a4ac": ["model.zuora_source.stg_zuora__rate_plan"], "test.zuora_source.unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.968ebd8116": ["model.zuora_source.stg_zuora__rate_plan_charge"], "test.zuora_source.not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.4f37fe0feb": ["model.zuora_source.stg_zuora__rate_plan_charge"], "test.zuora_source.unique_stg_zuora__refund_refund_id.01e977f065": ["model.zuora_source.stg_zuora__refund"], "test.zuora_source.unique_stg_zuora__subscription_subscription_id.219bd2fe86": ["model.zuora_source.stg_zuora__subscription"], "test.zuora_source.not_null_stg_zuora__subscription_subscription_id.be7f23f7d2": ["model.zuora_source.stg_zuora__subscription"], "test.zuora_source.unique_stg_zuora__taxation_item_taxation_item_id.2762673f7d": ["model.zuora_source.stg_zuora__taxation_item"], "test.zuora_source.not_null_stg_zuora__taxation_item_taxation_item_id.8f5f59eabf": ["model.zuora_source.stg_zuora__taxation_item"], "source.zuora_source.zuora.account": [], "source.zuora_source.zuora.amendment": [], "source.zuora_source.zuora.contact": [], "source.zuora_source.zuora.credit_balance_adjustment": [], "source.zuora_source.zuora.invoice": [], "source.zuora_source.zuora.invoice_item": [], "source.zuora_source.zuora.invoice_payment": [], "source.zuora_source.zuora.order": [], "source.zuora_source.zuora.payment": [], "source.zuora_source.zuora.payment_method": [], "source.zuora_source.zuora.product": [], "source.zuora_source.zuora.product_rate_plan": [], "source.zuora_source.zuora.product_rate_plan_charge": [], "source.zuora_source.zuora.rate_plan": [], "source.zuora_source.zuora.rate_plan_charge": [], "source.zuora_source.zuora.refund": [], "source.zuora_source.zuora.refund_invoice_payment": [], "source.zuora_source.zuora.subscription": [], "source.zuora_source.zuora.taxation_item": []}, "child_map": {"seed.zuora_integration_tests.zuora_invoice_item_data": [], "seed.zuora_integration_tests.zuora_contact_data": [], "seed.zuora_integration_tests.zuora_rate_plan_charge_data": [], "seed.zuora_integration_tests.zuora_product_rate_plan_data": [], "seed.zuora_integration_tests.zuora_refund_data": [], "seed.zuora_integration_tests.zuora_rate_plan_data": [], "seed.zuora_integration_tests.zuora_product_data": [], "seed.zuora_integration_tests.zuora_account_data": [], "seed.zuora_integration_tests.zuora_amendment_data": [], "seed.zuora_integration_tests.zuora_taxation_item_data": [], "seed.zuora_integration_tests.zuora_payment_method_data": [], "seed.zuora_integration_tests.zuora_product_rate_plan_charge_data": [], "seed.zuora_integration_tests.zuora_refund_invoice_payment_data": [], "seed.zuora_integration_tests.zuora_invoice_payment_data": [], "seed.zuora_integration_tests.zuora_subscription_data": [], "seed.zuora_integration_tests.zuora_order_data": [], "seed.zuora_integration_tests.zuora_payment_data": [], "seed.zuora_integration_tests.zuora_invoice_data": [], "seed.zuora_integration_tests.zuora_credit_balance_adjustment_data": [], "model.zuora.zuora__billing_history": ["model.zuora.int_zuora__account_enriched", "model.zuora.int_zuora__transaction_date_spine", "model.zuora.int_zuora__transactions_grouped", "test.zuora.not_null_zuora__billing_history_invoice_id.46e1219d2e", "test.zuora.unique_zuora__billing_history_invoice_id.9daecb68de"], "model.zuora.zuora__account_daily_overview": ["model.zuora.zuora__line_item_history", "test.zuora.not_null_zuora__account_daily_overview_account_daily_id.5873836d5a", "test.zuora.unique_zuora__account_daily_overview_account_daily_id.2f527d4683"], "model.zuora.zuora__line_item_history": ["model.zuora.int_zuora__mrr_date_spine", "model.zuora.zuora__monthly_recurring_revenue", "test.zuora.not_null_zuora__line_item_history_invoice_item_id.7b9dc1931d", "test.zuora.unique_zuora__line_item_history_invoice_item_id.006d565076"], "model.zuora.zuora__subscription_overview": ["test.zuora.not_null_zuora__subscription_overview_subscription_key.cf236f775f", "test.zuora.unique_zuora__subscription_overview_subscription_key.75505ca1b9"], "model.zuora.zuora__monthly_recurring_revenue": ["test.zuora.not_null_zuora__monthly_recurring_revenue_account_monthly_id.652f06f421", "test.zuora.unique_zuora__monthly_recurring_revenue_account_monthly_id.a7bf72a906"], "model.zuora.zuora__account_overview": ["model.zuora.zuora__account_daily_overview", "model.zuora.zuora__subscription_overview", "test.zuora.unique_zuora__account_overview_account_id.abf0280fca"], "model.zuora.int_zuora__mrr_date_spine": ["model.zuora.zuora__monthly_recurring_revenue"], "model.zuora.int_zuora__account_running_totals": ["model.zuora.zuora__account_daily_overview"], "model.zuora.int_zuora__account_enriched": ["model.zuora.zuora__account_overview"], "model.zuora.int_zuora__account_rolling_totals": ["model.zuora.int_zuora__account_partitions"], "model.zuora.int_zuora__account_partitions": ["model.zuora.int_zuora__account_running_totals"], "model.zuora.int_zuora__transactions_grouped": ["model.zuora.int_zuora__account_rolling_totals"], "model.zuora.int_zuora__billing_enriched": ["model.zuora.zuora__billing_history"], "model.zuora.int_zuora__transaction_date_spine": ["model.zuora.int_zuora__account_rolling_totals"], "model.zuora_source.stg_zuora__product": ["model.zuora.zuora__line_item_history", "test.zuora_source.not_null_stg_zuora__product_product_id.08d94a982a", "test.zuora_source.unique_stg_zuora__product_product_id.aff0a8698c"], "model.zuora_source.stg_zuora__product_rate_plan_charge": ["model.zuora.zuora__line_item_history", "test.zuora_source.not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.ee9a534d30", "test.zuora_source.unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.3fba29feec"], "model.zuora_source.stg_zuora__invoice_item": ["model.zuora.int_zuora__account_enriched", "model.zuora.int_zuora__billing_enriched", "model.zuora.zuora__line_item_history", "test.zuora_source.not_null_stg_zuora__invoice_item_invoice_item_id.c9ce75552a", "test.zuora_source.unique_stg_zuora__invoice_item_invoice_item_id.c04fd09b46"], "model.zuora_source.stg_zuora__payment": ["model.zuora.int_zuora__account_enriched", "model.zuora.int_zuora__billing_enriched", "test.zuora_source.not_null_stg_zuora__payment_payment_id.21d5bbc205", "test.zuora_source.unique_stg_zuora__payment_payment_id.104a07cd8c"], "model.zuora_source.stg_zuora__contact": ["model.zuora.zuora__account_overview", "test.zuora_source.not_null_stg_zuora__contact_contact_id.825f7a5ab6", "test.zuora_source.unique_stg_zuora__contact_contact_id.55e4bbceda"], "model.zuora_source.stg_zuora__refund": ["test.zuora_source.unique_stg_zuora__refund_refund_id.01e977f065"], "model.zuora_source.stg_zuora__account": ["model.zuora.int_zuora__account_enriched", "test.zuora_source.not_null_stg_zuora__account_account_id.fbbdb7cb1f", "test.zuora_source.unique_stg_zuora__account_account_id.48b1eab20d"], "model.zuora_source.stg_zuora__taxation_item": ["model.zuora.int_zuora__billing_enriched", "model.zuora.zuora__line_item_history", "test.zuora_source.not_null_stg_zuora__taxation_item_taxation_item_id.8f5f59eabf", "test.zuora_source.unique_stg_zuora__taxation_item_taxation_item_id.2762673f7d"], "model.zuora_source.stg_zuora__rate_plan": ["test.zuora_source.not_null_stg_zuora__rate_plan_rate_plan_id.0a3262a4ac", "test.zuora_source.unique_stg_zuora__rate_plan_rate_plan_id.09741de08d"], "model.zuora_source.stg_zuora__rate_plan_charge": ["model.zuora.zuora__line_item_history", "model.zuora.zuora__subscription_overview", "test.zuora_source.not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.4f37fe0feb", "test.zuora_source.unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.968ebd8116"], "model.zuora_source.stg_zuora__invoice": ["model.zuora.zuora__billing_history", "model.zuora.zuora__line_item_history", "test.zuora_source.not_null_stg_zuora__invoice_invoice_id.2461bd7df7", "test.zuora_source.unique_stg_zuora__invoice_invoice_id.bce76b88e8"], "model.zuora_source.stg_zuora__amendment": ["model.zuora.zuora__line_item_history", "model.zuora.zuora__subscription_overview", "test.zuora_source.not_null_stg_zuora__amendment_amendment_id.d5dfc9f72e", "test.zuora_source.unique_stg_zuora__amendment_amendment_id.1adf35b9b3"], "model.zuora_source.stg_zuora__order": ["test.zuora_source.not_null_stg_zuora__order_order_id.3e57f63e6b", "test.zuora_source.unique_stg_zuora__order_order_id.2506b4224d"], "model.zuora_source.stg_zuora__subscription": ["model.zuora.int_zuora__account_enriched", "model.zuora.zuora__line_item_history", "model.zuora.zuora__subscription_overview", "test.zuora_source.not_null_stg_zuora__subscription_subscription_id.be7f23f7d2", "test.zuora_source.unique_stg_zuora__subscription_subscription_id.219bd2fe86"], "model.zuora_source.stg_zuora__refund_invoice_payment": [], "model.zuora_source.stg_zuora__payment_method": ["model.zuora.int_zuora__billing_enriched", "test.zuora_source.not_null_stg_zuora__payment_method_payment_method_id.757f1baba1", "test.zuora_source.unique_stg_zuora__payment_method_payment_method_id.f4d0192fe3"], "model.zuora_source.stg_zuora__credit_balance_adjustment": ["model.zuora.int_zuora__billing_enriched", "test.zuora_source.not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.b7d154ddd5", "test.zuora_source.unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.48dcd90757"], "model.zuora_source.stg_zuora__invoice_payment": ["model.zuora.int_zuora__billing_enriched"], "model.zuora_source.stg_zuora__product_rate_plan": ["model.zuora.zuora__line_item_history", "test.zuora_source.not_null_stg_zuora__product_rate_plan_product_rate_plan_id.17b42ef97f", "test.zuora_source.unique_stg_zuora__product_rate_plan_product_rate_plan_id.5172fe6de3"], "model.zuora_source.stg_zuora__payment_method_tmp": ["model.zuora_source.stg_zuora__payment_method"], "model.zuora_source.stg_zuora__invoice_tmp": ["model.zuora_source.stg_zuora__invoice"], "model.zuora_source.stg_zuora__rate_plan_charge_tmp": ["model.zuora_source.stg_zuora__rate_plan_charge"], "model.zuora_source.stg_zuora__invoice_item_tmp": ["model.zuora_source.stg_zuora__invoice_item"], "model.zuora_source.stg_zuora__contact_tmp": ["model.zuora_source.stg_zuora__contact"], "model.zuora_source.stg_zuora__rate_plan_tmp": ["model.zuora_source.stg_zuora__rate_plan"], "model.zuora_source.stg_zuora__refund_tmp": ["model.zuora_source.stg_zuora__refund"], "model.zuora_source.stg_zuora__account_tmp": ["model.zuora_source.stg_zuora__account"], "model.zuora_source.stg_zuora__product_rate_plan_tmp": ["model.zuora_source.stg_zuora__product_rate_plan"], "model.zuora_source.stg_zuora__credit_balance_adjustment_tmp": ["model.zuora_source.stg_zuora__credit_balance_adjustment"], "model.zuora_source.stg_zuora__taxation_item_tmp": ["model.zuora_source.stg_zuora__taxation_item"], "model.zuora_source.stg_zuora__subscription_tmp": ["model.zuora_source.stg_zuora__subscription"], "model.zuora_source.stg_zuora__product_tmp": ["model.zuora_source.stg_zuora__product"], "model.zuora_source.stg_zuora__order_tmp": ["model.zuora_source.stg_zuora__order"], "model.zuora_source.stg_zuora__amendment_tmp": ["model.zuora_source.stg_zuora__amendment"], "model.zuora_source.stg_zuora__invoice_payment_tmp": ["model.zuora_source.stg_zuora__invoice_payment"], "model.zuora_source.stg_zuora__product_rate_plan_charge_tmp": ["model.zuora_source.stg_zuora__product_rate_plan_charge"], "model.zuora_source.stg_zuora__refund_invoice_payment_tmp": ["model.zuora_source.stg_zuora__refund_invoice_payment"], "model.zuora_source.stg_zuora__payment_tmp": ["model.zuora_source.stg_zuora__payment"], "test.zuora.unique_zuora__account_daily_overview_account_daily_id.2f527d4683": [], "test.zuora.not_null_zuora__account_daily_overview_account_daily_id.5873836d5a": [], "test.zuora.unique_zuora__account_overview_account_id.abf0280fca": [], "test.zuora.unique_zuora__billing_history_invoice_id.9daecb68de": [], "test.zuora.not_null_zuora__billing_history_invoice_id.46e1219d2e": [], "test.zuora.unique_zuora__line_item_history_invoice_item_id.006d565076": [], "test.zuora.not_null_zuora__line_item_history_invoice_item_id.7b9dc1931d": [], "test.zuora.unique_zuora__monthly_recurring_revenue_account_monthly_id.a7bf72a906": [], "test.zuora.not_null_zuora__monthly_recurring_revenue_account_monthly_id.652f06f421": [], "test.zuora.unique_zuora__subscription_overview_subscription_key.75505ca1b9": [], "test.zuora.not_null_zuora__subscription_overview_subscription_key.cf236f775f": [], "test.zuora.dbt_utils_unique_combination_of_columns_zuora__line_item_enhanced_header_id__line_item_id.8348c40ed1": [], "test.zuora_source.unique_stg_zuora__account_account_id.48b1eab20d": [], "test.zuora_source.not_null_stg_zuora__account_account_id.fbbdb7cb1f": [], "test.zuora_source.unique_stg_zuora__amendment_amendment_id.1adf35b9b3": [], "test.zuora_source.not_null_stg_zuora__amendment_amendment_id.d5dfc9f72e": [], "test.zuora_source.unique_stg_zuora__contact_contact_id.55e4bbceda": [], "test.zuora_source.not_null_stg_zuora__contact_contact_id.825f7a5ab6": [], "test.zuora_source.unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.48dcd90757": [], "test.zuora_source.not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.b7d154ddd5": [], "test.zuora_source.unique_stg_zuora__invoice_invoice_id.bce76b88e8": [], "test.zuora_source.not_null_stg_zuora__invoice_invoice_id.2461bd7df7": [], "test.zuora_source.unique_stg_zuora__invoice_item_invoice_item_id.c04fd09b46": [], "test.zuora_source.not_null_stg_zuora__invoice_item_invoice_item_id.c9ce75552a": [], "test.zuora_source.unique_stg_zuora__order_order_id.2506b4224d": [], "test.zuora_source.not_null_stg_zuora__order_order_id.3e57f63e6b": [], "test.zuora_source.unique_stg_zuora__payment_payment_id.104a07cd8c": [], "test.zuora_source.not_null_stg_zuora__payment_payment_id.21d5bbc205": [], "test.zuora_source.unique_stg_zuora__payment_method_payment_method_id.f4d0192fe3": [], "test.zuora_source.not_null_stg_zuora__payment_method_payment_method_id.757f1baba1": [], "test.zuora_source.unique_stg_zuora__product_product_id.aff0a8698c": [], "test.zuora_source.not_null_stg_zuora__product_product_id.08d94a982a": [], "test.zuora_source.unique_stg_zuora__product_rate_plan_product_rate_plan_id.5172fe6de3": [], "test.zuora_source.not_null_stg_zuora__product_rate_plan_product_rate_plan_id.17b42ef97f": [], "test.zuora_source.unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.3fba29feec": [], "test.zuora_source.not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.ee9a534d30": [], "test.zuora_source.unique_stg_zuora__rate_plan_rate_plan_id.09741de08d": [], "test.zuora_source.not_null_stg_zuora__rate_plan_rate_plan_id.0a3262a4ac": [], "test.zuora_source.unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.968ebd8116": [], "test.zuora_source.not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.4f37fe0feb": [], "test.zuora_source.unique_stg_zuora__refund_refund_id.01e977f065": [], "test.zuora_source.unique_stg_zuora__subscription_subscription_id.219bd2fe86": [], "test.zuora_source.not_null_stg_zuora__subscription_subscription_id.be7f23f7d2": [], "test.zuora_source.unique_stg_zuora__taxation_item_taxation_item_id.2762673f7d": [], "test.zuora_source.not_null_stg_zuora__taxation_item_taxation_item_id.8f5f59eabf": [], "source.zuora_source.zuora.account": ["model.zuora_source.stg_zuora__account_tmp"], "source.zuora_source.zuora.amendment": ["model.zuora_source.stg_zuora__amendment_tmp"], "source.zuora_source.zuora.contact": ["model.zuora_source.stg_zuora__contact_tmp"], "source.zuora_source.zuora.credit_balance_adjustment": ["model.zuora_source.stg_zuora__credit_balance_adjustment_tmp"], "source.zuora_source.zuora.invoice": ["model.zuora_source.stg_zuora__invoice_tmp"], "source.zuora_source.zuora.invoice_item": ["model.zuora_source.stg_zuora__invoice_item_tmp"], "source.zuora_source.zuora.invoice_payment": ["model.zuora_source.stg_zuora__invoice_payment_tmp"], "source.zuora_source.zuora.order": ["model.zuora_source.stg_zuora__order_tmp"], "source.zuora_source.zuora.payment": ["model.zuora_source.stg_zuora__payment_tmp"], "source.zuora_source.zuora.payment_method": ["model.zuora_source.stg_zuora__payment_method_tmp"], "source.zuora_source.zuora.product": ["model.zuora_source.stg_zuora__product_tmp"], "source.zuora_source.zuora.product_rate_plan": ["model.zuora_source.stg_zuora__product_rate_plan_tmp"], "source.zuora_source.zuora.product_rate_plan_charge": ["model.zuora_source.stg_zuora__product_rate_plan_charge_tmp"], "source.zuora_source.zuora.rate_plan": ["model.zuora_source.stg_zuora__rate_plan_tmp"], "source.zuora_source.zuora.rate_plan_charge": ["model.zuora_source.stg_zuora__rate_plan_charge_tmp"], "source.zuora_source.zuora.refund": ["model.zuora_source.stg_zuora__refund_tmp"], "source.zuora_source.zuora.refund_invoice_payment": ["model.zuora_source.stg_zuora__refund_invoice_payment_tmp"], "source.zuora_source.zuora.subscription": ["model.zuora_source.stg_zuora__subscription_tmp"], "source.zuora_source.zuora.taxation_item": ["model.zuora_source.stg_zuora__taxation_item_tmp"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}